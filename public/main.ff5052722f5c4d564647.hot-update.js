/*! For license information please see main.ff5052722f5c4d564647.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/About/Gallery.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/gsap/index.js"),r=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/lodash/map.js"),h=s.n(n),a=s("./app/components/Canvas/About/Media.js");class o{constructor({element:t,geometry:e,index:s,gl:i,scene:n,sizes:h}){this.element=t,this.elementsWrapper=t.querySelector(".about__gallery__wrapper"),this.geometry=e,this.index=s,this.gl=i,this.scene=n,this.sizes=h,this.group=new r.Transform,this.scroll={current:0,target:0,start:0,lerp:.1,velocity:1},this.createMedias(),this.group.setParent(this.scene)}createMedias(){this.mediasElements=this.element.querySelectorAll(".about__gallery__media"),this.medias=h()(this.mediasElements,((t,e)=>new a.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){h()(this.medias,(t=>t.show()))}hide(){h()(this.medias,(t=>t.hide()))}onResize(t){this.bounds=this.elementsWrapper.getBoundingClientRect(),this.sizes=t.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,h()(this.medias,(e=>e.onResize(t,this.scroll.current)))}onTouchDown({x:t,y:e}){this.scroll.start=this.scroll.current}onTouchMove({x:t,y:e}){const s=t.start-t.end;this.scroll.target=this.scroll.start-s}onTouchUp({x:t,y:e}){}update(t){if(!this.bounds)return;const e=.1*(t.current-t.target),s=t.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.velocity=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.velocity=1),this.scroll.target-=this.scroll.velocity,this.scroll.target+=e,this.scroll.current=i.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),h()(this.medias,((t,e)=>{const s=t.mesh.scale.x/2+.25;if("left"===this.direction){t.mesh.position.x+s<-this.sizes.width/2&&(t.extra+=this.width)}else if("right"===this.direction){t.mesh.position.x-s>this.sizes.width/2&&(t.extra-=this.width)}t.update(this.scroll.current)})),this.group.position.y=s*this.sizes.height}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/About/Media.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/core/Program.js"),r=s("./node_modules/ogl/src/core/Mesh.js"),n=s("./app/shaders/plane-vertex.glsl"),h=s("./app/shaders/plane-fragment.glsl"),a=s("./node_modules/gsap/index.js");class o{constructor({element:t,geometry:e,gl:s,index:i,scene:r,sizes:n}){this.element=t,this.gl=s,this.geometry=e,this.scene=r,this.index=i,this.sizes=n,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){const t=this.element.querySelector("img");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:h.default,vertex:n.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){a.default.fromTo(this.program.uniforms.uAlpha,{value:0},{delay:.1*this.index,duration:1,value:1})}hide(){a.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e){this.extra=0,this.createBounds(t),this.updateX(e),this.updateY(0)}updateRotation(){this.mesh.rotation.z=a.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.1*Math.PI,.1*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height;const t=a.default.utils.mapRange(0,this.sizes.width/2,.05,0,Math.abs(this.mesh.position.x));this.mesh.scale.x+=t,this.mesh.scale.y+=t}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=58*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-58}update(t){this.bounds&&(this.updateRotation(),this.updateScale(),this.updateX(t),this.updateY(0))}}},"./app/components/Canvas/About/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./node_modules/lodash/map.js"),h=s.n(n),a=s("./app/components/Canvas/About/Gallery.js");const o=class{constructor({gl:t,scene:e,sizes:s}){this.gl=t,this.sizes=s,this.group=new i.Transform,this.createGeometry(),this.createGalleries(),this.group.setParent(e),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about__gallery"),this.galleries=h()(this.galleriesElements,((t,e)=>new a.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){h()(this.galleries,(t=>t.show()))}hide(){h()(this.galleries,(t=>t.hide()))}onResize(t){h()(this.galleries,(e=>e.onResize(t)))}onTouchDown(t){h()(this.galleries,(e=>e.onTouchDown(t)))}onTouchMove(t){h()(this.galleries,(e=>e.onTouchMove(t)))}onTouchUp(t){h()(this.galleries,(e=>e.onTouchUp(t)))}onWheel({pixelX:t,pixelY:e}){}update(t){h()(this.galleries,(e=>e.update(t)))}destroy(){h()(this.galleries,(t=>t.destroy()))}}},"./app/components/Canvas/Collections/Media.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/core/Program.js"),r=s("./node_modules/ogl/src/core/Mesh.js"),n=s("./app/shaders/collections-vertex.glsl"),h=s("./app/shaders/collections-fragment.glsl"),a=s("./node_modules/gsap/index.js");const o=class{constructor({element:t,index:e,gl:s,geometry:i,scene:r,sizes:n}){this.element=t,this.index=e,this.gl=s,this.geometry=i,this.scene=r,this.sizes=n,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0},this.opacity={current:0,target:0,lerp:.1,multiplier:0}}createTexture(){const t=this.element.querySelector(".collections__gallery__media__image");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:h.default,vertex:n.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){a.default.fromTo(this.opacity,{multiplier:0},{delay:.1*this.index,duration:1,multiplier:1})}hide(){a.default.to(this.opacity,{multiplier:0})}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e.x),this.updateY(e.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t,e){if(!this.bounds)return;this.updateX(t),this.updateY(0);this.mesh.rotation.z=-.02*Math.PI*Math.sin(this.index/1),this.mesh.position.z=.1*Math.sin(this.index/1),this.opacity.target=this.index===e?1:.4,this.opacity.current=a.default.utils.interpolate(this.opacity.current,this.opacity.target,this.opacity.lerp),this.program.uniforms.uAlpha.value=this.opacity.current*this.opacity.multiplier}}},"./app/components/Canvas/Collections/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>c});var i=s("./app/components/Canvas/Collections/Media.js"),r=s("./node_modules/lodash/map.js"),n=s.n(r),h=s("./node_modules/ogl/src/core/Transform.js"),a=s("./node_modules/ogl/src/extras/Plane.js"),o=s("./node_modules/gsap/index.js"),l=s("./node_modules/prefix/index.js"),u=s.n(l);const c=class{constructor({gl:t,scene:e,sizes:s}){this.gl=t,this.sizes=s,this.scene=e,this.transformPrefix=u()("transform"),this.group=new h.Transform,this.galleryElement=document.querySelector(".collections__gallery"),this.galleryWrapperElement=document.querySelector(".collections__gallery__wrapper"),this.collectionsElements=document.querySelectorAll(".collections__article"),this.titlesElement=document.querySelector(".collections__titles"),this.collectionsElementsActive="collections__article--active",this.mediasElements=document.querySelectorAll(".collections__gallery__media"),this.scroll={current:0,target:0,start:0,lerp:.1,velocity:1},this.speed={current:0,target:0,lerp:.1},this.createGeometry(),this.createGallery(),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new a.Plane(this.gl)}createGallery(){this.medias=n()(this.mediasElements,((t,e)=>new i.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){n()(this.medias,(t=>t.show()))}hide(){n()(this.medias,(t=>t.hide()))}onResize(t){this.sizes=t.sizes,this.bounds=this.galleryWrapperElement.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,n()(this.medias,(e=>e.onResize(t,this.scroll))),this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth}onTouchDown({x:t,y:e}){this.speed.target=1,this.scroll.last=this.scroll.current}onTouchMove({x:t,y:e}){const s=t.start-t.end;this.scroll.target=this.scroll.last-s}onTouchUp({x:t,y:e}){this.speed.target=0}onWheel({pixelY:t}){this.scroll.target+=t}onChange(t){this.index=t;const e=parseInt(this.mediasElements[this.index].getAttribute("data-index"));n()(this.collectionsElements,((t,s)=>{s===e?t.classList.add(this.collectionsElementsActive):t.classList.remove(this.collectionsElementsActive)})),this.titlesElement.style[this.transformPrefix]=`translateY(-${25*e}%) translate(-50%, -50%) rotate(-90deg)`}update(){if(!this.bounds)return;this.scroll.target=o.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.speed.current=o.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.scroll.current=o.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryElement.style[this.transformPrefix]=`translateX(${this.scroll.current}px)`,this.scroll.last<this.scroll.current?this.direction="right":this.scroll.last>this.scroll.current&&(this.direction="left"),this.scroll.last=this.scroll.current;const t=Math.floor(Math.abs((this.scroll.current-this.medias[0].bounds.width/2)/this.scroll.limit)*(this.medias.length-1));this.index!==t&&this.onChange(t),n()(this.medias,((t,e)=>{t.update(this.scroll.current,this.index),t.mesh.position.y+=40*Math.cos(t.mesh.position.x/this.sizes.width*Math.PI*.1)-40}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Home/Media.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/core/Program.js"),r=s("./node_modules/ogl/src/core/Mesh.js"),n=s("./app/shaders/home-vertex.glsl"),h=s("./app/shaders/home-fragment.glsl"),a=s("./node_modules/gsap/index.js");const o=class{constructor({element:t,index:e,gl:s,geometry:i,scene:r,sizes:n}){this.element=t,this.index=e,this.gl=s,this.geometry=i,this.scene=r,this.sizes=n,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){const t=this.element;this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:h.default,vertex:n.default,uniforms:{uSpeed:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=a.default.utils.random(.03*-Math.PI,.03*Math.PI)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){a.default.fromTo(this.program.uniforms.uAlpha,{value:0},{delay:.1*this.index,duration:1,value:.4})}hide(){a.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e.x),this.updateY(e.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t,e){this.bounds&&(this.updateX(t.x),this.updateY(t.y),this.program.uniforms.uSpeed.value=e)}}},"./app/components/Canvas/Home/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>l});var i=s("./app/components/Canvas/Home/Media.js"),r=s("./node_modules/lodash/map.js"),n=s.n(r),h=s("./node_modules/ogl/src/core/Transform.js"),a=s("./node_modules/ogl/src/extras/Plane.js"),o=s("./node_modules/gsap/index.js");const l=class{constructor({gl:t,scene:e,sizes:s}){this.group=new h.Transform,this.gl=t,this.sizes=s,this.scene=e,this.galleryElement=document.querySelector(".home__gallery"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0},this.speed={current:0,target:0,lerp:.1},this.createGeometry(),this.createGallery(),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new a.Plane(this.gl,{widthSegments:20,heightSegments:20})}createGallery(){this.medias=n()(this.mediasElements,((t,e)=>new i.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){n()(this.medias,(t=>t.show()))}hide(){n()(this.medias,(t=>t.hide()))}onResize(t){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=t.sizes,this.gallerySizes={width:this.galleryBounds.width/window.innerWidth*this.sizes.width,height:this.galleryBounds.height/window.innerHeight*this.sizes.height},this.scroll.x=this.x.target=0,this.scroll.y=this.y.target=0,n()(this.medias,(e=>e.onResize(t,this.scroll)))}onTouchDown({x:t,y:e}){this.speed.target=1,this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:t,y:e}){const s=t.start-t.end,i=e.start-e.end;this.x.target=this.scrollCurrent.x-s,this.y.target=this.scrollCurrent.y-i}onTouchUp({x:t,y:e}){this.speed.target=0}onWheel({pixelX:t,pixelY:e}){this.x.target+=t,this.y.target+=e}update(){this.galleryBounds&&(this.speed.current=o.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.x.current=o.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=o.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,n()(this.medias,((t,e)=>{const s=.6*this.sizes.width,i=t.mesh.scale.x/2,r=t.mesh.scale.y/2,n=.6*this.sizes.height;if("left"===this.x.direction){t.mesh.position.x+i<-s&&(t.extra.x+=this.gallerySizes.width,t.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("right"===this.x.direction){t.mesh.position.x-i>s&&(t.extra.x-=this.gallerySizes.width,t.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}if("top"===this.y.direction){t.mesh.position.y+r<-n&&(t.extra.y+=this.gallerySizes.height,t.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("bottom"===this.y.direction){t.mesh.position.y-r>n&&(t.extra.y-=this.gallerySizes.height,t.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}t.update(this.scroll,this.speed.current)})))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Transition.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/extras/Plane.js"),r=s("./node_modules/ogl/src/core/Program.js"),n=s("./node_modules/ogl/src/core/Mesh.js"),h=s("./app/shaders/plane-vertex.glsl"),a=s("./app/shaders/plane-fragment.glsl");const o=class{constructor({collections:t,gl:e,scene:s,sizes:r,url:n}){this.gl=e,this.collections=t,this.scene=s,this.sizes=r,this.url=n,this.geometry=new i.Plane(this.gl),this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){const{index:t,medias:e}=this.collections;this.media=e[t]}createProgram(){this.program=new r.Program(this.gl,{fragment:a.default,vertex:h.default,uniforms:{uAlpha:{value:1},tMap:{value:this.media.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=this.media.mesh.scale.x,this.mesh.scale.y=this.media.mesh.scale.y,this.mesh.scale.z=this.media.mesh.scale.z,this.mesh.position.z=this.media.mesh.position.z+.01,this.mesh.setParent(this.scene)}transition(){}}},"./app/components/Canvas/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>u});var i=s("./node_modules/ogl/src/core/Renderer.js"),r=s("./node_modules/ogl/src/core/Camera.js"),n=s("./node_modules/ogl/src/core/Transform.js"),h=s("./app/components/Canvas/About/index.js"),a=s("./app/components/Canvas/Collections/index.js"),o=s("./app/components/Canvas/Home/index.js");Object(function(){var t=new Error("Cannot find module './Details'");throw t.code="MODULE_NOT_FOUND",t}());var l=s("./app/components/Canvas/Transition.js");class u{constructor({template:t}){this.template=t,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize()}createRenderer(){this.renderer=new i.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new r.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new n.Transform}createHome(){this.home=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createAbout(){this.about=new h.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyAbout(){this.about&&(this.about.destroy(),this.about=null)}createCollections(){this.collections=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyCollections(){this.collections&&(this.collections.destroy(),this.collections=null)}createDetails(){this.details=new Object(function(){var t=new Error("Cannot find module './Details'");throw t.code="MODULE_NOT_FOUND",t}())({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyDetails(){this.details&&(this.details.destroy(),this.details=null)}onPreloaded(){this.onChangeEnd(this.template)}onChangeStart(t,e){this.about&&this.about.hide(),this.collections&&this.collections.hide(),this.home&&this.home.hide(),this.isFromCollectionsToDetail="collections"===this.template&&e.indexOf("detail")>-1,this.isFromDetailToCollections="detail"===this.template&&e.indexOf("collections")>-1,(this.isFromCollectionsToDetail||this.isFromDetailToCollections)&&(this.transition=new l.default({collections:this.collections,gl:this.gl,scene:this.scene,sizes:this.sizes,url:e}))}onChangeEnd(t){"home"===t?this.createHome():this.home&&this.destroyHome(),"about"===t?this.createAbout():this.about&&this.destroyAbout(),"collections"===t?this.createCollections():this.collections&&this.destroyCollections(),"details"===t?this.createDetails():this.details&&this.destroyDetails(),this.template=t}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const t=this.camera.fov*(Math.PI/180),e=2*Math.tan(t/2)*this.camera.position.z,s=e*this.camera.aspect;this.sizes={height:e,width:s};const i={sizes:this.sizes};this.about&&this.about.onResize(i),this.collections&&this.collections.onResize(i),this.home&&this.home.onResize(i)}onTouchDown(t){this.isDown=!0,this.x.start=t.touches?t.touches[0].clientX:t.clientX,this.y.start=t.touches?t.touches[0].clientY:t.clientY;const e={x:this.x,y:this.y};this.about&&this.about.onTouchDown(e),this.collections&&this.collections.onTouchDown(e),this.home&&this.home.onTouchDown(e)}onTouchMove(t){if(!this.isDown)return;const e=t.touches?t.touches[0].clientX:t.clientX,s=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=s;const i={x:this.x,y:this.y};this.about&&this.about.onTouchMove(i),this.collections&&this.collections.onTouchMove(i),this.home&&this.home.onTouchMove(i)}onTouchUp(t){this.isDown=!1;const e=t.changedTouches?t.changedTouches[0].clientX:t.clientX,s=t.changedTouches?t.changedTouches[0].clientY:t.clientY;this.x.end=e,this.y.end=s;const i={x:this.x,y:this.y};this.about&&this.about.onTouchUp(i),this.collections&&this.collections.onTouchUp(i),this.home&&this.home.onTouchUp(i)}onWheel(t){this.collections&&this.collections.onWheel(t),this.home&&this.home.onWheel(t)}update(t){this.about&&this.about.update(t),this.collections&&this.collections.update(),this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/shaders/collections-fragment.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = (1.0 - abs(vPosition.x * 0.5)) * uAlpha;\n}"},"./app/shaders/collections-vertex.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n  vPosition = newPosition;\n\n  gl_Position = projectionMatrix * newPosition;\n}"},"./app/shaders/home-fragment.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture;\n    gl_FragColor.a = uAlpha;\n}"},"./app/shaders/home-vertex.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n    newPosition.z -= (sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0) + sin(newPosition.x / uViewportSizes.x * PI + PI / 2.0)) * abs(uSpeed);\n\n    gl_Position = projectionMatrix * newPosition;\n}"},"./app/shaders/plane-fragment.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture;\n    gl_FragColor.a = uAlpha;\n}"},"./app/shaders/plane-vertex.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"},"./node_modules/ogl/src/core/Camera.js":(t,e,s)=>{s.r(e),s.d(e,{Camera:()=>l});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/math/Mat4.js"),n=s("./node_modules/ogl/src/math/Vec3.js");const h=new r.Mat4,a=new n.Vec3,o=new n.Vec3;class l extends i.Transform{constructor(t,{near:e=.1,far:s=100,fov:i=45,aspect:h=1,left:a,right:o,bottom:l,top:u,zoom:c=1}={}){super(),Object.assign(this,{near:e,far:s,fov:i,aspect:h,left:a,right:o,bottom:l,top:u,zoom:c}),this.projectionMatrix=new r.Mat4,this.viewMatrix=new r.Mat4,this.projectionViewMatrix=new r.Mat4,this.worldPosition=new n.Vec3,this.type=a||o?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:s=this.fov,aspect:i=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:s,aspect:i}),this.projectionMatrix.fromPerspective({fov:s*(Math.PI/180),aspect:i,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:s=this.left||-1,right:i=this.right||1,bottom:r=this.bottom||-1,top:n=this.top||1,zoom:h=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:s,right:i,bottom:r,top:n,zoom:h}),s/=h,i/=h,r/=h,n/=h,this.projectionMatrix.fromOrthogonal({left:s,right:i,bottom:r,top:n,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(h.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t,e=t.worldMatrix){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const s=a;s.copy(t.geometry.bounds.center),s.applyMatrix4(e);const i=t.geometry.bounds.radius*e.getMaxScaleOnAxis();return this.frustumIntersectsSphere(s,i)}frustumIntersectsSphere(t,e){const s=o;for(let i=0;i<6;i++){const r=this.frustum[i];if(s.copy(r).dot(t)+r.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,s)=>{s.r(e),s.d(e,{Geometry:()=>o});var i=s("./node_modules/ogl/src/math/Vec3.js");const r=new i.Vec3;let n=1,h=1,a=!1;class o{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=n++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=h++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:s})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const i=this.attributes[e];this.gl.bindBuffer(i.target,i.buffer),this.glState.boundBuffer=i.buffer;let r=1;35674===s&&(r=2),35675===s&&(r=3),35676===s&&(r=4);const n=i.size/r,h=1===r?0:r*r*4,a=1===r?0:4*r;for(let e=0;e<r;e++)this.gl.vertexAttribPointer(t+e,n,i.type,i.normalized,i.stride+h,i.offset+e*a),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,i.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const s=this.attributes[e];s.needsUpdate&&this.updateAttribute(s)}));let s=2;this.attributes.index?.type===this.gl.UNSIGNED_INT&&(s=4),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*s,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*s):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:a?void 0:(console.warn("No position buffer data found to compute bounds"),a=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,s=t.size;this.bounds||(this.bounds={min:new i.Vec3,max:new i.Vec3,center:new i.Vec3,scale:new i.Vec3,radius:1/0});const r=this.bounds.min,n=this.bounds.max,h=this.bounds.center,a=this.bounds.scale;r.set(1/0),n.set(-1/0);for(let t=0,i=e.length;t<i;t+=s){const s=e[t],i=e[t+1],h=e[t+2];r.x=Math.min(s,r.x),r.y=Math.min(i,r.y),r.z=Math.min(h,r.z),n.x=Math.max(s,n.x),n.y=Math.max(i,n.y),n.z=Math.max(h,n.z)}a.sub(n,r),h.add(r,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,s=t.size;this.bounds||this.computeBoundingBox(t);let i=0;for(let t=0,n=e.length;t<n;t+=s)r.fromArray(e,t),i=Math.max(i,this.bounds.center.squaredDistance(r));this.bounds.radius=Math.sqrt(i)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,s)=>{s.r(e),s.d(e,{Mesh:()=>a});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/math/Mat3.js"),n=s("./node_modules/ogl/src/math/Mat4.js");let h=0;class a extends i.Transform{constructor(t,{geometry:e,program:s,mode:i=t.TRIANGLES,frustumCulled:a=!0,renderOrder:o=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=h++,this.geometry=e,this.program=s,this.mode=i,this.frustumCulled=a,this.renderOrder=o,this.modelViewMatrix=new n.Mat4,this.normalMatrix=new r.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix),this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})));let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,s)=>{s.r(e),s.d(e,{Program:()=>n});let i=1;const r={};class n{constructor(t,{vertex:e,fragment:s,uniforms:r={},transparent:n=!1,cullFace:h=t.BACK,frontFace:o=t.CCW,depthTest:l=!0,depthWrite:u=!0,depthFunc:c=t.LESS}={}){t.canvas||console.error("gl not passed as first argument to Program"),this.gl=t,this.uniforms=r,this.id=i++,e||console.warn("vertex shader not supplied"),s||console.warn("fragment shader not supplied"),this.transparent=n,this.cullFace=h,this.frontFace=o,this.depthTest=l,this.depthWrite=u,this.depthFunc=c,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const d=t.createShader(t.VERTEX_SHADER);t.shaderSource(d,e),t.compileShader(d),""!==t.getShaderInfoLog(d)&&console.warn(`${t.getShaderInfoLog(d)}\nVertex Shader\n${a(e)}`);const m=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(m,s),t.compileShader(m),""!==t.getShaderInfoLog(m)&&console.warn(`${t.getShaderInfoLog(m)}\nFragment Shader\n${a(s)}`),this.program=t.createProgram(),t.attachShader(this.program,d),t.attachShader(this.program,m),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(d),t.deleteShader(m),this.uniformLocations=new Map;let g=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<g;e++){let s=t.getActiveUniform(this.program,e);this.uniformLocations.set(s,t.getUniformLocation(this.program,s.name));const i=s.name.match(/(\w+)/g);s.uniformName=i[0],s.nameComponents=i.slice(1)}this.attributeLocations=new Map;const p=[],f=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<f;e++){const s=t.getActiveAttrib(this.program,e),i=t.getAttribLocation(this.program,s.name);-1!==i&&(p[i]=s.name,this.attributeLocations.set(s,i))}this.attributeOrder=p.join("")}setBlendFunc(t,e,s,i){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=s,this.blendFunc.dstAlpha=i,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,s)=>{let i=this.uniforms[s.uniformName];for(const t of s.nameComponents){if(!i)break;if(!(t in i)){if(Array.isArray(i.value))break;i=void 0;break}i=i[t]}if(!i)return l(`Active uniform ${s.name} has not been supplied`);if(i&&void 0===i.value)return l(`${s.name} uniform is missing a value parameter`);if(i.value.texture)return e+=1,i.value.update(e),h(this.gl,s.type,t,e);if(i.value.length&&i.value[0].texture){const r=[];return i.value.forEach((t=>{e+=1,t.update(e),r.push(e)})),h(this.gl,s.type,t,r)}h(this.gl,s.type,t,i.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function h(t,e,s,i){i=i.length?function(t){const e=t.length,s=t[0].length;if(void 0===s)return t;const i=e*s;let n=r[i];n||(r[i]=n=new Float32Array(i));for(let i=0;i<e;i++)n.set(t[i],i*s);return n}(i):i;const n=t.renderer.state.uniformLocations.get(s);if(i.length)if(void 0===n||n.length!==i.length)t.renderer.state.uniformLocations.set(s,i.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let s=0,i=t.length;s<i;s++)if(t[s]!==e[s])return!1;return!0}(n,i))return;n.set?n.set(i):function(t,e){for(let s=0,i=t.length;s<i;s++)t[s]=e[s]}(n,i),t.renderer.state.uniformLocations.set(s,n)}else{if(n===i)return;t.renderer.state.uniformLocations.set(s,i)}switch(e){case 5126:return i.length?t.uniform1fv(s,i):t.uniform1f(s,i);case 35664:return t.uniform2fv(s,i);case 35665:return t.uniform3fv(s,i);case 35666:return t.uniform4fv(s,i);case 35670:case 5124:case 35678:case 35680:return i.length?t.uniform1iv(s,i):t.uniform1i(s,i);case 35671:case 35667:return t.uniform2iv(s,i);case 35672:case 35668:return t.uniform3iv(s,i);case 35673:case 35669:return t.uniform4iv(s,i);case 35674:return t.uniformMatrix2fv(s,!1,i);case 35675:return t.uniformMatrix3fv(s,!1,i);case 35676:return t.uniformMatrix4fv(s,!1,i)}}function a(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let o=0;function l(t){o>100||(console.warn(t),o++,o>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(t,e,s)=>{s.r(e),s.d(e,{Renderer:()=>n});const i=new(s("./node_modules/ogl/src/math/Vec3.js").Vec3);let r=1;class n{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:s=150,dpr:i=1,alpha:n=!1,depth:h=!0,stencil:a=!1,antialias:o=!1,premultipliedAlpha:l=!1,preserveDrawingBuffer:u=!1,powerPreference:c="default",autoClear:d=!0,webgl:m=2}={}){const g={alpha:n,depth:h,stencil:a,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:u,powerPreference:c};this.dpr=i,this.alpha=n,this.color=!0,this.depth=h,this.stencil=a,this.premultipliedAlpha=l,this.autoClear=d,this.id=r++,2===m&&(this.gl=t.getContext("webgl2",g)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",g)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,s),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,this.gl.canvas.style&&Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,s=0,i=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=s,this.state.viewport.y=i,this.gl.viewport(s,i,t,e))}setScissor(t,e,s=0,i=0){this.gl.scissor(s,i,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,s,i){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===s&&this.state.blendFunc.dstAlpha===i||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=s,this.state.blendFunc.dstAlpha=i,void 0!==s?this.gl.blendFuncSeparate(t,e,s,i):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,s){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][s].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:s,sort:r}){let n=[];if(e&&s&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(s&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||n.push(t))})),r){const t=[],s=[],r=[];n.forEach((n=>{n.program.transparent?n.program.depthTest?s.push(n):r.push(n):t.push(n),n.zDepth=0,0===n.renderOrder&&n.program.depthTest&&e&&(n.worldMatrix.getTranslation(i),i.applyMatrix4(e.projectionViewMatrix),n.zDepth=i.z)})),t.sort(this.sortOpaque),s.sort(this.sortTransparent),r.sort(this.sortUI),n=t.concat(s,r)}return n}render({scene:t,camera:e,target:s=null,update:i=!0,sort:r=!0,frustumCull:n=!0,clear:h}){null===s?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(s),this.setViewport(s.width,s.height)),(h||this.autoClear&&!1!==h)&&(!this.depth||s&&!s.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),i&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:n,sort:r}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Transform.js":(t,e,s)=>{s.r(e),s.d(e,{Transform:()=>a});var i=s("./node_modules/ogl/src/math/Vec3.js"),r=s("./node_modules/ogl/src/math/Quat.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),h=s("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new n.Mat4,this.worldMatrix=new n.Mat4,this.matrixAutoUpdate=!0,this.worldMatrixNeedsUpdate=!1,this.position=new i.Vec3,this.quaternion=new r.Quat,this.scale=new i.Vec3(1),this.rotation=new h.Euler,this.up=new i.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,s=this.children.length;e<s;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,s=this.children.length;e<s;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,s)=>{s.r(e),s.d(e,{Plane:()=>r});var i=s("./node_modules/ogl/src/core/Geometry.js");class r extends i.Geometry{constructor(t,{width:e=1,height:s=1,widthSegments:i=1,heightSegments:n=1,attributes:h={}}={}){const a=i,o=n,l=(a+1)*(o+1),u=a*o*6,c=new Float32Array(3*l),d=new Float32Array(3*l),m=new Float32Array(2*l),g=u>65536?new Uint32Array(u):new Uint16Array(u);r.buildPlane(c,d,m,g,e,s,0,a,o),Object.assign(h,{position:{size:3,data:c},normal:{size:3,data:d},uv:{size:2,data:m},index:{data:g}}),super(t,h)}static buildPlane(t,e,s,i,r,n,h,a,o,l=0,u=1,c=2,d=1,m=-1,g=0,p=0){const f=g,x=r/a,y=n/o;for(let w=0;w<=o;w++){let M=w*y-n/2;for(let n=0;n<=a;n++,g++){let y=n*x-r/2;if(t[3*g+l]=y*d,t[3*g+u]=M*m,t[3*g+c]=h/2,e[3*g+l]=0,e[3*g+u]=0,e[3*g+c]=h>=0?1:-1,s[2*g]=n/a,s[2*g+1]=1-w/o,w===o||n===a)continue;let v=f+n+w*(a+1),b=f+n+(w+1)*(a+1),_=f+n+(w+1)*(a+1)+1,E=f+n+w*(a+1)+1;i[6*p]=v,i[6*p+1]=b,i[6*p+2]=E,i[6*p+3]=b,i[6*p+4]=_,i[6*p+5]=E,p++}}}}},"./node_modules/ogl/src/math/Euler.js":(t,e,s)=>{s.r(e),s.d(e,{Euler:()=>n});var i=s("./node_modules/ogl/src/math/functions/EulerFunc.js");const r=new(s("./node_modules/ogl/src/math/Mat4.js").Mat4);class n extends Array{constructor(t=0,e=t,s=t,i="YXZ"){return super(t,e,s),this.order=i,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,s=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=s,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return i.fromRotationMatrix(this,t,e),this.onChange(),this}fromQuaternion(t,e=this.order){return r.fromQuaternion(t),this.fromRotationMatrix(r,e)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,s)=>{s.r(e),s.d(e,{Mat3:()=>r});var i=s("./node_modules/ogl/src/math/functions/Mat3Func.js");class r extends Array{constructor(t=1,e=0,s=0,i=0,r=1,n=0,h=0,a=0,o=1){return super(t,e,s,i,r,n,h,a,o),this}set(t,e,s,r,n,h,a,o,l){return t.length?this.copy(t):(i.set(this,t,e,s,r,n,h,a,o,l),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e=this){return i.rotate(this,e,t),this}scale(t,e=this){return i.scale(this,e,t),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromMatrix4(t){return i.fromMat4(this,t),this}fromQuaternion(t){return i.fromQuat(this,t),this}fromBasis(t,e,s){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],s[0],s[1],s[2]),this}inverse(t=this){return i.invert(this,t),this}getNormalMatrix(t){return i.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,s)=>{s.r(e),s.d(e,{Mat4:()=>r});var i=s("./node_modules/ogl/src/math/functions/Mat4Func.js");class r extends Array{constructor(t=1,e=0,s=0,i=0,r=0,n=1,h=0,a=0,o=0,l=0,u=1,c=0,d=0,m=0,g=0,p=1){return super(t,e,s,i,r,n,h,a,o,l,u,c,d,m,g,p),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,s,r,n,h,a,o,l,u,c,d,m,g,p,f){return t.length?this.copy(t):(i.set(this,t,e,s,r,n,h,a,o,l,u,c,d,m,g,p,f),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e,s=this){return i.rotate(this,s,t,e),this}scale(t,e=this){return i.scale(this,e,"number"==typeof t?[t,t,t]:t),this}add(t,e){return e?i.add(this,t,e):i.add(this,this,t),this}sub(t,e){return e?i.subtract(this,t,e):i.subtract(this,this,t),this}multiply(t,e){return t.length?e?i.multiply(this,t,e):i.multiply(this,this,t):i.multiplyScalar(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:s,far:r}={}){return i.perspective(this,t,e,s,r),this}fromOrthogonal({left:t,right:e,bottom:s,top:r,near:n,far:h}){return i.ortho(this,t,e,s,r,n,h),this}fromQuaternion(t){return i.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return i.invert(this,t),this}compose(t,e,s){return i.fromRotationTranslationScale(this,t,e,s),this}getRotation(t){return i.getRotation(t,this),this}getTranslation(t){return i.getTranslation(t,this),this}getScaling(t){return i.getScaling(t,this),this}getMaxScaleOnAxis(){return i.getMaxScaleOnAxis(this)}lookAt(t,e,s){return i.targetTo(this,t,e,s),this}determinant(){return i.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,s)=>{s.r(e),s.d(e,{Quat:()=>r});var i=s("./node_modules/ogl/src/math/functions/QuatFunc.js");class r extends Array{constructor(t=0,e=0,s=0,i=1){return super(t,e,s,i),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){return i.identity(this),this.onChange(),this}set(t,e,s,r){return t.length?this.copy(t):(i.set(this,t,e,s,r),this.onChange(),this)}rotateX(t){return i.rotateX(this,this,t),this.onChange(),this}rotateY(t){return i.rotateY(this,this,t),this.onChange(),this}rotateZ(t){return i.rotateZ(this,this,t),this.onChange(),this}inverse(t=this){return i.invert(this,t),this.onChange(),this}conjugate(t=this){return i.conjugate(this,t),this.onChange(),this}copy(t){return i.copy(this,t),this.onChange(),this}normalize(t=this){return i.normalize(this,t),this.onChange(),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this.onChange(),this}dot(t){return i.dot(this,t)}fromMatrix3(t){return i.fromMat3(this,t),this.onChange(),this}fromEuler(t){return i.fromEuler(this,t,t.order),this}fromAxisAngle(t,e){return i.setAxisAngle(this,t,e),this.onChange(),this}slerp(t,e){return i.slerp(this,this,t,e),this.onChange(),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this.onChange(),this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,s)=>{s.r(e),s.d(e,{Vec3:()=>r});var i=s("./node_modules/ogl/src/math/functions/Vec3Func.js");class r extends Array{constructor(t=0,e=t,s=t){return super(t,e,s),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,s=t){return t.length?this.copy(t):(i.set(this,t,e,s),this)}copy(t){return i.copy(this,t),this}add(t,e){return e?i.add(this,t,e):i.add(this,this,t),this}sub(t,e){return e?i.subtract(this,t,e):i.subtract(this,this,t),this}multiply(t){return t.length?i.multiply(this,this,t):i.scale(this,this,t),this}divide(t){return t.length?i.divide(this,this,t):i.scale(this,this,1/t),this}inverse(t=this){return i.inverse(this,t),this}len(){return i.length(this)}distance(t){return t?i.distance(this,t):i.length(this)}squaredLen(){return i.squaredLength(this)}squaredDistance(t){return t?i.squaredDistance(this,t):i.squaredLength(this)}negate(t=this){return i.negate(this,t),this}cross(t,e){return e?i.cross(this,t,e):i.cross(this,this,t),this}scale(t){return i.scale(this,this,t),this}normalize(){return i.normalize(this,this),this}dot(t){return i.dot(this,t)}equals(t){return i.exactEquals(this,t)}applyMatrix3(t){return i.transformMat3(this,this,t),this}applyMatrix4(t){return i.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return i.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return i.transformQuat(this,this,t),this}angle(t){return i.angle(this,t)}lerp(t,e){return i.lerp(this,this,t,e),this}clone(){return new r(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],s=this[1],i=this[2];return this[0]=t[0]*e+t[4]*s+t[8]*i,this[1]=t[1]*e+t[5]*s+t[9]*i,this[2]=t[2]*e+t[6]*s+t[10]*i,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,s)=>{function i(t,e,s="YXZ"){return"XYZ"===s?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===s?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===s?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===s?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===s?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===s&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}s.r(e),s.d(e,{fromRotationMatrix:()=>i})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>x,copy:()=>n,determinant:()=>u,fromMat4:()=>i,fromQuat:()=>r,identity:()=>a,invert:()=>l,multiply:()=>c,multiplyScalar:()=>w,normalFromMat4:()=>p,projection:()=>f,rotate:()=>m,scale:()=>g,set:()=>h,subtract:()=>y,translate:()=>d,transpose:()=>o});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function r(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=s+s,a=i+i,o=r+r,l=s*h,u=i*h,c=i*a,d=r*h,m=r*a,g=r*o,p=n*h,f=n*a,x=n*o;return t[0]=1-c-g,t[3]=u-x,t[6]=d+f,t[1]=u+x,t[4]=1-l-g,t[7]=m-p,t[2]=d-f,t[5]=m+p,t[8]=1-l-c,t}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function h(t,e,s,i,r,n,h,a,o,l){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t[4]=n,t[5]=h,t[6]=a,t[7]=o,t[8]=l,t}function a(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function o(t,e){if(t===e){let s=e[1],i=e[2],r=e[5];t[1]=e[3],t[2]=e[6],t[3]=s,t[5]=e[7],t[6]=i,t[7]=r}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=e[4],a=e[5],o=e[6],l=e[7],u=e[8],c=u*h-a*l,d=-u*n+a*o,m=l*n-h*o,g=s*c+i*d+r*m;return g?(g=1/g,t[0]=c*g,t[1]=(-u*i+r*l)*g,t[2]=(a*i-r*h)*g,t[3]=d*g,t[4]=(u*s-r*o)*g,t[5]=(-a*s+r*n)*g,t[6]=m*g,t[7]=(-l*s+i*o)*g,t[8]=(h*s-i*n)*g,t):null}function u(t){let e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],h=t[5],a=t[6],o=t[7],l=t[8];return e*(l*n-h*o)+s*(-l*r+h*a)+i*(o*r-n*a)}function c(t,e,s){let i=e[0],r=e[1],n=e[2],h=e[3],a=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=s[0],m=s[1],g=s[2],p=s[3],f=s[4],x=s[5],y=s[6],w=s[7],M=s[8];return t[0]=d*i+m*h+g*l,t[1]=d*r+m*a+g*u,t[2]=d*n+m*o+g*c,t[3]=p*i+f*h+x*l,t[4]=p*r+f*a+x*u,t[5]=p*n+f*o+x*c,t[6]=y*i+w*h+M*l,t[7]=y*r+w*a+M*u,t[8]=y*n+w*o+M*c,t}function d(t,e,s){let i=e[0],r=e[1],n=e[2],h=e[3],a=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=s[0],m=s[1];return t[0]=i,t[1]=r,t[2]=n,t[3]=h,t[4]=a,t[5]=o,t[6]=d*i+m*h+l,t[7]=d*r+m*a+u,t[8]=d*n+m*o+c,t}function m(t,e,s){let i=e[0],r=e[1],n=e[2],h=e[3],a=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=Math.sin(s),m=Math.cos(s);return t[0]=m*i+d*h,t[1]=m*r+d*a,t[2]=m*n+d*o,t[3]=m*h-d*i,t[4]=m*a-d*r,t[5]=m*o-d*n,t[6]=l,t[7]=u,t[8]=c,t}function g(t,e,s){let i=s[0],r=s[1];return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=e[4],a=e[5],o=e[6],l=e[7],u=e[8],c=e[9],d=e[10],m=e[11],g=e[12],p=e[13],f=e[14],x=e[15],y=s*a-i*h,w=s*o-r*h,M=s*l-n*h,v=i*o-r*a,b=i*l-n*a,_=r*l-n*o,E=u*p-c*g,A=u*f-d*g,z=u*x-m*g,C=c*f-d*p,T=c*x-m*p,S=d*x-m*f,F=y*S-w*T+M*C+v*z-b*A+_*E;return F?(F=1/F,t[0]=(a*S-o*T+l*C)*F,t[1]=(o*z-h*S-l*A)*F,t[2]=(h*T-a*z+l*E)*F,t[3]=(r*T-i*S-n*C)*F,t[4]=(s*S-r*z+n*A)*F,t[5]=(i*z-s*T-n*E)*F,t[6]=(p*_-f*b+x*v)*F,t[7]=(f*M-g*_-x*w)*F,t[8]=(g*b-p*M+x*y)*F,t):null}function f(t,e,s){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/s,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function x(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t}function y(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t}function w(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>_,copy:()=>r,determinant:()=>l,fromQuat:()=>w,fromRotationTranslationScale:()=>y,getMaxScaleOnAxis:()=>f,getRotation:()=>x,getScaling:()=>p,getTranslation:()=>g,identity:()=>h,invert:()=>o,multiply:()=>u,multiplyScalar:()=>A,ortho:()=>v,perspective:()=>M,rotate:()=>m,scale:()=>d,set:()=>n,subtract:()=>E,targetTo:()=>b,translate:()=>c,transpose:()=>a});const i=1e-6;function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function n(t,e,s,i,r,n,h,a,o,l,u,c,d,m,g,p,f){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t[4]=n,t[5]=h,t[6]=a,t[7]=o,t[8]=l,t[9]=u,t[10]=c,t[11]=d,t[12]=m,t[13]=g,t[14]=p,t[15]=f,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function a(t,e){if(t===e){let s=e[1],i=e[2],r=e[3],n=e[6],h=e[7],a=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=s,t[6]=e[9],t[7]=e[13],t[8]=i,t[9]=n,t[11]=e[14],t[12]=r,t[13]=h,t[14]=a}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function o(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=e[4],a=e[5],o=e[6],l=e[7],u=e[8],c=e[9],d=e[10],m=e[11],g=e[12],p=e[13],f=e[14],x=e[15],y=s*a-i*h,w=s*o-r*h,M=s*l-n*h,v=i*o-r*a,b=i*l-n*a,_=r*l-n*o,E=u*p-c*g,A=u*f-d*g,z=u*x-m*g,C=c*f-d*p,T=c*x-m*p,S=d*x-m*f,F=y*S-w*T+M*C+v*z-b*A+_*E;return F?(F=1/F,t[0]=(a*S-o*T+l*C)*F,t[1]=(r*T-i*S-n*C)*F,t[2]=(p*_-f*b+x*v)*F,t[3]=(d*b-c*_-m*v)*F,t[4]=(o*z-h*S-l*A)*F,t[5]=(s*S-r*z+n*A)*F,t[6]=(f*M-g*_-x*w)*F,t[7]=(u*_-d*M+m*w)*F,t[8]=(h*T-a*z+l*E)*F,t[9]=(i*z-s*T-n*E)*F,t[10]=(g*b-p*M+x*y)*F,t[11]=(c*M-u*b-m*y)*F,t[12]=(a*A-h*C-o*E)*F,t[13]=(s*C-i*A+r*E)*F,t[14]=(p*w-g*v-f*y)*F,t[15]=(u*v-c*w+d*y)*F,t):null}function l(t){let e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],h=t[5],a=t[6],o=t[7],l=t[8],u=t[9],c=t[10],d=t[11],m=t[12],g=t[13],p=t[14],f=t[15];return(e*h-s*n)*(c*f-d*p)-(e*a-i*n)*(u*f-d*g)+(e*o-r*n)*(u*p-c*g)+(s*a-i*h)*(l*f-d*m)-(s*o-r*h)*(l*p-c*m)+(i*o-r*a)*(l*g-u*m)}function u(t,e,s){let i=e[0],r=e[1],n=e[2],h=e[3],a=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=e[9],m=e[10],g=e[11],p=e[12],f=e[13],x=e[14],y=e[15],w=s[0],M=s[1],v=s[2],b=s[3];return t[0]=w*i+M*a+v*c+b*p,t[1]=w*r+M*o+v*d+b*f,t[2]=w*n+M*l+v*m+b*x,t[3]=w*h+M*u+v*g+b*y,w=s[4],M=s[5],v=s[6],b=s[7],t[4]=w*i+M*a+v*c+b*p,t[5]=w*r+M*o+v*d+b*f,t[6]=w*n+M*l+v*m+b*x,t[7]=w*h+M*u+v*g+b*y,w=s[8],M=s[9],v=s[10],b=s[11],t[8]=w*i+M*a+v*c+b*p,t[9]=w*r+M*o+v*d+b*f,t[10]=w*n+M*l+v*m+b*x,t[11]=w*h+M*u+v*g+b*y,w=s[12],M=s[13],v=s[14],b=s[15],t[12]=w*i+M*a+v*c+b*p,t[13]=w*r+M*o+v*d+b*f,t[14]=w*n+M*l+v*m+b*x,t[15]=w*h+M*u+v*g+b*y,t}function c(t,e,s){let i,r,n,h,a,o,l,u,c,d,m,g,p=s[0],f=s[1],x=s[2];return e===t?(t[12]=e[0]*p+e[4]*f+e[8]*x+e[12],t[13]=e[1]*p+e[5]*f+e[9]*x+e[13],t[14]=e[2]*p+e[6]*f+e[10]*x+e[14],t[15]=e[3]*p+e[7]*f+e[11]*x+e[15]):(i=e[0],r=e[1],n=e[2],h=e[3],a=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=e[9],m=e[10],g=e[11],t[0]=i,t[1]=r,t[2]=n,t[3]=h,t[4]=a,t[5]=o,t[6]=l,t[7]=u,t[8]=c,t[9]=d,t[10]=m,t[11]=g,t[12]=i*p+a*f+c*x+e[12],t[13]=r*p+o*f+d*x+e[13],t[14]=n*p+l*f+m*x+e[14],t[15]=h*p+u*f+g*x+e[15]),t}function d(t,e,s){let i=s[0],r=s[1],n=s[2];return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function m(t,e,s,r){let n,h,a,o,l,u,c,d,m,g,p,f,x,y,w,M,v,b,_,E,A,z,C,T,S=r[0],F=r[1],j=r[2],P=Math.hypot(S,F,j);return Math.abs(P)<i?null:(P=1/P,S*=P,F*=P,j*=P,n=Math.sin(s),h=Math.cos(s),a=1-h,o=e[0],l=e[1],u=e[2],c=e[3],d=e[4],m=e[5],g=e[6],p=e[7],f=e[8],x=e[9],y=e[10],w=e[11],M=S*S*a+h,v=F*S*a+j*n,b=j*S*a-F*n,_=S*F*a-j*n,E=F*F*a+h,A=j*F*a+S*n,z=S*j*a+F*n,C=F*j*a-S*n,T=j*j*a+h,t[0]=o*M+d*v+f*b,t[1]=l*M+m*v+x*b,t[2]=u*M+g*v+y*b,t[3]=c*M+p*v+w*b,t[4]=o*_+d*E+f*A,t[5]=l*_+m*E+x*A,t[6]=u*_+g*E+y*A,t[7]=c*_+p*E+w*A,t[8]=o*z+d*C+f*T,t[9]=l*z+m*C+x*T,t[10]=u*z+g*C+y*T,t[11]=c*z+p*C+w*T,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function g(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function p(t,e){let s=e[0],i=e[1],r=e[2],n=e[4],h=e[5],a=e[6],o=e[8],l=e[9],u=e[10];return t[0]=Math.hypot(s,i,r),t[1]=Math.hypot(n,h,a),t[2]=Math.hypot(o,l,u),t}function f(t){let e=t[0],s=t[1],i=t[2],r=t[4],n=t[5],h=t[6],a=t[8],o=t[9],l=t[10];const u=e*e+s*s+i*i,c=r*r+n*n+h*h,d=a*a+o*o+l*l;return Math.sqrt(Math.max(u,c,d))}const x=function(){const t=[1,1,1];return function(e,s){let i=t;p(i,s);let r=1/i[0],n=1/i[1],h=1/i[2],a=s[0]*r,o=s[1]*n,l=s[2]*h,u=s[4]*r,c=s[5]*n,d=s[6]*h,m=s[8]*r,g=s[9]*n,f=s[10]*h,x=a+c+f,y=0;return x>0?(y=2*Math.sqrt(x+1),e[3]=.25*y,e[0]=(d-g)/y,e[1]=(m-l)/y,e[2]=(o-u)/y):a>c&&a>f?(y=2*Math.sqrt(1+a-c-f),e[3]=(d-g)/y,e[0]=.25*y,e[1]=(o+u)/y,e[2]=(m+l)/y):c>f?(y=2*Math.sqrt(1+c-a-f),e[3]=(m-l)/y,e[0]=(o+u)/y,e[1]=.25*y,e[2]=(d+g)/y):(y=2*Math.sqrt(1+f-a-c),e[3]=(o-u)/y,e[0]=(m+l)/y,e[1]=(d+g)/y,e[2]=.25*y),e}}();function y(t,e,s,i){let r=e[0],n=e[1],h=e[2],a=e[3],o=r+r,l=n+n,u=h+h,c=r*o,d=r*l,m=r*u,g=n*l,p=n*u,f=h*u,x=a*o,y=a*l,w=a*u,M=i[0],v=i[1],b=i[2];return t[0]=(1-(g+f))*M,t[1]=(d+w)*M,t[2]=(m-y)*M,t[3]=0,t[4]=(d-w)*v,t[5]=(1-(c+f))*v,t[6]=(p+x)*v,t[7]=0,t[8]=(m+y)*b,t[9]=(p-x)*b,t[10]=(1-(c+g))*b,t[11]=0,t[12]=s[0],t[13]=s[1],t[14]=s[2],t[15]=1,t}function w(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=s+s,a=i+i,o=r+r,l=s*h,u=i*h,c=i*a,d=r*h,m=r*a,g=r*o,p=n*h,f=n*a,x=n*o;return t[0]=1-c-g,t[1]=u+x,t[2]=d-f,t[3]=0,t[4]=u-x,t[5]=1-l-g,t[6]=m+p,t[7]=0,t[8]=d+f,t[9]=m-p,t[10]=1-l-c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function M(t,e,s,i,r){let n=1/Math.tan(e/2),h=1/(i-r);return t[0]=n/s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(r+i)*h,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*r*i*h,t[15]=0,t}function v(t,e,s,i,r,n,h){let a=1/(e-s),o=1/(i-r),l=1/(n-h);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+s)*a,t[13]=(r+i)*o,t[14]=(h+n)*l,t[15]=1,t}function b(t,e,s,i){let r=e[0],n=e[1],h=e[2],a=i[0],o=i[1],l=i[2],u=r-s[0],c=n-s[1],d=h-s[2],m=u*u+c*c+d*d;0===m?d=1:(m=1/Math.sqrt(m),u*=m,c*=m,d*=m);let g=o*d-l*c,p=l*u-a*d,f=a*c-o*u;return m=g*g+p*p+f*f,0===m&&(l?a+=1e-6:o?l+=1e-6:o+=1e-6,g=o*d-l*c,p=l*u-a*d,f=a*c-o*u,m=g*g+p*p+f*f),m=1/Math.sqrt(m),g*=m,p*=m,f*=m,t[0]=g,t[1]=p,t[2]=f,t[3]=0,t[4]=c*f-d*p,t[5]=d*g-u*f,t[6]=u*p-c*g,t[7]=0,t[8]=u,t[9]=c,t[10]=d,t[11]=0,t[12]=r,t[13]=n,t[14]=h,t[15]=1,t}function _(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t[9]=e[9]+s[9],t[10]=e[10]+s[10],t[11]=e[11]+s[11],t[12]=e[12]+s[12],t[13]=e[13]+s[13],t[14]=e[14]+s[14],t[15]=e[15]+s[15],t}function E(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t[9]=e[9]-s[9],t[10]=e[10]-s[10],t[11]=e[11]-s[11],t[12]=e[12]-s[12],t[13]=e[13]-s[13],t[14]=e[14]-s[14],t[15]=e[15]-s[15],t}function A(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12]*s,t[13]=e[13]*s,t[14]=e[14]*s,t[15]=e[15]*s,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>x,conjugate:()=>d,copy:()=>p,dot:()=>w,fromEuler:()=>g,fromMat3:()=>m,identity:()=>r,invert:()=>c,length:()=>v,lerp:()=>M,multiply:()=>h,normalize:()=>b,rotateX:()=>a,rotateY:()=>o,rotateZ:()=>l,scale:()=>y,set:()=>f,setAxisAngle:()=>n,slerp:()=>u});var i=s("./node_modules/ogl/src/math/functions/Vec4Func.js");function r(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function n(t,e,s){s*=.5;let i=Math.sin(s);return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=Math.cos(s),t}function h(t,e,s){let i=e[0],r=e[1],n=e[2],h=e[3],a=s[0],o=s[1],l=s[2],u=s[3];return t[0]=i*u+h*a+r*l-n*o,t[1]=r*u+h*o+n*a-i*l,t[2]=n*u+h*l+i*o-r*a,t[3]=h*u-i*a-r*o-n*l,t}function a(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],h=e[3],a=Math.sin(s),o=Math.cos(s);return t[0]=i*o+h*a,t[1]=r*o+n*a,t[2]=n*o-r*a,t[3]=h*o-i*a,t}function o(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],h=e[3],a=Math.sin(s),o=Math.cos(s);return t[0]=i*o-n*a,t[1]=r*o+h*a,t[2]=n*o+i*a,t[3]=h*o-r*a,t}function l(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],h=e[3],a=Math.sin(s),o=Math.cos(s);return t[0]=i*o+r*a,t[1]=r*o-i*a,t[2]=n*o+h*a,t[3]=h*o-n*a,t}function u(t,e,s,i){let r,n,h,a,o,l=e[0],u=e[1],c=e[2],d=e[3],m=s[0],g=s[1],p=s[2],f=s[3];return n=l*m+u*g+c*p+d*f,n<0&&(n=-n,m=-m,g=-g,p=-p,f=-f),1-n>1e-6?(r=Math.acos(n),h=Math.sin(r),a=Math.sin((1-i)*r)/h,o=Math.sin(i*r)/h):(a=1-i,o=i),t[0]=a*l+o*m,t[1]=a*u+o*g,t[2]=a*c+o*p,t[3]=a*d+o*f,t}function c(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=s*s+i*i+r*r+n*n,a=h?1/h:0;return t[0]=-s*a,t[1]=-i*a,t[2]=-r*a,t[3]=n*a,t}function d(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function m(t,e){let s,i=e[0]+e[4]+e[8];if(i>0)s=Math.sqrt(i+1),t[3]=.5*s,s=.5/s,t[0]=(e[5]-e[7])*s,t[1]=(e[6]-e[2])*s,t[2]=(e[1]-e[3])*s;else{let i=0;e[4]>e[0]&&(i=1),e[8]>e[3*i+i]&&(i=2);let r=(i+1)%3,n=(i+2)%3;s=Math.sqrt(e[3*i+i]-e[3*r+r]-e[3*n+n]+1),t[i]=.5*s,s=.5/s,t[3]=(e[3*r+n]-e[3*n+r])*s,t[r]=(e[3*r+i]+e[3*i+r])*s,t[n]=(e[3*n+i]+e[3*i+n])*s}return t}function g(t,e,s="YXZ"){let i=Math.sin(.5*e[0]),r=Math.cos(.5*e[0]),n=Math.sin(.5*e[1]),h=Math.cos(.5*e[1]),a=Math.sin(.5*e[2]),o=Math.cos(.5*e[2]);return"XYZ"===s?(t[0]=i*h*o+r*n*a,t[1]=r*n*o-i*h*a,t[2]=r*h*a+i*n*o,t[3]=r*h*o-i*n*a):"YXZ"===s?(t[0]=i*h*o+r*n*a,t[1]=r*n*o-i*h*a,t[2]=r*h*a-i*n*o,t[3]=r*h*o+i*n*a):"ZXY"===s?(t[0]=i*h*o-r*n*a,t[1]=r*n*o+i*h*a,t[2]=r*h*a+i*n*o,t[3]=r*h*o-i*n*a):"ZYX"===s?(t[0]=i*h*o-r*n*a,t[1]=r*n*o+i*h*a,t[2]=r*h*a-i*n*o,t[3]=r*h*o+i*n*a):"YZX"===s?(t[0]=i*h*o+r*n*a,t[1]=r*n*o+i*h*a,t[2]=r*h*a-i*n*o,t[3]=r*h*o-i*n*a):"XZY"===s&&(t[0]=i*h*o-r*n*a,t[1]=r*n*o-i*h*a,t[2]=r*h*a+i*n*o,t[3]=r*h*o+i*n*a),t}const p=i.copy,f=i.set,x=i.add,y=i.scale,w=i.dot,M=i.lerp,v=i.length,b=i.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>h,angle:()=>E,copy:()=>r,cross:()=>y,distance:()=>c,divide:()=>l,dot:()=>x,exactEquals:()=>A,inverse:()=>p,length:()=>i,lerp:()=>w,multiply:()=>o,negate:()=>g,normalize:()=>f,scale:()=>u,scaleRotateMat4:()=>v,set:()=>n,squaredDistance:()=>d,squaredLength:()=>m,subtract:()=>a,transformMat3:()=>b,transformMat4:()=>M,transformQuat:()=>_});function i(t){let e=t[0],s=t[1],i=t[2];return Math.sqrt(e*e+s*s+i*i)}function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function n(t,e,s,i){return t[0]=e,t[1]=s,t[2]=i,t}function h(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t}function a(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t}function o(t,e,s){return t[0]=e[0]*s[0],t[1]=e[1]*s[1],t[2]=e[2]*s[2],t}function l(t,e,s){return t[0]=e[0]/s[0],t[1]=e[1]/s[1],t[2]=e[2]/s[2],t}function u(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function c(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return Math.sqrt(s*s+i*i+r*r)}function d(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return s*s+i*i+r*r}function m(t){let e=t[0],s=t[1],i=t[2];return e*e+s*s+i*i}function g(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function p(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function f(t,e){let s=e[0],i=e[1],r=e[2],n=s*s+i*i+r*r;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function x(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function y(t,e,s){let i=e[0],r=e[1],n=e[2],h=s[0],a=s[1],o=s[2];return t[0]=r*o-n*a,t[1]=n*h-i*o,t[2]=i*a-r*h,t}function w(t,e,s,i){let r=e[0],n=e[1],h=e[2];return t[0]=r+i*(s[0]-r),t[1]=n+i*(s[1]-n),t[2]=h+i*(s[2]-h),t}function M(t,e,s){let i=e[0],r=e[1],n=e[2],h=s[3]*i+s[7]*r+s[11]*n+s[15];return h=h||1,t[0]=(s[0]*i+s[4]*r+s[8]*n+s[12])/h,t[1]=(s[1]*i+s[5]*r+s[9]*n+s[13])/h,t[2]=(s[2]*i+s[6]*r+s[10]*n+s[14])/h,t}function v(t,e,s){let i=e[0],r=e[1],n=e[2],h=s[3]*i+s[7]*r+s[11]*n+s[15];return h=h||1,t[0]=(s[0]*i+s[4]*r+s[8]*n)/h,t[1]=(s[1]*i+s[5]*r+s[9]*n)/h,t[2]=(s[2]*i+s[6]*r+s[10]*n)/h,t}function b(t,e,s){let i=e[0],r=e[1],n=e[2];return t[0]=i*s[0]+r*s[3]+n*s[6],t[1]=i*s[1]+r*s[4]+n*s[7],t[2]=i*s[2]+r*s[5]+n*s[8],t}function _(t,e,s){let i=e[0],r=e[1],n=e[2],h=s[0],a=s[1],o=s[2],l=a*n-o*r,u=o*i-h*n,c=h*r-a*i,d=a*c-o*u,m=o*l-h*c,g=h*u-a*l,p=2*s[3];return l*=p,u*=p,c*=p,d*=2,m*=2,g*=2,t[0]=i+l+d,t[1]=r+u+m,t[2]=n+c+g,t}const E=function(){const t=[0,0,0],e=[0,0,0];return function(s,i){r(t,s),r(e,i),f(t,t),f(e,e);let n=x(t,e);return n>1?0:n<-1?Math.PI:Math.acos(n)}}();function A(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>n,copy:()=>i,dot:()=>l,length:()=>a,lerp:()=>u,normalize:()=>o,scale:()=>h,set:()=>r});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function r(t,e,s,i,r){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t}function n(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t}function h(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t}function a(t){let e=t[0],s=t[1],i=t[2],r=t[3];return Math.sqrt(e*e+s*s+i*i+r*r)}function o(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=s*s+i*i+r*r+n*n;return h>0&&(h=1/Math.sqrt(h)),t[0]=s*h,t[1]=i*h,t[2]=r*h,t[3]=n*h,t}function l(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function u(t,e,s,i){let r=e[0],n=e[1],h=e[2],a=e[3];return t[0]=r+i*(s[0]-r),t[1]=n+i*(s[1]-n),t[2]=h+i*(s[2]-h),t[3]=a+i*(s[3]-a),t}}},(function(t){t.h=()=>"eccc03a0eb532d8d83da"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksSUFBTXRNLEVBQUUsSUFBTU0sRUFBRSxJQUNwQmdNLEVBQUksSUFBTXRNLEVBQUUsSUFBTU0sRUFBRSxJQUNwQmdNLEVBQUksSUFBTXRNLEVBQUUsSUFBTU0sRUFBRSxJQUNwQmdNLEVBQUksSUFBTXRNLEVBQUUsSUFBTU0sRUFBRSxJQUNwQmdNLEVBQUksSUFBTXRNLEVBQUUsSUFBTU0sRUFBRSxJQUNwQmdNLEVBQUksSUFBTXRNLEVBQUUsSUFBTU0sRUFBRSxJQUNiZ00sQ0FDWCxDQVVPLFNBQVN1RCxFQUFTdkQsRUFBS3RNLEVBQUdNLEdBaUI3QixPQWhCQWdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksR0FBS3RNLEVBQUUsR0FBS00sRUFBRSxHQUNsQmdNLEVBQUksSUFBTXRNLEVBQUUsSUFBTU0sRUFBRSxJQUNwQmdNLEVBQUksSUFBTXRNLEVBQUUs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RUFBSWdoQixFQUNiYSxFQUFJLEdBQUtqRixFQUFJb0UsRUFDTmEsQ0FDWCxDQVNPLFNBQVM5WCxFQUFJd0wsRUFBR00sR0FDbkIsT0FBT04sRUFBRSxHQUFLTSxFQUFFLEdBQUtOLEVBQUUsR0FBS00sRUFBRSxHQUFLTixFQUFFLEdBQUtNLEVBQUUsR0FBS04sRUFBRSxHQUFLTSxFQUFFLEVBQzlELENBV08sU0FBUy9aLEVBQUsrbEIsRUFBS3RNLEVBQUdNLEVBQUcrSyxHQUM1QixJQUFJeUgsRUFBSzlTLEVBQUUsR0FDUCtTLEVBQUsvUyxFQUFFLEdBQ1BnVCxFQUFLaFQsRUFBRSxHQUNQaVQsRUFBS2pULEVBQUUsR0FLWCxPQUpBc00sRUFBSSxHQUFLd0csRUFBS3pILEdBQUsvSyxFQUFFLEdBQUt3UyxHQUMxQnhHLEVBQUksR0FBS3lHLEVBQUsxSCxHQUFLL0ssRUFBRSxHQUFLeVMsR0FDMUJ6RyxFQUFJLEdBQUswRyxFQUFLM0gsR0FBSy9LLEVBQUUsR0FBSzBTLEdBQzFCMUcsRUFBSSxHQUFLMkcsRUFBSzVILEdBQUsvSyxFQUFFLEdBQUsyUyxHQUNuQjNHLENBQ1gsaUJDdElBdUosRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9BYm91dC9HYWxsZXJ5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9BYm91dC9NZWRpYS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvQWJvdXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0NvbGxlY3Rpb25zL01lZGlhLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9Db2xsZWN0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvSG9tZS9NZWRpYS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvSG9tZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3NoYWRlcnMvY29sbGVjdGlvbnMtZnJhZ21lbnQuZ2xzbCIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvc2hhZGVycy9jb2xsZWN0aW9ucy12ZXJ0ZXguZ2xzbCIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvc2hhZGVycy9ob21lLWZyYWdtZW50Lmdsc2wiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3NoYWRlcnMvaG9tZS12ZXJ0ZXguZ2xzbCIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvc2hhZGVycy9wbGFuZS1mcmFnbWVudC5nbHNsIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9zaGFkZXJzL3BsYW5lLXZlcnRleC5nbHNsIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvQ2FtZXJhLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvR2VvbWV0cnkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9NZXNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvUHJvZ3JhbS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL1JlbmRlcmVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2V4dHJhcy9QbGFuZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL0V1bGVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvTWF0My5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL01hdDQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9RdWF0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvVmVjMy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9FdWxlckZ1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvTWF0M0Z1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvTWF0NEZ1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvUXVhdEZ1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvVmVjM0Z1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvVmVjNEZ1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xyXG5cclxuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnb2dsJ1xyXG5pbXBvcnQgbWFwIGZyb20gJ2xvZGFzaC9tYXAnXHJcblxyXG5pbXBvcnQgTWVkaWEgZnJvbSAnLi9NZWRpYSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbGxlcnkge1xyXG4gIGNvbnN0cnVjdG9yICh7IGVsZW1lbnQsIGdlb21ldHJ5LCBpbmRleCwgZ2wsIHNjZW5lLCBzaXplcyB9KSB7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XHJcbiAgICB0aGlzLmVsZW1lbnRzV3JhcHBlciA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmFib3V0X19nYWxsZXJ5X193cmFwcGVyJylcclxuXHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnlcclxuICAgIHRoaXMuaW5kZXggPSBpbmRleFxyXG4gICAgdGhpcy5nbCA9IGdsXHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmVcclxuICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xyXG5cclxuICAgIHRoaXMuZ3JvdXAgPSBuZXcgVHJhbnNmb3JtKClcclxuXHJcbiAgICB0aGlzLnNjcm9sbCA9IHtcclxuICAgICAgY3VycmVudDogMCxcclxuICAgICAgdGFyZ2V0OiAwLFxyXG4gICAgICBzdGFydDogMCxcclxuICAgICAgbGVycDogMC4xLFxyXG4gICAgICB2ZWxvY2l0eTogMVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY3JlYXRlTWVkaWFzKClcclxuXHJcbiAgICB0aGlzLmdyb3VwLnNldFBhcmVudCh0aGlzLnNjZW5lKVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlTWVkaWFzICgpIHtcclxuICAgIHRoaXMubWVkaWFzRWxlbWVudHMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFib3V0X19nYWxsZXJ5X19tZWRpYScpXHJcblxyXG4gICAgdGhpcy5tZWRpYXMgPSBtYXAodGhpcy5tZWRpYXNFbGVtZW50cywgKGVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgTWVkaWEoe1xyXG4gICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgZ2w6IHRoaXMuZ2wsXHJcbiAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXHJcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBzaG93ICgpIHtcclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhKSA9PiBtZWRpYS5zaG93KCkpXHJcbiAgfVxyXG5cclxuICBoaWRlICgpIHtcclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhKSA9PiBtZWRpYS5oaWRlKCkpXHJcbiAgfVxyXG5cclxuICBvblJlc2l6ZSAoZSkge1xyXG4gICAgdGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnRzV3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG5cclxuICAgIHRoaXMuc2l6ZXMgPSBlLnNpemVzXHJcblxyXG4gICAgdGhpcy53aWR0aCA9ICh0aGlzLmJvdW5kcy53aWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoKSAqIHRoaXMuc2l6ZXMud2lkdGhcclxuXHJcbiAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gdGhpcy5zY3JvbGwudGFyZ2V0ID0gMFxyXG5cclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhKSA9PiBtZWRpYS5vblJlc2l6ZShlLCB0aGlzLnNjcm9sbC5jdXJyZW50KSlcclxuICB9XHJcblxyXG4gIG9uVG91Y2hEb3duICh7IHgsIHkgfSkge1xyXG4gICAgdGhpcy5zY3JvbGwuc3RhcnQgPSB0aGlzLnNjcm9sbC5jdXJyZW50XHJcbiAgfVxyXG5cclxuICBvblRvdWNoTW92ZSAoeyB4LCB5IH0pIHtcclxuICAgIGNvbnN0IGRpc3RhbmNlID0geC5zdGFydCAtIHguZW5kXHJcblxyXG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gdGhpcy5zY3JvbGwuc3RhcnQgLSBkaXN0YW5jZVxyXG4gIH1cclxuXHJcbiAgb25Ub3VjaFVwICh7IHgsIHkgfSkge31cclxuXHJcbiAgdXBkYXRlIChzY3JvbGwpIHtcclxuICAgIGlmICghdGhpcy5ib3VuZHMpIHJldHVyblxyXG4gICAgY29uc3QgZGlzdGFuY2UgPSAoc2Nyb2xsLmN1cnJlbnQgLSBzY3JvbGwudGFyZ2V0KSAqIDAuMVxyXG4gICAgY29uc3QgeSA9IHNjcm9sbC5jdXJyZW50IC8gd2luZG93LmlubmVySGVpZ2h0XHJcbiAgICBpZiAodGhpcy5zY3JvbGwuY3VycmVudCA8IHRoaXMuc2Nyb2xsLnRhcmdldCkge1xyXG4gICAgICB0aGlzLmRpcmVjdGlvbiA9ICdyaWdodCdcclxuICAgICAgdGhpcy5zY3JvbGwudmVsb2NpdHkgPSAtMVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLnNjcm9sbC5jdXJyZW50ID4gdGhpcy5zY3JvbGwudGFyZ2V0KSB7XHJcbiAgICAgIHRoaXMuZGlyZWN0aW9uID0gJ2xlZnQnXHJcbiAgICAgIHRoaXMuc2Nyb2xsLnZlbG9jaXR5ID0gMVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2Nyb2xsLnRhcmdldCAtPSB0aGlzLnNjcm9sbC52ZWxvY2l0eVxyXG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ICs9IGRpc3RhbmNlXHJcblxyXG4gICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IEdTQVAudXRpbHMuaW50ZXJwb2xhdGUodGhpcy5zY3JvbGwuY3VycmVudCwgdGhpcy5zY3JvbGwudGFyZ2V0LCB0aGlzLnNjcm9sbC5sZXJwKVxyXG5cclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhLCBpbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBzY2FsZVggPSAobWVkaWEubWVzaC5zY2FsZS54IC8gMikgKyAwLjI1XHJcbiAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgY29uc3QgeCA9IG1lZGlhLm1lc2gucG9zaXRpb24ueCArIHNjYWxlWFxyXG5cclxuICAgICAgICBpZiAoeCA8IC10aGlzLnNpemVzLndpZHRoIC8gMikge1xyXG4gICAgICAgICAgbWVkaWEuZXh0cmEgKz0gdGhpcy53aWR0aFxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgIGNvbnN0IHggPSBtZWRpYS5tZXNoLnBvc2l0aW9uLnggLSBzY2FsZVhcclxuXHJcbiAgICAgICAgaWYgKHggPiB0aGlzLnNpemVzLndpZHRoIC8gMikge1xyXG4gICAgICAgICAgbWVkaWEuZXh0cmEgLT0gdGhpcy53aWR0aFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvLyBtZWRpYS5tZXNoLnBvc2l0aW9uLnkgPSBNYXRoLmNvcygobWVkaWEubWVzaC5wb3NpdGlvbi54IC8gdGhpcy53aWR0aCkgKiBNYXRoLlBJKSAqIDc1IC03NVxyXG4gICAgICBtZWRpYS51cGRhdGUodGhpcy5zY3JvbGwuY3VycmVudClcclxuICAgIH0pXHJcbiAgICB0aGlzLmdyb3VwLnBvc2l0aW9uLnkgPSB5ICogdGhpcy5zaXplcy5oZWlnaHRcclxuICB9XHJcblxyXG4gIGRlc3Ryb3kgKCkge1xyXG4gICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLmdyb3VwKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBNZXNoLCBQcm9ncmFtIH0gZnJvbSAnb2dsJ1xyXG5pbXBvcnQgdmVydGV4IGZyb20gJ3NoYWRlcnMvcGxhbmUtdmVydGV4Lmdsc2wnXHJcbmltcG9ydCBmcmFnbWVudCBmcm9tICdzaGFkZXJzL3BsYW5lLWZyYWdtZW50Lmdsc2wnXHJcbmltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhIHtcclxuICBjb25zdHJ1Y3RvciAoeyBlbGVtZW50LCBnZW9tZXRyeSwgZ2wsIGluZGV4LCBzY2VuZSwgc2l6ZXMgfSkge1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxyXG4gICAgdGhpcy5nbCA9IGdsXHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnlcclxuICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgdGhpcy5pbmRleCA9IGluZGV4XHJcbiAgICB0aGlzLnNpemVzID0gc2l6ZXNcclxuXHJcbiAgICB0aGlzLmNyZWF0ZVRleHR1cmUoKVxyXG4gICAgdGhpcy5jcmVhdGVQcm9ncmFtKClcclxuICAgIHRoaXMuY3JlYXRlTWVzaCgpXHJcblxyXG4gICAgdGhpcy5leHRyYSA9IHtcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlVGV4dHVyZSAoKSB7XHJcbiAgICBjb25zdCBpbWFnZSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbWcnKVxyXG4gICAgdGhpcy50ZXh0dXJlID0gd2luZG93LlRFWFRVUkVTW2ltYWdlLmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKV1cclxuICB9XHJcblxyXG4gIGNyZWF0ZVByb2dyYW0gKCkge1xyXG4gICAgdGhpcy5wcm9ncmFtID0gbmV3IFByb2dyYW0odGhpcy5nbCwge1xyXG4gICAgICBmcmFnbWVudCxcclxuICAgICAgdmVydGV4LFxyXG4gICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgIHVBbHBoYTogeyB2YWx1ZTogMCB9LFxyXG4gICAgICAgIHRNYXA6IHsgdmFsdWU6IHRoaXMudGV4dHVyZSB9XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBjcmVhdGVNZXNoICgpIHtcclxuICAgIHRoaXMubWVzaCA9IG5ldyBNZXNoKHRoaXMuZ2wsIHtcclxuICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgIHByb2dyYW06IHRoaXMucHJvZ3JhbVxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLm1lc2guc2V0UGFyZW50KHRoaXMuc2NlbmUpXHJcbiAgfVxyXG5cclxuICBjcmVhdGVCb3VuZHMgKHsgc2l6ZXMgfSkge1xyXG4gICAgdGhpcy5zaXplcyA9IHNpemVzXHJcblxyXG4gICAgdGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVNjYWxlKClcclxuICAgIHRoaXMudXBkYXRlWCgpXHJcbiAgICB0aGlzLnVwZGF0ZVkoKVxyXG4gIH1cclxuXHJcbiAgc2hvdyAoKSB7XHJcbiAgICBHU0FQLmZyb21Ubyh0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLCB7XHJcbiAgICAgIHZhbHVlOiAwXHJcbiAgICB9LCB7XHJcbiAgICAgIGRlbGF5OiB0aGlzLmluZGV4ICogMC4xLFxyXG4gICAgICBkdXJhdGlvbjogMSxcclxuICAgICAgdmFsdWU6IDFcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBoaWRlICgpIHtcclxuICAgIEdTQVAudG8odGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYSwge1xyXG4gICAgICB2YWx1ZTogMFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIG9uUmVzaXplIChzaXplcywgc2Nyb2xsKSB7XHJcbiAgICB0aGlzLmV4dHJhID0gMFxyXG5cclxuICAgIHRoaXMuY3JlYXRlQm91bmRzKHNpemVzKVxyXG4gICAgdGhpcy51cGRhdGVYKHNjcm9sbClcclxuICAgIHRoaXMudXBkYXRlWSgwKVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlUm90YXRpb24gKCkge1xyXG4gICAgdGhpcy5tZXNoLnJvdGF0aW9uLnogPSBHU0FQLnV0aWxzLm1hcFJhbmdlKC10aGlzLnNpemVzLndpZHRoIC8gMiwgdGhpcy5zaXplcy53aWR0aCAvIDIsIE1hdGguUEkgKiAwLjEsIC1NYXRoLlBJICogMC4xLCB0aGlzLm1lc2gucG9zaXRpb24ueClcclxuICB9XHJcblxyXG4gIHVwZGF0ZVNjYWxlICgpIHtcclxuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5ib3VuZHMuaGVpZ2h0IC8gd2luZG93LmlubmVySGVpZ2h0XHJcbiAgICB0aGlzLndpZHRoID0gdGhpcy5ib3VuZHMud2lkdGggLyB3aW5kb3cuaW5uZXJXaWR0aFxyXG5cclxuICAgIHRoaXMubWVzaC5zY2FsZS54ID0gdGhpcy5zaXplcy53aWR0aCAqIHRoaXMud2lkdGhcclxuICAgIHRoaXMubWVzaC5zY2FsZS55ID0gdGhpcy5zaXplcy5oZWlnaHQgKiB0aGlzLmhlaWdodFxyXG5cclxuICAgIGNvbnN0IHNjYWxlID0gR1NBUC51dGlscy5tYXBSYW5nZSgwLCB0aGlzLnNpemVzLndpZHRoIC8gMiwgMC4wNSwgMCwgTWF0aC5hYnModGhpcy5tZXNoLnBvc2l0aW9uLngpKVxyXG4gICAgdGhpcy5tZXNoLnNjYWxlLnggKz0gc2NhbGVcclxuICAgIHRoaXMubWVzaC5zY2FsZS55ICs9IHNjYWxlXHJcbiAgfVxyXG5cclxuICB1cGRhdGVYICh4ID0gMCkge1xyXG4gICAgdGhpcy54ID0gKHRoaXMuYm91bmRzLmxlZnQgKyB4KSAvIHdpbmRvdy5pbm5lcldpZHRoXHJcblxyXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSAoLXRoaXMuc2l6ZXMud2lkdGggLyAyKSArICh0aGlzLm1lc2guc2NhbGUueCAvIDIpICsgKHRoaXMueCAqIHRoaXMuc2l6ZXMud2lkdGgpICsgdGhpcy5leHRyYVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlWSAoeSA9IDApIHtcclxuICAgIHRoaXMueSA9ICh0aGlzLmJvdW5kcy50b3AgKyB5KSAvIHdpbmRvdy5pbm5lckhlaWdodFxyXG5cclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ID0gKHRoaXMuc2l6ZXMuaGVpZ2h0IC8gMikgLSAodGhpcy5tZXNoLnNjYWxlLnkgLyAyKSAtICh0aGlzLnkgKiB0aGlzLnNpemVzLmhlaWdodClcclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ICs9IE1hdGguY29zKCh0aGlzLm1lc2gucG9zaXRpb24ueCAvIHRoaXMuc2l6ZXMud2lkdGgpICogTWF0aC5QSSAqIDAuMSkgKiA1OCAtIDU4XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgKHNjcm9sbCkge1xyXG4gICAgaWYgKCF0aGlzLmJvdW5kcykgcmV0dXJuXHJcbiAgICB0aGlzLnVwZGF0ZVJvdGF0aW9uKClcclxuICAgIHRoaXMudXBkYXRlU2NhbGUoKVxyXG4gICAgdGhpcy51cGRhdGVYKHNjcm9sbClcclxuICAgIHRoaXMudXBkYXRlWSgwKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBQbGFuZSwgVHJhbnNmb3JtIH0gZnJvbSAnb2dsJ1xyXG5cclxuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gvbWFwJ1xyXG5cclxuaW1wb3J0IEdhbGxlcnkgZnJvbSAnLi9HYWxsZXJ5J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG4gIGNvbnN0cnVjdG9yICh7IGdsLCBzY2VuZSwgc2l6ZXMgfSkge1xyXG4gICAgdGhpcy5nbCA9IGdsXHJcbiAgICB0aGlzLnNpemVzID0gc2l6ZXNcclxuXHJcbiAgICB0aGlzLmdyb3VwID0gbmV3IFRyYW5zZm9ybSgpXHJcblxyXG4gICAgdGhpcy5jcmVhdGVHZW9tZXRyeSgpXHJcbiAgICB0aGlzLmNyZWF0ZUdhbGxlcmllcygpXHJcblxyXG4gICAgdGhpcy5ncm91cC5zZXRQYXJlbnQoc2NlbmUpXHJcbiAgICB0aGlzLnNob3coKVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlR2VvbWV0cnkgKCkge1xyXG4gICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBQbGFuZSh0aGlzLmdsKVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlR2FsbGVyaWVzICgpIHtcclxuICAgIHRoaXMuZ2FsbGVyaWVzRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYWJvdXRfX2dhbGxlcnknKVxyXG5cclxuICAgIHRoaXMuZ2FsbGVyaWVzID0gbWFwKHRoaXMuZ2FsbGVyaWVzRWxlbWVudHMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IEdhbGxlcnkoe1xyXG4gICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgZ2w6IHRoaXMuZ2wsXHJcbiAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXHJcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBzaG93ICgpIHtcclxuICAgIG1hcCh0aGlzLmdhbGxlcmllcywgKGdhbGxlcnkpID0+IGdhbGxlcnkuc2hvdygpKVxyXG4gIH1cclxuXHJcbiAgaGlkZSAoKSB7XHJcbiAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiBnYWxsZXJ5LmhpZGUoKSlcclxuICB9XHJcblxyXG4gIG9uUmVzaXplIChlKSB7XHJcbiAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiBnYWxsZXJ5Lm9uUmVzaXplKGUpKVxyXG4gIH1cclxuXHJcbiAgb25Ub3VjaERvd24gKGUpIHtcclxuICAgIG1hcCh0aGlzLmdhbGxlcmllcywgKGdhbGxlcnkpID0+IGdhbGxlcnkub25Ub3VjaERvd24oZSkpXHJcbiAgfVxyXG5cclxuICBvblRvdWNoTW92ZSAoZSkge1xyXG4gICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCAoZ2FsbGVyeSkgPT4gZ2FsbGVyeS5vblRvdWNoTW92ZShlKSlcclxuICB9XHJcblxyXG4gIG9uVG91Y2hVcCAoZSkge1xyXG4gICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCAoZ2FsbGVyeSkgPT4gZ2FsbGVyeS5vblRvdWNoVXAoZSkpXHJcbiAgfVxyXG5cclxuICBvbldoZWVsICh7IHBpeGVsWCwgcGl4ZWxZIH0pIHt9XHJcblxyXG4gIHVwZGF0ZSAoc2Nyb2xsKSB7XHJcbiAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiBnYWxsZXJ5LnVwZGF0ZShzY3JvbGwpKVxyXG4gIH1cclxuXHJcbiAgZGVzdHJveSAoKSB7XHJcbiAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiBnYWxsZXJ5LmRlc3Ryb3koKSlcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTWVzaCwgUHJvZ3JhbSB9IGZyb20gJ29nbCdcclxuaW1wb3J0IHZlcnRleCBmcm9tICdzaGFkZXJzL2NvbGxlY3Rpb25zLXZlcnRleC5nbHNsJ1xyXG5pbXBvcnQgZnJhZ21lbnQgZnJvbSAnc2hhZGVycy9jb2xsZWN0aW9ucy1mcmFnbWVudC5nbHNsJ1xyXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcbiAgY29uc3RydWN0b3IgKHsgZWxlbWVudCwgaW5kZXgsIGdsLCBnZW9tZXRyeSwgc2NlbmUsIHNpemVzIH0pIHtcclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcclxuICAgIHRoaXMuaW5kZXggPSBpbmRleFxyXG4gICAgdGhpcy5nbCA9IGdsXHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnlcclxuICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgdGhpcy5zaXplcyA9IHNpemVzXHJcbiAgICB0aGlzLmNyZWF0ZVRleHR1cmUoKVxyXG4gICAgdGhpcy5jcmVhdGVQcm9ncmFtKClcclxuICAgIHRoaXMuY3JlYXRlTWVzaCgpXHJcbiAgICB0aGlzLmV4dHJhID0ge1xyXG4gICAgICB4OiAwLFxyXG4gICAgICB5OiAwXHJcbiAgICB9XHJcbiAgICB0aGlzLm9wYWNpdHkgPSB7XHJcbiAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgIHRhcmdldDogMCxcclxuICAgICAgbGVycDogMC4xLFxyXG4gICAgICBtdWx0aXBsaWVyOiAwXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjcmVhdGVUZXh0dXJlICgpIHtcclxuICAgIGNvbnN0IGltYWdlID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb2xsZWN0aW9uc19fZ2FsbGVyeV9fbWVkaWFfX2ltYWdlJylcclxuICAgIHRoaXMudGV4dHVyZSA9IHdpbmRvdy5URVhUVVJFU1tpbWFnZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJyldXHJcbiAgfVxyXG5cclxuICBjcmVhdGVQcm9ncmFtICgpIHtcclxuICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcclxuICAgICAgZnJhZ21lbnQsXHJcbiAgICAgIHZlcnRleCxcclxuICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICB1QWxwaGE6IHsgdmFsdWU6IDAgfSxcclxuICAgICAgICB0TWFwOiB7IHZhbHVlOiB0aGlzLnRleHR1cmUgfVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlTWVzaCAoKSB7XHJcbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XHJcbiAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxyXG4gICAgICBwcm9ncmFtOiB0aGlzLnByb2dyYW1cclxuICAgIH0pXHJcbiAgICB0aGlzLm1lc2guc2V0UGFyZW50KHRoaXMuc2NlbmUpXHJcbiAgfVxyXG5cclxuICBjcmVhdGVCb3VuZHMgKHsgc2l6ZXMgfSkge1xyXG4gICAgdGhpcy5zaXplcyA9IHNpemVzXHJcbiAgICB0aGlzLmJvdW5kcyA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgdGhpcy51cGRhdGVTY2FsZSgpXHJcbiAgICB0aGlzLnVwZGF0ZVgoKVxyXG4gICAgdGhpcy51cGRhdGVZKClcclxuICB9XHJcblxyXG4gIHNob3cgKCkge1xyXG4gICAgR1NBUC5mcm9tVG8odGhpcy5vcGFjaXR5LCB7XHJcbiAgICAgIG11bHRpcGxpZXI6IDBcclxuICAgIH0sIHtcclxuICAgICAgZGVsYXk6IHRoaXMuaW5kZXggKiAwLjEsXHJcbiAgICAgIGR1cmF0aW9uOiAxLFxyXG4gICAgICBtdWx0aXBsaWVyOiAxXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgaGlkZSAoKSB7XHJcbiAgICBHU0FQLnRvKHRoaXMub3BhY2l0eSwge1xyXG4gICAgICBtdWx0aXBsaWVyOiAwXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgb25SZXNpemUgKHNpemVzLCBzY3JvbGwpIHtcclxuICAgIHRoaXMuZXh0cmEgPSB7XHJcbiAgICAgIHg6IDAsXHJcbiAgICAgIHk6IDBcclxuICAgIH1cclxuICAgIHRoaXMuY3JlYXRlQm91bmRzKHNpemVzKVxyXG4gICAgdGhpcy51cGRhdGVYKHNjcm9sbC54KVxyXG4gICAgdGhpcy51cGRhdGVZKHNjcm9sbC55KVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlU2NhbGUgKCkge1xyXG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdW5kcy5oZWlnaHQgLyB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgIHRoaXMud2lkdGggPSB0aGlzLmJvdW5kcy53aWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoXHJcblxyXG4gICAgdGhpcy5tZXNoLnNjYWxlLnggPSB0aGlzLnNpemVzLndpZHRoICogdGhpcy53aWR0aFxyXG4gICAgdGhpcy5tZXNoLnNjYWxlLnkgPSB0aGlzLnNpemVzLmhlaWdodCAqIHRoaXMuaGVpZ2h0XHJcbiAgfVxyXG5cclxuICB1cGRhdGVYICh4ID0gMCkge1xyXG4gICAgdGhpcy54ID0gKHRoaXMuYm91bmRzLmxlZnQgKyB4KSAvIHdpbmRvdy5pbm5lcldpZHRoXHJcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueCA9ICgtdGhpcy5zaXplcy53aWR0aCAvIDIpICsgKHRoaXMubWVzaC5zY2FsZS54IC8gMikgKyAodGhpcy54ICogdGhpcy5zaXplcy53aWR0aCkgKyB0aGlzLmV4dHJhLnhcclxuICB9XHJcblxyXG4gIHVwZGF0ZVkgKHkgPSAwKSB7XHJcbiAgICB0aGlzLnkgPSAodGhpcy5ib3VuZHMudG9wICsgeSkgLyB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ID0gKHRoaXMuc2l6ZXMuaGVpZ2h0IC8gMikgLSAodGhpcy5tZXNoLnNjYWxlLnkgLyAyKSAtICh0aGlzLnkgKiB0aGlzLnNpemVzLmhlaWdodCkgKyB0aGlzLmV4dHJhLnlcclxuICB9XHJcblxyXG4gIHVwZGF0ZSAoc2Nyb2xsLCBpbmRleCkge1xyXG4gICAgaWYgKCF0aGlzLmJvdW5kcykgcmV0dXJuXHJcbiAgICB0aGlzLnVwZGF0ZVgoc2Nyb2xsKVxyXG4gICAgdGhpcy51cGRhdGVZKDApXHJcbiAgICBjb25zdCBhbXBsaXR1ZGUgPSAwLjFcclxuICAgIGNvbnN0IGZyZXF1ZW5jeSA9IDFcclxuICAgIHRoaXMubWVzaC5yb3RhdGlvbi56ID0gLTAuMDIgKiBNYXRoLlBJICogTWF0aC5zaW4odGhpcy5pbmRleCAvIGZyZXF1ZW5jeSlcclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi56ID0gYW1wbGl0dWRlICogTWF0aC5zaW4odGhpcy5pbmRleCAvIGZyZXF1ZW5jeSlcclxuICAgIHRoaXMub3BhY2l0eS50YXJnZXQgPSB0aGlzLmluZGV4ID09PSBpbmRleCA/IDEgOiAwLjRcclxuICAgIHRoaXMub3BhY2l0eS5jdXJyZW50ID0gR1NBUC51dGlscy5pbnRlcnBvbGF0ZSh0aGlzLm9wYWNpdHkuY3VycmVudCwgdGhpcy5vcGFjaXR5LnRhcmdldCwgdGhpcy5vcGFjaXR5LmxlcnApXHJcbiAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLnZhbHVlID0gdGhpcy5vcGFjaXR5LmN1cnJlbnQgKiB0aGlzLm9wYWNpdHkubXVsdGlwbGllclxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgTWVkaWEgZnJvbSAnLi9NZWRpYSdcclxuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gvbWFwJ1xyXG5pbXBvcnQgeyBQbGFuZSwgVHJhbnNmb3JtIH0gZnJvbSAnb2dsJ1xyXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xyXG5pbXBvcnQgUHJlZml4IGZyb20gJ3ByZWZpeCdcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG4gIGNvbnN0cnVjdG9yICh7IGdsLCBzY2VuZSwgc2l6ZXMgfSkge1xyXG4gICAgdGhpcy5nbCA9IGdsXHJcbiAgICB0aGlzLnNpemVzID0gc2l6ZXNcclxuICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgdGhpcy50cmFuc2Zvcm1QcmVmaXggPSBQcmVmaXgoJ3RyYW5zZm9ybScpXHJcbiAgICB0aGlzLmdyb3VwID0gbmV3IFRyYW5zZm9ybSgpXHJcbiAgICB0aGlzLmdhbGxlcnlFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbGxlY3Rpb25zX19nYWxsZXJ5JylcclxuICAgIHRoaXMuZ2FsbGVyeVdyYXBwZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbGxlY3Rpb25zX19nYWxsZXJ5X193cmFwcGVyJylcclxuICAgIHRoaXMuY29sbGVjdGlvbnNFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb2xsZWN0aW9uc19fYXJ0aWNsZScpXHJcbiAgICB0aGlzLnRpdGxlc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29sbGVjdGlvbnNfX3RpdGxlcycpXHJcbiAgICB0aGlzLmNvbGxlY3Rpb25zRWxlbWVudHNBY3RpdmUgPSAnY29sbGVjdGlvbnNfX2FydGljbGUtLWFjdGl2ZSdcclxuICAgIHRoaXMubWVkaWFzRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29sbGVjdGlvbnNfX2dhbGxlcnlfX21lZGlhJylcclxuXHJcbiAgICB0aGlzLnNjcm9sbCA9IHtcclxuICAgICAgY3VycmVudDogMCxcclxuICAgICAgdGFyZ2V0OiAwLFxyXG4gICAgICBzdGFydDogMCxcclxuICAgICAgbGVycDogMC4xLFxyXG4gICAgICB2ZWxvY2l0eTogMVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc3BlZWQgPSB7XHJcbiAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgIHRhcmdldDogMCxcclxuICAgICAgbGVycDogMC4xXHJcbiAgICB9XHJcbiAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KClcclxuICAgIHRoaXMuY3JlYXRlR2FsbGVyeSgpXHJcblxyXG4gICAgdGhpcy5ncm91cC5zZXRQYXJlbnQodGhpcy5zY2VuZSlcclxuICAgIHRoaXMuc2hvdygpXHJcbiAgfVxyXG5cclxuICBjcmVhdGVHZW9tZXRyeSAoKSB7XHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFBsYW5lKHRoaXMuZ2wpXHJcbiAgfVxyXG5cclxuICBjcmVhdGVHYWxsZXJ5ICgpIHtcclxuICAgIHRoaXMubWVkaWFzID0gbWFwKHRoaXMubWVkaWFzRWxlbWVudHMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IE1lZGlhKHtcclxuICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxyXG4gICAgICAgIGluZGV4LFxyXG4gICAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICAgIHNjZW5lOiB0aGlzLmdyb3VwLFxyXG4gICAgICAgIHNpemVzOiB0aGlzLnNpemVzXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgc2hvdyAoKSB7XHJcbiAgICBtYXAodGhpcy5tZWRpYXMsIChtZWRpYSkgPT4gbWVkaWEuc2hvdygpKVxyXG4gIH1cclxuXHJcbiAgaGlkZSAoKSB7XHJcbiAgICBtYXAodGhpcy5tZWRpYXMsIChtZWRpYSkgPT4gbWVkaWEuaGlkZSgpKVxyXG4gIH1cclxuXHJcbiAgb25SZXNpemUgKGV2ZW50KSB7XHJcbiAgICB0aGlzLnNpemVzID0gZXZlbnQuc2l6ZXNcclxuICAgIHRoaXMuYm91bmRzID0gdGhpcy5nYWxsZXJ5V3JhcHBlckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgIHRoaXMuc2Nyb2xsLmxhc3QgPSB0aGlzLnNjcm9sbC50YXJnZXQgPSAwXHJcbiAgICBtYXAodGhpcy5tZWRpYXMsIG1lZGlhID0+IG1lZGlhLm9uUmVzaXplKGV2ZW50LCB0aGlzLnNjcm9sbCkpXHJcbiAgICB0aGlzLnNjcm9sbC5saW1pdCA9IHRoaXMuYm91bmRzLndpZHRoIC0gdGhpcy5tZWRpYXNbMF0uZWxlbWVudC5jbGllbnRXaWR0aFxyXG4gIH1cclxuXHJcbiAgb25Ub3VjaERvd24gKHsgeCwgeSB9KSB7XHJcbiAgICB0aGlzLnNwZWVkLnRhcmdldCA9IDFcclxuICAgIHRoaXMuc2Nyb2xsLmxhc3QgPSB0aGlzLnNjcm9sbC5jdXJyZW50XHJcbiAgfVxyXG5cclxuICBvblRvdWNoTW92ZSAoeyB4LCB5IH0pIHtcclxuICAgIGNvbnN0IGRpc3RhbmNlID0geC5zdGFydCAtIHguZW5kXHJcbiAgICB0aGlzLnNjcm9sbC50YXJnZXQgPSB0aGlzLnNjcm9sbC5sYXN0IC0gZGlzdGFuY2VcclxuICB9XHJcblxyXG4gIG9uVG91Y2hVcCAoeyB4LCB5IH0pIHtcclxuICAgIHRoaXMuc3BlZWQudGFyZ2V0ID0gMFxyXG4gIH1cclxuXHJcbiAgb25XaGVlbCAoeyBwaXhlbFkgfSkge1xyXG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ICs9IHBpeGVsWVxyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2UgKGluZGV4KSB7XHJcbiAgICB0aGlzLmluZGV4ID0gaW5kZXhcclxuICAgIGNvbnN0IHNlbGVjdGVkQ29sbGVjdGlvbiA9IHBhcnNlSW50KHRoaXMubWVkaWFzRWxlbWVudHNbdGhpcy5pbmRleF0uZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpXHJcbiAgICBtYXAodGhpcy5jb2xsZWN0aW9uc0VsZW1lbnRzLCAoZWxlbWVudCwgZWxlbWVudEluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChlbGVtZW50SW5kZXggPT09IHNlbGVjdGVkQ29sbGVjdGlvbikge1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmNvbGxlY3Rpb25zRWxlbWVudHNBY3RpdmUpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY29sbGVjdGlvbnNFbGVtZW50c0FjdGl2ZSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLnRpdGxlc0VsZW1lbnQuc3R5bGVbdGhpcy50cmFuc2Zvcm1QcmVmaXhdID0gYHRyYW5zbGF0ZVkoLSR7MjUgKiBzZWxlY3RlZENvbGxlY3Rpb259JSkgdHJhbnNsYXRlKC01MCUsIC01MCUpIHJvdGF0ZSgtOTBkZWcpYFxyXG4gIH1cclxuXHJcbiAgdXBkYXRlICgpIHtcclxuICAgIGlmICghdGhpcy5ib3VuZHMpIHJldHVyblxyXG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gR1NBUC51dGlscy5jbGFtcCgtdGhpcy5zY3JvbGwubGltaXQsIDAsIHRoaXMuc2Nyb2xsLnRhcmdldClcclxuICAgIHRoaXMuc3BlZWQuY3VycmVudCA9IEdTQVAudXRpbHMuaW50ZXJwb2xhdGUodGhpcy5zcGVlZC5jdXJyZW50LCB0aGlzLnNwZWVkLnRhcmdldCwgdGhpcy5zcGVlZC5sZXJwKVxyXG4gICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IEdTQVAudXRpbHMuaW50ZXJwb2xhdGUodGhpcy5zY3JvbGwuY3VycmVudCwgdGhpcy5zY3JvbGwudGFyZ2V0LCB0aGlzLnNjcm9sbC5sZXJwKVxyXG4gICAgdGhpcy5nYWxsZXJ5RWxlbWVudC5zdHlsZVt0aGlzLnRyYW5zZm9ybVByZWZpeF0gPSBgdHJhbnNsYXRlWCgke3RoaXMuc2Nyb2xsLmN1cnJlbnR9cHgpYFxyXG5cclxuICAgIGlmICh0aGlzLnNjcm9sbC5sYXN0IDwgdGhpcy5zY3JvbGwuY3VycmVudCkge1xyXG4gICAgICB0aGlzLmRpcmVjdGlvbiA9ICdyaWdodCdcclxuICAgIH0gZWxzZSBpZiAodGhpcy5zY3JvbGwubGFzdCA+IHRoaXMuc2Nyb2xsLmN1cnJlbnQpIHtcclxuICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnbGVmdCdcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNjcm9sbC5sYXN0ID0gdGhpcy5zY3JvbGwuY3VycmVudFxyXG5cclxuICAgIGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLmFicygodGhpcy5zY3JvbGwuY3VycmVudCAtICh0aGlzLm1lZGlhc1swXS5ib3VuZHMud2lkdGgpIC8gMikgLyB0aGlzLnNjcm9sbC5saW1pdCkgKiAodGhpcy5tZWRpYXMubGVuZ3RoIC0gMSkpXHJcbiAgICBpZiAodGhpcy5pbmRleCAhPT0gaW5kZXgpIHtcclxuICAgICAgdGhpcy5vbkNoYW5nZShpbmRleClcclxuICAgIH1cclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhLCBpbmRleCkgPT4ge1xyXG4gICAgICBtZWRpYS51cGRhdGUodGhpcy5zY3JvbGwuY3VycmVudCwgdGhpcy5pbmRleClcclxuXHJcbiAgICAgIG1lZGlhLm1lc2gucG9zaXRpb24ueSArPSBNYXRoLmNvcygobWVkaWEubWVzaC5wb3NpdGlvbi54IC8gdGhpcy5zaXplcy53aWR0aCkgKiBNYXRoLlBJICogMC4xKSAqIDQwIC0gNDBcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBkZXN0cm95ICgpIHtcclxuICAgIHRoaXMuc2NlbmUucmVtb3ZlQ2hpbGQodGhpcy5ncm91cClcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTWVzaCwgUHJvZ3JhbSB9IGZyb20gJ29nbCdcclxuaW1wb3J0IHZlcnRleCBmcm9tICdzaGFkZXJzL2hvbWUtdmVydGV4Lmdsc2wnXHJcbmltcG9ydCBmcmFnbWVudCBmcm9tICdzaGFkZXJzL2hvbWUtZnJhZ21lbnQuZ2xzbCdcclxuaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG4gIGNvbnN0cnVjdG9yICh7IGVsZW1lbnQsIGluZGV4LCBnbCwgZ2VvbWV0cnksIHNjZW5lLCBzaXplcyB9KSB7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XHJcbiAgICB0aGlzLmluZGV4ID0gaW5kZXhcclxuICAgIHRoaXMuZ2wgPSBnbFxyXG4gICAgdGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5XHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmVcclxuICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xyXG4gICAgdGhpcy5jcmVhdGVUZXh0dXJlKClcclxuICAgIHRoaXMuY3JlYXRlUHJvZ3JhbSgpXHJcbiAgICB0aGlzLmNyZWF0ZU1lc2goKVxyXG4gICAgdGhpcy5leHRyYSA9IHtcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlVGV4dHVyZSAoKSB7XHJcbiAgICBjb25zdCBpbWFnZSA9IHRoaXMuZWxlbWVudFxyXG4gICAgdGhpcy50ZXh0dXJlID0gd2luZG93LlRFWFRVUkVTW2ltYWdlLmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKV1cclxuICB9XHJcblxyXG4gIGNyZWF0ZVByb2dyYW0gKCkge1xyXG4gICAgdGhpcy5wcm9ncmFtID0gbmV3IFByb2dyYW0odGhpcy5nbCwge1xyXG4gICAgICBmcmFnbWVudCxcclxuICAgICAgdmVydGV4LFxyXG4gICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgIHVTcGVlZDogeyB2YWx1ZTogMCB9LFxyXG4gICAgICAgIHVWaWV3cG9ydFNpemVzOiB7IHZhbHVlOiBbdGhpcy5zaXplcy53aWR0aCwgdGhpcy5zaXplcy5oZWlnaHRdIH0sXHJcbiAgICAgICAgdUFscGhhOiB7IHZhbHVlOiAwIH0sXHJcbiAgICAgICAgdE1hcDogeyB2YWx1ZTogdGhpcy50ZXh0dXJlIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGNyZWF0ZU1lc2ggKCkge1xyXG4gICAgdGhpcy5tZXNoID0gbmV3IE1lc2godGhpcy5nbCwge1xyXG4gICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcclxuICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtXHJcbiAgICB9KVxyXG4gICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKVxyXG4gICAgdGhpcy5tZXNoLnJvdGF0aW9uLnogPSBHU0FQLnV0aWxzLnJhbmRvbSgtTWF0aC5QSSAqIDAuMDMsIE1hdGguUEkgKiAwLjAzKVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlQm91bmRzICh7IHNpemVzIH0pIHtcclxuICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xyXG4gICAgdGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgIHRoaXMudXBkYXRlU2NhbGUoKVxyXG4gICAgdGhpcy51cGRhdGVYKClcclxuICAgIHRoaXMudXBkYXRlWSgpXHJcbiAgfVxyXG5cclxuICBzaG93ICgpIHtcclxuICAgIEdTQVAuZnJvbVRvKHRoaXMucHJvZ3JhbS51bmlmb3Jtcy51QWxwaGEsIHtcclxuICAgICAgdmFsdWU6IDBcclxuICAgIH0sIHtcclxuICAgICAgZGVsYXk6IHRoaXMuaW5kZXggKiAwLjEsXHJcbiAgICAgIGR1cmF0aW9uOiAxLFxyXG4gICAgICB2YWx1ZTogMC40XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgaGlkZSAoKSB7XHJcbiAgICBHU0FQLnRvKHRoaXMucHJvZ3JhbS51bmlmb3Jtcy51QWxwaGEsIHtcclxuICAgICAgdmFsdWU6IDBcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBvblJlc2l6ZSAoc2l6ZXMsIHNjcm9sbCkge1xyXG4gICAgdGhpcy5leHRyYSA9IHtcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMFxyXG4gICAgfVxyXG4gICAgdGhpcy5jcmVhdGVCb3VuZHMoc2l6ZXMpXHJcbiAgICB0aGlzLnVwZGF0ZVgoc2Nyb2xsLngpXHJcbiAgICB0aGlzLnVwZGF0ZVkoc2Nyb2xsLnkpXHJcbiAgfVxyXG5cclxuICB1cGRhdGVTY2FsZSAoKSB7XHJcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm91bmRzLmhlaWdodCAvIHdpbmRvdy5pbm5lckhlaWdodFxyXG4gICAgdGhpcy53aWR0aCA9IHRoaXMuYm91bmRzLndpZHRoIC8gd2luZG93LmlubmVyV2lkdGhcclxuXHJcbiAgICB0aGlzLm1lc2guc2NhbGUueCA9IHRoaXMuc2l6ZXMud2lkdGggKiB0aGlzLndpZHRoXHJcbiAgICB0aGlzLm1lc2guc2NhbGUueSA9IHRoaXMuc2l6ZXMuaGVpZ2h0ICogdGhpcy5oZWlnaHRcclxuICB9XHJcblxyXG4gIHVwZGF0ZVggKHggPSAwKSB7XHJcbiAgICB0aGlzLnggPSAodGhpcy5ib3VuZHMubGVmdCArIHgpIC8gd2luZG93LmlubmVyV2lkdGhcclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi54ID0gKC10aGlzLnNpemVzLndpZHRoIC8gMikgKyAodGhpcy5tZXNoLnNjYWxlLnggLyAyKSArICh0aGlzLnggKiB0aGlzLnNpemVzLndpZHRoKSArIHRoaXMuZXh0cmEueFxyXG4gIH1cclxuXHJcbiAgdXBkYXRlWSAoeSA9IDApIHtcclxuICAgIHRoaXMueSA9ICh0aGlzLmJvdW5kcy50b3AgKyB5KSAvIHdpbmRvdy5pbm5lckhlaWdodFxyXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgPSAodGhpcy5zaXplcy5oZWlnaHQgLyAyKSAtICh0aGlzLm1lc2guc2NhbGUueSAvIDIpIC0gKHRoaXMueSAqIHRoaXMuc2l6ZXMuaGVpZ2h0KSArIHRoaXMuZXh0cmEueVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlIChzY3JvbGwsIHNwZWVkKSB7XHJcbiAgICBpZiAoIXRoaXMuYm91bmRzKSByZXR1cm5cclxuICAgIHRoaXMudXBkYXRlWChzY3JvbGwueClcclxuICAgIHRoaXMudXBkYXRlWShzY3JvbGwueSlcclxuICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy51U3BlZWQudmFsdWUgPSBzcGVlZFxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgTWVkaWEgZnJvbSAnLi9NZWRpYSdcclxuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gvbWFwJ1xyXG5pbXBvcnQgeyBQbGFuZSwgVHJhbnNmb3JtIH0gZnJvbSAnb2dsJ1xyXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcbiAgY29uc3RydWN0b3IgKHsgZ2wsIHNjZW5lLCBzaXplcyB9KSB7XHJcbiAgICB0aGlzLmdyb3VwID0gbmV3IFRyYW5zZm9ybSgpXHJcbiAgICB0aGlzLmdsID0gZ2xcclxuICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xyXG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lXHJcbiAgICB0aGlzLmdhbGxlcnlFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWVfX2dhbGxlcnknKVxyXG4gICAgdGhpcy5tZWRpYXNFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ob21lX19nYWxsZXJ5X19tZWRpYV9faW1hZ2UnKVxyXG4gICAgdGhpcy54ID0ge1xyXG4gICAgICBjdXJyZW50OiAwLFxyXG4gICAgICB0YXJnZXQ6IDAsXHJcbiAgICAgIGxlcnA6IDAuMVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMueSA9IHtcclxuICAgICAgY3VycmVudDogMCxcclxuICAgICAgdGFyZ2V0OiAwLFxyXG4gICAgICBsZXJwOiAwLjFcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNjcm9sbEN1cnJlbnQgPSB7XHJcbiAgICAgIHg6IDAsXHJcbiAgICAgIHk6IDBcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNjcm9sbCA9IHtcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMFxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc3BlZWQgPSB7XHJcbiAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgIHRhcmdldDogMCxcclxuICAgICAgbGVycDogMC4xXHJcbiAgICB9XHJcbiAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KClcclxuICAgIHRoaXMuY3JlYXRlR2FsbGVyeSgpXHJcblxyXG4gICAgdGhpcy5ncm91cC5zZXRQYXJlbnQodGhpcy5zY2VuZSlcclxuICAgIHRoaXMuc2hvdygpXHJcbiAgfVxyXG5cclxuICBjcmVhdGVHZW9tZXRyeSAoKSB7XHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFBsYW5lKHRoaXMuZ2wsIHtcclxuICAgICAgd2lkdGhTZWdtZW50czogMjAsXHJcbiAgICAgIGhlaWdodFNlZ21lbnRzOiAyMFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGNyZWF0ZUdhbGxlcnkgKCkge1xyXG4gICAgdGhpcy5tZWRpYXMgPSBtYXAodGhpcy5tZWRpYXNFbGVtZW50cywgKGVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgTWVkaWEoe1xyXG4gICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgZ2w6IHRoaXMuZ2wsXHJcbiAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXHJcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBzaG93ICgpIHtcclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhKSA9PiBtZWRpYS5zaG93KCkpXHJcbiAgfVxyXG5cclxuICBoaWRlICgpIHtcclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhKSA9PiBtZWRpYS5oaWRlKCkpXHJcbiAgfVxyXG5cclxuICBvblJlc2l6ZSAoZXZlbnQpIHtcclxuICAgIHRoaXMuZ2FsbGVyeUJvdW5kcyA9IHRoaXMuZ2FsbGVyeUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgIHRoaXMuc2l6ZXMgPSBldmVudC5zaXplc1xyXG4gICAgdGhpcy5nYWxsZXJ5U2l6ZXMgPSB7XHJcbiAgICAgIHdpZHRoOiAodGhpcy5nYWxsZXJ5Qm91bmRzLndpZHRoIC8gd2luZG93LmlubmVyV2lkdGgpICogdGhpcy5zaXplcy53aWR0aCxcclxuICAgICAgaGVpZ2h0OiAodGhpcy5nYWxsZXJ5Qm91bmRzLmhlaWdodCAvIHdpbmRvdy5pbm5lckhlaWdodCkgKiB0aGlzLnNpemVzLmhlaWdodFxyXG4gICAgfVxyXG4gICAgdGhpcy5zY3JvbGwueCA9IHRoaXMueC50YXJnZXQgPSAwXHJcbiAgICB0aGlzLnNjcm9sbC55ID0gdGhpcy55LnRhcmdldCA9IDBcclxuICAgIG1hcCh0aGlzLm1lZGlhcywgbWVkaWEgPT4gbWVkaWEub25SZXNpemUoZXZlbnQsIHRoaXMuc2Nyb2xsKSlcclxuICB9XHJcblxyXG4gIG9uVG91Y2hEb3duICh7IHgsIHkgfSkge1xyXG4gICAgdGhpcy5zcGVlZC50YXJnZXQgPSAxXHJcbiAgICB0aGlzLnNjcm9sbEN1cnJlbnQueCA9IHRoaXMuc2Nyb2xsLnhcclxuICAgIHRoaXMuc2Nyb2xsQ3VycmVudC55ID0gdGhpcy5zY3JvbGwueVxyXG4gIH1cclxuXHJcbiAgb25Ub3VjaE1vdmUgKHsgeCwgeSB9KSB7XHJcbiAgICBjb25zdCB4RGlzdGFuY2UgPSB4LnN0YXJ0IC0geC5lbmRcclxuICAgIGNvbnN0IHlEaXN0YW5jZSA9IHkuc3RhcnQgLSB5LmVuZFxyXG4gICAgdGhpcy54LnRhcmdldCA9IHRoaXMuc2Nyb2xsQ3VycmVudC54IC0geERpc3RhbmNlXHJcbiAgICB0aGlzLnkudGFyZ2V0ID0gdGhpcy5zY3JvbGxDdXJyZW50LnkgLSB5RGlzdGFuY2VcclxuICB9XHJcblxyXG4gIG9uVG91Y2hVcCAoeyB4LCB5IH0pIHtcclxuICAgIHRoaXMuc3BlZWQudGFyZ2V0ID0gMFxyXG4gIH1cclxuXHJcbiAgb25XaGVlbCAoeyBwaXhlbFgsIHBpeGVsWSB9KSB7XHJcbiAgICB0aGlzLngudGFyZ2V0ICs9IHBpeGVsWFxyXG4gICAgdGhpcy55LnRhcmdldCArPSBwaXhlbFlcclxuICB9XHJcblxyXG4gIHVwZGF0ZSAoKSB7XHJcbiAgICBpZiAoIXRoaXMuZ2FsbGVyeUJvdW5kcykgcmV0dXJuXHJcblxyXG4gICAgdGhpcy5zcGVlZC5jdXJyZW50ID0gR1NBUC51dGlscy5pbnRlcnBvbGF0ZSh0aGlzLnNwZWVkLmN1cnJlbnQsIHRoaXMuc3BlZWQudGFyZ2V0LCB0aGlzLnNwZWVkLmxlcnApXHJcblxyXG4gICAgdGhpcy54LmN1cnJlbnQgPSBHU0FQLnV0aWxzLmludGVycG9sYXRlKHRoaXMueC5jdXJyZW50LCB0aGlzLngudGFyZ2V0LCB0aGlzLngubGVycClcclxuICAgIHRoaXMueS5jdXJyZW50ID0gR1NBUC51dGlscy5pbnRlcnBvbGF0ZSh0aGlzLnkuY3VycmVudCwgdGhpcy55LnRhcmdldCwgdGhpcy55LmxlcnApXHJcblxyXG4gICAgaWYgKHRoaXMuc2Nyb2xsLnggPCB0aGlzLnguY3VycmVudCkge1xyXG4gICAgICB0aGlzLnguZGlyZWN0aW9uID0gJ3JpZ2h0J1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLnNjcm9sbC54ID4gdGhpcy54LmN1cnJlbnQpIHtcclxuICAgICAgdGhpcy54LmRpcmVjdGlvbiA9ICdsZWZ0J1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuc2Nyb2xsLnkgPCB0aGlzLnkuY3VycmVudCkge1xyXG4gICAgICB0aGlzLnkuZGlyZWN0aW9uID0gJ3RvcCdcclxuICAgIH0gZWxzZSBpZiAodGhpcy5zY3JvbGwueSA+IHRoaXMueS5jdXJyZW50KSB7XHJcbiAgICAgIHRoaXMueS5kaXJlY3Rpb24gPSAnYm90dG9tJ1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2Nyb2xsLnggPSB0aGlzLnguY3VycmVudFxyXG4gICAgdGhpcy5zY3JvbGwueSA9IHRoaXMueS5jdXJyZW50XHJcblxyXG4gICAgbWFwKHRoaXMubWVkaWFzLCAobWVkaWEsIGluZGV4KSA9PiB7XHJcbiAgICAgIGNvbnN0IG9mZnNldFggPSB0aGlzLnNpemVzLndpZHRoICogMC42XHJcbiAgICAgIGNvbnN0IHNjYWxlWCA9IG1lZGlhLm1lc2guc2NhbGUueCAvIDJcclxuICAgICAgY29uc3Qgc2NhbGVZID0gbWVkaWEubWVzaC5zY2FsZS55IC8gMlxyXG4gICAgICBjb25zdCBvZmZzZXRZID0gdGhpcy5zaXplcy5oZWlnaHQgKiAwLjZcclxuICAgICAgaWYgKHRoaXMueC5kaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xyXG4gICAgICAgIGNvbnN0IHggPSBtZWRpYS5tZXNoLnBvc2l0aW9uLnggKyBzY2FsZVhcclxuICAgICAgICBpZiAoeCA8IC1vZmZzZXRYKSB7XHJcbiAgICAgICAgICBtZWRpYS5leHRyYS54ICs9IHRoaXMuZ2FsbGVyeVNpemVzLndpZHRoXHJcbiAgICAgICAgICBtZWRpYS5tZXNoLnJvdGF0aW9uLnogPSBHU0FQLnV0aWxzLnJhbmRvbSgtTWF0aC5QSSAqIDAuMDMsIE1hdGguUEkgKiAwLjAzKVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0aGlzLnguZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgY29uc3QgeCA9IG1lZGlhLm1lc2gucG9zaXRpb24ueCAtIHNjYWxlWFxyXG4gICAgICAgIGlmICh4ID4gb2Zmc2V0WCkge1xyXG4gICAgICAgICAgbWVkaWEuZXh0cmEueCAtPSB0aGlzLmdhbGxlcnlTaXplcy53aWR0aFxyXG4gICAgICAgICAgbWVkaWEubWVzaC5yb3RhdGlvbi56ID0gR1NBUC51dGlscy5yYW5kb20oLU1hdGguUEkgKiAwLjAzLCBNYXRoLlBJICogMC4wMylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMueS5kaXJlY3Rpb24gPT09ICd0b3AnKSB7XHJcbiAgICAgICAgY29uc3QgeSA9IG1lZGlhLm1lc2gucG9zaXRpb24ueSArIHNjYWxlWVxyXG4gICAgICAgIGlmICh5IDwgLW9mZnNldFkpIHtcclxuICAgICAgICAgIG1lZGlhLmV4dHJhLnkgKz0gdGhpcy5nYWxsZXJ5U2l6ZXMuaGVpZ2h0XHJcbiAgICAgICAgICBtZWRpYS5tZXNoLnJvdGF0aW9uLnogPSBHU0FQLnV0aWxzLnJhbmRvbSgtTWF0aC5QSSAqIDAuMDMsIE1hdGguUEkgKiAwLjAzKVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0aGlzLnkuZGlyZWN0aW9uID09PSAnYm90dG9tJykge1xyXG4gICAgICAgIGNvbnN0IHkgPSBtZWRpYS5tZXNoLnBvc2l0aW9uLnkgLSBzY2FsZVlcclxuICAgICAgICBpZiAoeSA+IG9mZnNldFkpIHtcclxuICAgICAgICAgIG1lZGlhLmV4dHJhLnkgLT0gdGhpcy5nYWxsZXJ5U2l6ZXMuaGVpZ2h0XHJcbiAgICAgICAgICBtZWRpYS5tZXNoLnJvdGF0aW9uLnogPSBHU0FQLnV0aWxzLnJhbmRvbSgtTWF0aC5QSSAqIDAuMDMsIE1hdGguUEkgKiAwLjAzKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBtZWRpYS51cGRhdGUodGhpcy5zY3JvbGwsIHRoaXMuc3BlZWQuY3VycmVudClcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBkZXN0cm95ICgpIHtcclxuICAgIHRoaXMuc2NlbmUucmVtb3ZlQ2hpbGQodGhpcy5ncm91cClcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTWVzaCwgUHJvZ3JhbSwgUGxhbmUgfSBmcm9tICdvZ2wnXHJcbmltcG9ydCB2ZXJ0ZXggZnJvbSAnc2hhZGVycy9wbGFuZS12ZXJ0ZXguZ2xzbCdcclxuaW1wb3J0IGZyYWdtZW50IGZyb20gJ3NoYWRlcnMvcGxhbmUtZnJhZ21lbnQuZ2xzbCdcclxuaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG4gIGNvbnN0cnVjdG9yICh7IGNvbGxlY3Rpb25zLCBnbCwgc2NlbmUsIHNpemVzLCB1cmwgfSkge1xyXG4gICAgdGhpcy5nbCA9IGdsXHJcbiAgICB0aGlzLmNvbGxlY3Rpb25zID0gY29sbGVjdGlvbnNcclxuICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgdGhpcy5zaXplcyA9IHNpemVzXHJcbiAgICB0aGlzLnVybCA9IHVybFxyXG4gICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBQbGFuZSh0aGlzLmdsKVxyXG4gICAgdGhpcy5jcmVhdGVUZXh0dXJlKClcclxuICAgIHRoaXMuY3JlYXRlUHJvZ3JhbSgpXHJcbiAgICB0aGlzLmNyZWF0ZU1lc2goKVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlVGV4dHVyZSAoKSB7XHJcbiAgICBjb25zdCB7IGluZGV4LCBtZWRpYXMgfSA9IHRoaXMuY29sbGVjdGlvbnNcclxuICAgIHRoaXMubWVkaWEgPSBtZWRpYXNbaW5kZXhdXHJcbiAgfVxyXG5cclxuICBjcmVhdGVQcm9ncmFtICgpIHtcclxuICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcclxuICAgICAgZnJhZ21lbnQsXHJcbiAgICAgIHZlcnRleCxcclxuICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICB1QWxwaGE6IHsgdmFsdWU6IDEgfSxcclxuICAgICAgICB0TWFwOiB7IHZhbHVlOiB0aGlzLm1lZGlhLnRleHR1cmUgfVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlTWVzaCAoKSB7XHJcbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XHJcbiAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxyXG4gICAgICBwcm9ncmFtOiB0aGlzLnByb2dyYW1cclxuICAgIH0pXHJcbiAgICB0aGlzLm1lc2guc2NhbGUueCA9IHRoaXMubWVkaWEubWVzaC5zY2FsZS54XHJcbiAgICB0aGlzLm1lc2guc2NhbGUueSA9IHRoaXMubWVkaWEubWVzaC5zY2FsZS55XHJcbiAgICB0aGlzLm1lc2guc2NhbGUueiA9IHRoaXMubWVkaWEubWVzaC5zY2FsZS56XHJcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueiA9IHRoaXMubWVkaWEubWVzaC5wb3NpdGlvbi56ICsgMC4wMVxyXG4gICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKVxyXG4gIH1cclxuXHJcbiAgdHJhbnNpdGlvbiAoKSB7XHJcblxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDYW1lcmEsIFJlbmRlcmVyLCBUcmFuc2Zvcm0gfSBmcm9tICdvZ2wnXHJcblxyXG5pbXBvcnQgQWJvdXQgZnJvbSAnLi9BYm91dCdcclxuaW1wb3J0IENvbGxlY3Rpb25zIGZyb20gJy4vQ29sbGVjdGlvbnMnXHJcbmltcG9ydCBIb21lIGZyb20gJy4vSG9tZSdcclxuaW1wb3J0IERldGFpbHMgZnJvbSAnLi9EZXRhaWxzJ1xyXG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tICcuL1RyYW5zaXRpb24nXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhcyB7XHJcbiAgY29uc3RydWN0b3IgKHsgdGVtcGxhdGUgfSkge1xyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlXHJcblxyXG4gICAgdGhpcy54ID0ge1xyXG4gICAgICBzdGFydDogMCxcclxuICAgICAgZGlzdGFuY2U6IDAsXHJcbiAgICAgIGVuZDogMFxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMueSA9IHtcclxuICAgICAgc3RhcnQ6IDAsXHJcbiAgICAgIGRpc3RhbmNlOiAwLFxyXG4gICAgICBlbmQ6IDBcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNyZWF0ZVJlbmRlcmVyKClcclxuICAgIHRoaXMuY3JlYXRlQ2FtZXJhKClcclxuICAgIHRoaXMuY3JlYXRlU2NlbmUoKVxyXG5cclxuICAgIHRoaXMub25SZXNpemUoKVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlUmVuZGVyZXIgKCkge1xyXG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcih7XHJcbiAgICAgIGFscGhhOiB0cnVlLFxyXG4gICAgICBhbnRpYWxpYXM6IHRydWVcclxuICAgIH0pXHJcblxyXG4gICAgdGhpcy5nbCA9IHRoaXMucmVuZGVyZXIuZ2xcclxuXHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZ2wuY2FudmFzKVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlQ2FtZXJhICgpIHtcclxuICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYSh0aGlzLmdsKVxyXG5cclxuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogPSA1XHJcbiAgfVxyXG5cclxuICBjcmVhdGVTY2VuZSAoKSB7XHJcbiAgICB0aGlzLnNjZW5lID0gbmV3IFRyYW5zZm9ybSgpXHJcbiAgfVxyXG5cclxuICBjcmVhdGVIb21lICgpIHtcclxuICAgIHRoaXMuaG9tZSA9IG5ldyBIb21lKHtcclxuICAgICAgZ2w6IHRoaXMuZ2wsXHJcbiAgICAgIHNjZW5lOiB0aGlzLnNjZW5lLFxyXG4gICAgICBzaXplczogdGhpcy5zaXplc1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGRlc3Ryb3lIb21lICgpIHtcclxuICAgIGlmICghdGhpcy5ob21lKSByZXR1cm5cclxuXHJcbiAgICB0aGlzLmhvbWUuZGVzdHJveSgpXHJcbiAgICB0aGlzLmhvbWUgPSBudWxsXHJcbiAgfVxyXG5cclxuICBjcmVhdGVBYm91dCAoKSB7XHJcbiAgICB0aGlzLmFib3V0ID0gbmV3IEFib3V0KHtcclxuICAgICAgZ2w6IHRoaXMuZ2wsXHJcbiAgICAgIHNjZW5lOiB0aGlzLnNjZW5lLFxyXG4gICAgICBzaXplczogdGhpcy5zaXplc1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGRlc3Ryb3lBYm91dCAoKSB7XHJcbiAgICBpZiAoIXRoaXMuYWJvdXQpIHJldHVyblxyXG5cclxuICAgIHRoaXMuYWJvdXQuZGVzdHJveSgpXHJcbiAgICB0aGlzLmFib3V0ID0gbnVsbFxyXG4gIH1cclxuXHJcbiAgY3JlYXRlQ29sbGVjdGlvbnMgKCkge1xyXG4gICAgdGhpcy5jb2xsZWN0aW9ucyA9IG5ldyBDb2xsZWN0aW9ucyh7XHJcbiAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICBzY2VuZTogdGhpcy5zY2VuZSxcclxuICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBkZXN0cm95Q29sbGVjdGlvbnMgKCkge1xyXG4gICAgaWYgKCF0aGlzLmNvbGxlY3Rpb25zKSByZXR1cm5cclxuXHJcbiAgICB0aGlzLmNvbGxlY3Rpb25zLmRlc3Ryb3koKVxyXG4gICAgdGhpcy5jb2xsZWN0aW9ucyA9IG51bGxcclxuICB9XHJcblxyXG4gIGNyZWF0ZURldGFpbHMgKCkge1xyXG4gICAgdGhpcy5kZXRhaWxzID0gbmV3IERldGFpbHMoe1xyXG4gICAgICBnbDogdGhpcy5nbCxcclxuICAgICAgc2NlbmU6IHRoaXMuc2NlbmUsXHJcbiAgICAgIHNpemVzOiB0aGlzLnNpemVzXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgZGVzdHJveURldGFpbHMgKCkge1xyXG4gICAgaWYgKCF0aGlzLmRldGFpbHMpIHJldHVyblxyXG5cclxuICAgIHRoaXMuZGV0YWlscy5kZXN0cm95KClcclxuICAgIHRoaXMuZGV0YWlscyA9IG51bGxcclxuICB9XHJcblxyXG4gIG9uUHJlbG9hZGVkICgpIHtcclxuICAgIHRoaXMub25DaGFuZ2VFbmQodGhpcy50ZW1wbGF0ZSlcclxuICB9XHJcblxyXG4gIG9uQ2hhbmdlU3RhcnQgKHRlbXBsYXRlLCB1cmwpIHtcclxuICAgIGlmICh0aGlzLmFib3V0KSB7XHJcbiAgICAgIHRoaXMuYWJvdXQuaGlkZSgpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbnMpIHtcclxuICAgICAgdGhpcy5jb2xsZWN0aW9ucy5oaWRlKClcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmhvbWUpIHtcclxuICAgICAgdGhpcy5ob21lLmhpZGUoKVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaXNGcm9tQ29sbGVjdGlvbnNUb0RldGFpbCA9IHRoaXMudGVtcGxhdGUgPT09ICdjb2xsZWN0aW9ucycgJiYgdXJsLmluZGV4T2YoJ2RldGFpbCcpID4gLTFcclxuICAgIHRoaXMuaXNGcm9tRGV0YWlsVG9Db2xsZWN0aW9ucyA9IHRoaXMudGVtcGxhdGUgPT09ICdkZXRhaWwnICYmIHVybC5pbmRleE9mKCdjb2xsZWN0aW9ucycpID4gLTFcclxuXHJcbiAgICBpZiAodGhpcy5pc0Zyb21Db2xsZWN0aW9uc1RvRGV0YWlsIHx8IHRoaXMuaXNGcm9tRGV0YWlsVG9Db2xsZWN0aW9ucykge1xyXG4gICAgICB0aGlzLnRyYW5zaXRpb24gPSBuZXcgVHJhbnNpdGlvbih7XHJcbiAgICAgICAgY29sbGVjdGlvbnM6IHRoaXMuY29sbGVjdGlvbnMsXHJcbiAgICAgICAgZ2w6IHRoaXMuZ2wsXHJcbiAgICAgICAgc2NlbmU6IHRoaXMuc2NlbmUsXHJcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXHJcbiAgICAgICAgdXJsXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZUVuZCAodGVtcGxhdGUpIHtcclxuICAgIGlmICh0ZW1wbGF0ZSA9PT0gJ2hvbWUnKSB7XHJcbiAgICAgIHRoaXMuY3JlYXRlSG9tZSgpXHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuaG9tZSkge1xyXG4gICAgICB0aGlzLmRlc3Ryb3lIb21lKClcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGVtcGxhdGUgPT09ICdhYm91dCcpIHtcclxuICAgICAgdGhpcy5jcmVhdGVBYm91dCgpXHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuYWJvdXQpIHtcclxuICAgICAgdGhpcy5kZXN0cm95QWJvdXQoKVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0ZW1wbGF0ZSA9PT0gJ2NvbGxlY3Rpb25zJykge1xyXG4gICAgICB0aGlzLmNyZWF0ZUNvbGxlY3Rpb25zKClcclxuICAgIH0gZWxzZSBpZiAodGhpcy5jb2xsZWN0aW9ucykge1xyXG4gICAgICB0aGlzLmRlc3Ryb3lDb2xsZWN0aW9ucygpXHJcbiAgICB9XHJcbiAgICBpZiAodGVtcGxhdGUgPT09ICdkZXRhaWxzJykge1xyXG4gICAgICB0aGlzLmNyZWF0ZURldGFpbHMoKVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLmRldGFpbHMpIHtcclxuICAgICAgdGhpcy5kZXN0cm95RGV0YWlscygpXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlXHJcbiAgfVxyXG5cclxuICBvblJlc2l6ZSAoKSB7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodClcclxuXHJcbiAgICB0aGlzLmNhbWVyYS5wZXJzcGVjdGl2ZSh7XHJcbiAgICAgIGFzcGVjdDogd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgIH0pXHJcblxyXG4gICAgY29uc3QgZm92ID0gdGhpcy5jYW1lcmEuZm92ICogKE1hdGguUEkgLyAxODApXHJcbiAgICBjb25zdCBoZWlnaHQgPSAyICogTWF0aC50YW4oZm92IC8gMikgKiB0aGlzLmNhbWVyYS5wb3NpdGlvbi56XHJcbiAgICBjb25zdCB3aWR0aCA9IGhlaWdodCAqIHRoaXMuY2FtZXJhLmFzcGVjdFxyXG5cclxuICAgIHRoaXMuc2l6ZXMgPSB7XHJcbiAgICAgIGhlaWdodCxcclxuICAgICAgd2lkdGhcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2YWx1ZXMgPSB7XHJcbiAgICAgIHNpemVzOiB0aGlzLnNpemVzXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuYWJvdXQpIHtcclxuICAgICAgdGhpcy5hYm91dC5vblJlc2l6ZSh2YWx1ZXMpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbnMpIHtcclxuICAgICAgdGhpcy5jb2xsZWN0aW9ucy5vblJlc2l6ZSh2YWx1ZXMpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaG9tZSkge1xyXG4gICAgICB0aGlzLmhvbWUub25SZXNpemUodmFsdWVzKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Ub3VjaERvd24gKGUpIHtcclxuICAgIHRoaXMuaXNEb3duID0gdHJ1ZVxyXG5cclxuICAgIHRoaXMueC5zdGFydCA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXS5jbGllbnRYIDogZS5jbGllbnRYXHJcbiAgICB0aGlzLnkuc3RhcnQgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WVxyXG5cclxuICAgIGNvbnN0IHZhbHVlcyA9IHtcclxuICAgICAgeDogdGhpcy54LFxyXG4gICAgICB5OiB0aGlzLnlcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5hYm91dCkge1xyXG4gICAgICB0aGlzLmFib3V0Lm9uVG91Y2hEb3duKHZhbHVlcylcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5jb2xsZWN0aW9ucykge1xyXG4gICAgICB0aGlzLmNvbGxlY3Rpb25zLm9uVG91Y2hEb3duKHZhbHVlcylcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5ob21lKSB7XHJcbiAgICAgIHRoaXMuaG9tZS5vblRvdWNoRG93bih2YWx1ZXMpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblRvdWNoTW92ZSAoZSkge1xyXG4gICAgaWYgKCF0aGlzLmlzRG93bikgcmV0dXJuXHJcblxyXG4gICAgY29uc3QgeCA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXS5jbGllbnRYIDogZS5jbGllbnRYXHJcbiAgICBjb25zdCB5ID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLmNsaWVudFkgOiBlLmNsaWVudFlcclxuXHJcbiAgICB0aGlzLnguZW5kID0geFxyXG4gICAgdGhpcy55LmVuZCA9IHlcclxuXHJcbiAgICBjb25zdCB2YWx1ZXMgPSB7XHJcbiAgICAgIHg6IHRoaXMueCxcclxuICAgICAgeTogdGhpcy55XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuYWJvdXQpIHtcclxuICAgICAgdGhpcy5hYm91dC5vblRvdWNoTW92ZSh2YWx1ZXMpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbnMpIHtcclxuICAgICAgdGhpcy5jb2xsZWN0aW9ucy5vblRvdWNoTW92ZSh2YWx1ZXMpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaG9tZSkge1xyXG4gICAgICB0aGlzLmhvbWUub25Ub3VjaE1vdmUodmFsdWVzKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Ub3VjaFVwIChlKSB7XHJcbiAgICB0aGlzLmlzRG93biA9IGZhbHNlXHJcblxyXG4gICAgY29uc3QgeCA9IGUuY2hhbmdlZFRvdWNoZXMgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFhcclxuICAgIGNvbnN0IHkgPSBlLmNoYW5nZWRUb3VjaGVzID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIDogZS5jbGllbnRZXHJcblxyXG4gICAgdGhpcy54LmVuZCA9IHhcclxuICAgIHRoaXMueS5lbmQgPSB5XHJcblxyXG4gICAgY29uc3QgdmFsdWVzID0ge1xyXG4gICAgICB4OiB0aGlzLngsXHJcbiAgICAgIHk6IHRoaXMueVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmFib3V0KSB7XHJcbiAgICAgIHRoaXMuYWJvdXQub25Ub3VjaFVwKHZhbHVlcylcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5jb2xsZWN0aW9ucykge1xyXG4gICAgICB0aGlzLmNvbGxlY3Rpb25zLm9uVG91Y2hVcCh2YWx1ZXMpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaG9tZSkge1xyXG4gICAgICB0aGlzLmhvbWUub25Ub3VjaFVwKHZhbHVlcylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uV2hlZWwgKGUpIHtcclxuICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XHJcbiAgICAgIHRoaXMuY29sbGVjdGlvbnMub25XaGVlbChlKVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuaG9tZSkge1xyXG4gICAgICB0aGlzLmhvbWUub25XaGVlbChlKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlIChzY3JvbGwpIHtcclxuICAgIGlmICh0aGlzLmFib3V0KSB7XHJcbiAgICAgIHRoaXMuYWJvdXQudXBkYXRlKHNjcm9sbClcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XHJcbiAgICAgIHRoaXMuY29sbGVjdGlvbnMudXBkYXRlKClcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5ob21lKSB7XHJcbiAgICAgIHRoaXMuaG9tZS51cGRhdGUoKVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHtcclxuICAgICAgY2FtZXJhOiB0aGlzLmNhbWVyYSxcclxuICAgICAgc2NlbmU6IHRoaXMuc2NlbmVcclxuICAgIH0pXHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbiNkZWZpbmUgR0xTTElGWSAxXFxuXFxudW5pZm9ybSBmbG9hdCB1QWxwaGE7XFxudW5pZm9ybSBzYW1wbGVyMkQgdE1hcDtcXG5cXG52YXJ5aW5nIHZlYzQgdlBvc2l0aW9uO1xcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgdmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKHRNYXAsIHZVdik7XFxuXFxuICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcbiAgZ2xfRnJhZ0NvbG9yLmEgPSAoMS4wIC0gYWJzKHZQb3NpdGlvbi54ICogMC41KSkgKiB1QWxwaGE7XFxufVwiOyIsImV4cG9ydCBkZWZhdWx0IFwiI2RlZmluZSBHTFNMSUZZIDFcXG5hdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiB1djtcXG5cXG51bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4O1xcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xcblxcbnZhcnlpbmcgdmVjNCB2UG9zaXRpb247XFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICB2VXYgPSB1djtcXG5cXG4gIHZlYzQgbmV3UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xcblxcbiAgdlBvc2l0aW9uID0gbmV3UG9zaXRpb247XFxuXFxuICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBuZXdQb3NpdGlvbjtcXG59XCI7IiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuI2RlZmluZSBHTFNMSUZZIDFcXG5cXG51bmlmb3JtIGZsb2F0IHVBbHBoYTtcXG51bmlmb3JtIHNhbXBsZXIyRCB0TWFwO1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgICB2ZWM0IHRleHR1cmUgPSB0ZXh0dXJlMkQodE1hcCwgdlV2KTtcXG5cXG4gICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTtcXG4gICAgZ2xfRnJhZ0NvbG9yLmEgPSB1QWxwaGE7XFxufVwiOyIsImV4cG9ydCBkZWZhdWx0IFwiI2RlZmluZSBHTFNMSUZZIDFcXG4jZGVmaW5lIFBJIDMuMTQxNTkyNjUzNTg5NzkzMjM4NDYyNjQzMzgzMjc5NVxcblxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcblxcbnVuaWZvcm0gZmxvYXQgdVNwZWVkO1xcbnVuaWZvcm0gdmVjMiB1Vmlld3BvcnRTaXplcztcXG5cXG51bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4O1xcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgICB2VXYgPSB1djtcXG5cXG4gICAgdmVjNCBuZXdQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxuXFxuICAgIG5ld1Bvc2l0aW9uLnogLT0gKHNpbihuZXdQb3NpdGlvbi55IC8gdVZpZXdwb3J0U2l6ZXMueSAqIFBJICsgUEkgLyAyLjApICsgc2luKG5ld1Bvc2l0aW9uLnggLyB1Vmlld3BvcnRTaXplcy54ICogUEkgKyBQSSAvIDIuMCkpICogYWJzKHVTcGVlZCk7XFxuXFxuICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG5ld1Bvc2l0aW9uO1xcbn1cIjsiLCJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4jZGVmaW5lIEdMU0xJRlkgMVxcblxcbnVuaWZvcm0gZmxvYXQgdUFscGhhO1xcbnVuaWZvcm0gc2FtcGxlcjJEIHRNYXA7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZlYzQgdGV4dHVyZSA9IHRleHR1cmUyRCh0TWFwLCB2VXYpO1xcblxcbiAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcbiAgICBnbF9GcmFnQ29sb3IuYSA9IHVBbHBoYTtcXG59XCI7IiwiZXhwb3J0IGRlZmF1bHQgXCIjZGVmaW5lIEdMU0xJRlkgMVxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZVdiA9IHV2O1xcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xcbn1cIjsiLCJpbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tICcuL1RyYW5zZm9ybS5qcyc7XG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vbWF0aC9NYXQ0LmpzJztcbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi9tYXRoL1ZlYzMuanMnO1xuXG5jb25zdCB0ZW1wTWF0NCA9IG5ldyBNYXQ0KCk7XG5jb25zdCB0ZW1wVmVjM2EgPSBuZXcgVmVjMygpO1xuY29uc3QgdGVtcFZlYzNiID0gbmV3IFZlYzMoKTtcblxuZXhwb3J0IGNsYXNzIENhbWVyYSBleHRlbmRzIFRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIHsgbmVhciA9IDAuMSwgZmFyID0gMTAwLCBmb3YgPSA0NSwgYXNwZWN0ID0gMSwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCB6b29tID0gMSB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgbmVhciwgZmFyLCBmb3YsIGFzcGVjdCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCB6b29tIH0pO1xuXG4gICAgICAgIHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMudmlld01hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMucHJvamVjdGlvblZpZXdNYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLndvcmxkUG9zaXRpb24gPSBuZXcgVmVjMygpO1xuXG4gICAgICAgIC8vIFVzZSBvcnRob2dyYXBoaWMgaWYgbGVmdC9yaWdodCBzZXQsIGVsc2UgZGVmYXVsdCB0byBwZXJzcGVjdGl2ZSBjYW1lcmFcbiAgICAgICAgdGhpcy50eXBlID0gbGVmdCB8fCByaWdodCA/ICdvcnRob2dyYXBoaWMnIDogJ3BlcnNwZWN0aXZlJztcblxuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnb3J0aG9ncmFwaGljJykgdGhpcy5vcnRob2dyYXBoaWMoKTtcbiAgICAgICAgZWxzZSB0aGlzLnBlcnNwZWN0aXZlKCk7XG4gICAgfVxuXG4gICAgcGVyc3BlY3RpdmUoeyBuZWFyID0gdGhpcy5uZWFyLCBmYXIgPSB0aGlzLmZhciwgZm92ID0gdGhpcy5mb3YsIGFzcGVjdCA9IHRoaXMuYXNwZWN0IH0gPSB7fSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgbmVhciwgZmFyLCBmb3YsIGFzcGVjdCB9KTtcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uTWF0cml4LmZyb21QZXJzcGVjdGl2ZSh7IGZvdjogZm92ICogKE1hdGguUEkgLyAxODApLCBhc3BlY3QsIG5lYXIsIGZhciB9KTtcbiAgICAgICAgdGhpcy50eXBlID0gJ3BlcnNwZWN0aXZlJztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb3J0aG9ncmFwaGljKHtcbiAgICAgICAgbmVhciA9IHRoaXMubmVhcixcbiAgICAgICAgZmFyID0gdGhpcy5mYXIsXG4gICAgICAgIGxlZnQgPSB0aGlzLmxlZnQgfHwgLTEsXG4gICAgICAgIHJpZ2h0ID0gdGhpcy5yaWdodCB8fCAxLFxuICAgICAgICBib3R0b20gPSB0aGlzLmJvdHRvbSB8fCAtMSxcbiAgICAgICAgdG9wID0gdGhpcy50b3AgfHwgMSxcbiAgICAgICAgem9vbSA9IHRoaXMuem9vbSxcbiAgICB9ID0ge30pIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7IG5lYXIsIGZhciwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCB6b29tIH0pO1xuICAgICAgICBsZWZ0IC89IHpvb207XG4gICAgICAgIHJpZ2h0IC89IHpvb207XG4gICAgICAgIGJvdHRvbSAvPSB6b29tO1xuICAgICAgICB0b3AgLz0gem9vbTtcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uTWF0cml4LmZyb21PcnRob2dvbmFsKHsgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIgfSk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdvcnRob2dyYXBoaWMnO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB1cGRhdGVNYXRyaXhXb3JsZCgpIHtcbiAgICAgICAgc3VwZXIudXBkYXRlTWF0cml4V29ybGQoKTtcbiAgICAgICAgdGhpcy52aWV3TWF0cml4LmludmVyc2UodGhpcy53b3JsZE1hdHJpeCk7XG4gICAgICAgIHRoaXMud29ybGRNYXRyaXguZ2V0VHJhbnNsYXRpb24odGhpcy53b3JsZFBvc2l0aW9uKTtcblxuICAgICAgICAvLyB1c2VkIGZvciBzb3J0aW5nXG4gICAgICAgIHRoaXMucHJvamVjdGlvblZpZXdNYXRyaXgubXVsdGlwbHkodGhpcy5wcm9qZWN0aW9uTWF0cml4LCB0aGlzLnZpZXdNYXRyaXgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBsb29rQXQodGFyZ2V0KSB7XG4gICAgICAgIHN1cGVyLmxvb2tBdCh0YXJnZXQsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBQcm9qZWN0IDNEIGNvb3JkaW5hdGUgdG8gMkQgcG9pbnRcbiAgICBwcm9qZWN0KHYpIHtcbiAgICAgICAgdi5hcHBseU1hdHJpeDQodGhpcy52aWV3TWF0cml4KTtcbiAgICAgICAgdi5hcHBseU1hdHJpeDQodGhpcy5wcm9qZWN0aW9uTWF0cml4KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gVW5wcm9qZWN0IDJEIHBvaW50IHRvIDNEIGNvb3JkaW5hdGVcbiAgICB1bnByb2plY3Qodikge1xuICAgICAgICB2LmFwcGx5TWF0cml4NCh0ZW1wTWF0NC5pbnZlcnNlKHRoaXMucHJvamVjdGlvbk1hdHJpeCkpO1xuICAgICAgICB2LmFwcGx5TWF0cml4NCh0aGlzLndvcmxkTWF0cml4KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdXBkYXRlRnJ1c3R1bSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZydXN0dW0pIHtcbiAgICAgICAgICAgIHRoaXMuZnJ1c3R1bSA9IFtuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG0gPSB0aGlzLnByb2plY3Rpb25WaWV3TWF0cml4O1xuICAgICAgICB0aGlzLmZydXN0dW1bMF0uc2V0KG1bM10gLSBtWzBdLCBtWzddIC0gbVs0XSwgbVsxMV0gLSBtWzhdKS5jb25zdGFudCA9IG1bMTVdIC0gbVsxMl07IC8vIC14XG4gICAgICAgIHRoaXMuZnJ1c3R1bVsxXS5zZXQobVszXSArIG1bMF0sIG1bN10gKyBtWzRdLCBtWzExXSArIG1bOF0pLmNvbnN0YW50ID0gbVsxNV0gKyBtWzEyXTsgLy8gK3hcbiAgICAgICAgdGhpcy5mcnVzdHVtWzJdLnNldChtWzNdICsgbVsxXSwgbVs3XSArIG1bNV0sIG1bMTFdICsgbVs5XSkuY29uc3RhbnQgPSBtWzE1XSArIG1bMTNdOyAvLyAreVxuICAgICAgICB0aGlzLmZydXN0dW1bM10uc2V0KG1bM10gLSBtWzFdLCBtWzddIC0gbVs1XSwgbVsxMV0gLSBtWzldKS5jb25zdGFudCA9IG1bMTVdIC0gbVsxM107IC8vIC15XG4gICAgICAgIHRoaXMuZnJ1c3R1bVs0XS5zZXQobVszXSAtIG1bMl0sIG1bN10gLSBtWzZdLCBtWzExXSAtIG1bMTBdKS5jb25zdGFudCA9IG1bMTVdIC0gbVsxNF07IC8vICt6IChmYXIpXG4gICAgICAgIHRoaXMuZnJ1c3R1bVs1XS5zZXQobVszXSArIG1bMl0sIG1bN10gKyBtWzZdLCBtWzExXSArIG1bMTBdKS5jb25zdGFudCA9IG1bMTVdICsgbVsxNF07IC8vIC16IChuZWFyKVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpbnZMZW4gPSAxLjAgLyB0aGlzLmZydXN0dW1baV0uZGlzdGFuY2UoKTtcbiAgICAgICAgICAgIHRoaXMuZnJ1c3R1bVtpXS5tdWx0aXBseShpbnZMZW4pO1xuICAgICAgICAgICAgdGhpcy5mcnVzdHVtW2ldLmNvbnN0YW50ICo9IGludkxlbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZydXN0dW1JbnRlcnNlY3RzTWVzaChub2RlLCB3b3JsZE1hdHJpeCA9IG5vZGUud29ybGRNYXRyaXgpIHtcbiAgICAgICAgLy8gSWYgbm8gcG9zaXRpb24gYXR0cmlidXRlLCB0cmVhdCBhcyBmcnVzdHVtQ3VsbGVkIGZhbHNlXG4gICAgICAgIGlmICghbm9kZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBpZiAoIW5vZGUuZ2VvbWV0cnkuYm91bmRzIHx8IG5vZGUuZ2VvbWV0cnkuYm91bmRzLnJhZGl1cyA9PT0gSW5maW5pdHkpIG5vZGUuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cbiAgICAgICAgaWYgKCFub2RlLmdlb21ldHJ5LmJvdW5kcykgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY29uc3QgY2VudGVyID0gdGVtcFZlYzNhO1xuICAgICAgICBjZW50ZXIuY29weShub2RlLmdlb21ldHJ5LmJvdW5kcy5jZW50ZXIpO1xuICAgICAgICBjZW50ZXIuYXBwbHlNYXRyaXg0KHdvcmxkTWF0cml4KTtcblxuICAgICAgICBjb25zdCByYWRpdXMgPSBub2RlLmdlb21ldHJ5LmJvdW5kcy5yYWRpdXMgKiB3b3JsZE1hdHJpeC5nZXRNYXhTY2FsZU9uQXhpcygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZydXN0dW1JbnRlcnNlY3RzU3BoZXJlKGNlbnRlciwgcmFkaXVzKTtcbiAgICB9XG5cbiAgICBmcnVzdHVtSW50ZXJzZWN0c1NwaGVyZShjZW50ZXIsIHJhZGl1cykge1xuICAgICAgICBjb25zdCBub3JtYWwgPSB0ZW1wVmVjM2I7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBsYW5lID0gdGhpcy5mcnVzdHVtW2ldO1xuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBub3JtYWwuY29weShwbGFuZSkuZG90KGNlbnRlcikgKyBwbGFuZS5jb25zdGFudDtcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IC1yYWRpdXMpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iLCIvLyBhdHRyaWJ1dGUgcGFyYW1zXG4vLyB7XG4vLyAgICAgZGF0YSAtIHR5cGVkIGFycmF5IGVnIFVJbnQxNkFycmF5IGZvciBpbmRpY2VzLCBGbG9hdDMyQXJyYXlcbi8vICAgICBzaXplIC0gaW50IGRlZmF1bHQgMVxuLy8gICAgIGluc3RhbmNlZCAtIGRlZmF1bHQgbnVsbC4gUGFzcyBkaXZpc29yIGFtb3VudFxuLy8gICAgIHR5cGUgLSBnbCBlbnVtIGRlZmF1bHQgZ2wuVU5TSUdORURfU0hPUlQgZm9yICdpbmRleCcsIGdsLkZMT0FUIGZvciBvdGhlcnNcbi8vICAgICBub3JtYWxpemVkIC0gYm9vbGVhbiBkZWZhdWx0IGZhbHNlXG5cbi8vICAgICBidWZmZXIgLSBnbCBidWZmZXIsIGlmIGJ1ZmZlciBleGlzdHMsIGRvbid0IG5lZWQgdG8gcHJvdmlkZSBkYXRhIC0gYWx0aG91Z2ggbmVlZHMgcG9zaXRpb24gZGF0YSBmb3IgYm91bmRzIGNhbGN1bGF0aW9uXG4vLyAgICAgc3RyaWRlIC0gZGVmYXVsdCAwIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBvZmZzZXQgLSBkZWZhdWx0IDAgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gICAgIGNvdW50IC0gZGVmYXVsdCBudWxsIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBtaW4gLSBhcnJheSAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgbWF4IC0gYXJyYXkgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gfVxuXG4vLyBUT0RPOiBmaXQgaW4gdHJhbnNmb3JtIGZlZWRiYWNrXG5cbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi9tYXRoL1ZlYzMuanMnO1xuXG5jb25zdCB0ZW1wVmVjMyA9IG5ldyBWZWMzKCk7XG5cbmxldCBJRCA9IDE7XG5sZXQgQVRUUl9JRCA9IDE7XG5cbi8vIFRvIHN0b3AgaW5pZmluaXRlIHdhcm5pbmdzXG5sZXQgaXNCb3VuZHNXYXJuZWQgPSBmYWxzZTtcblxuZXhwb3J0IGNsYXNzIEdlb21ldHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgYXR0cmlidXRlcyA9IHt9KSB7XG4gICAgICAgIGlmICghZ2wuY2FudmFzKSBjb25zb2xlLmVycm9yKCdnbCBub3QgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50IHRvIEdlb21ldHJ5Jyk7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgICAgdGhpcy5pZCA9IElEKys7XG5cbiAgICAgICAgLy8gU3RvcmUgb25lIFZBTyBwZXIgcHJvZ3JhbSBhdHRyaWJ1dGUgbG9jYXRpb25zIG9yZGVyXG4gICAgICAgIHRoaXMuVkFPcyA9IHt9O1xuXG4gICAgICAgIHRoaXMuZHJhd1JhbmdlID0geyBzdGFydDogMCwgY291bnQ6IDAgfTtcbiAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudCA9IDA7XG5cbiAgICAgICAgLy8gVW5iaW5kIGN1cnJlbnQgVkFPIHNvIHRoYXQgbmV3IGJ1ZmZlcnMgZG9uJ3QgZ2V0IGFkZGVkIHRvIGFjdGl2ZSBtZXNoXG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYmluZFZlcnRleEFycmF5KG51bGwpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRHZW9tZXRyeSA9IG51bGw7XG5cbiAgICAgICAgLy8gQWxpYXMgZm9yIHN0YXRlIHN0b3JlIHRvIGF2b2lkIHJlZHVuZGFudCBjYWxscyBmb3IgZ2xvYmFsIHN0YXRlXG4gICAgICAgIHRoaXMuZ2xTdGF0ZSA9IHRoaXMuZ2wucmVuZGVyZXIuc3RhdGU7XG5cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBidWZmZXJzXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRBdHRyaWJ1dGUoa2V5LCBhdHRyKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlc1trZXldID0gYXR0cjtcblxuICAgICAgICAvLyBTZXQgb3B0aW9uc1xuICAgICAgICBhdHRyLmlkID0gQVRUUl9JRCsrOyAvLyBUT0RPOiBjdXJyZW50bHkgdW51c2VkLCByZW1vdmU/XG4gICAgICAgIGF0dHIuc2l6ZSA9IGF0dHIuc2l6ZSB8fCAxO1xuICAgICAgICBhdHRyLnR5cGUgPVxuICAgICAgICAgICAgYXR0ci50eXBlIHx8XG4gICAgICAgICAgICAoYXR0ci5kYXRhLmNvbnN0cnVjdG9yID09PSBGbG9hdDMyQXJyYXlcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2wuRkxPQVRcbiAgICAgICAgICAgICAgICA6IGF0dHIuZGF0YS5jb25zdHJ1Y3RvciA9PT0gVWludDE2QXJyYXlcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2wuVU5TSUdORURfU0hPUlRcbiAgICAgICAgICAgICAgICA6IHRoaXMuZ2wuVU5TSUdORURfSU5UKTsgLy8gVWludDMyQXJyYXlcbiAgICAgICAgYXR0ci50YXJnZXQgPSBrZXkgPT09ICdpbmRleCcgPyB0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSIDogdGhpcy5nbC5BUlJBWV9CVUZGRVI7XG4gICAgICAgIGF0dHIubm9ybWFsaXplZCA9IGF0dHIubm9ybWFsaXplZCB8fCBmYWxzZTtcbiAgICAgICAgYXR0ci5zdHJpZGUgPSBhdHRyLnN0cmlkZSB8fCAwO1xuICAgICAgICBhdHRyLm9mZnNldCA9IGF0dHIub2Zmc2V0IHx8IDA7XG4gICAgICAgIGF0dHIuY291bnQgPSBhdHRyLmNvdW50IHx8IChhdHRyLnN0cmlkZSA/IGF0dHIuZGF0YS5ieXRlTGVuZ3RoIC8gYXR0ci5zdHJpZGUgOiBhdHRyLmRhdGEubGVuZ3RoIC8gYXR0ci5zaXplKTtcbiAgICAgICAgYXR0ci5kaXZpc29yID0gYXR0ci5pbnN0YW5jZWQgfHwgMDtcbiAgICAgICAgYXR0ci5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICBhdHRyLnVzYWdlID0gYXR0ci51c2FnZSB8fCB0aGlzLmdsLlNUQVRJQ19EUkFXO1xuXG4gICAgICAgIGlmICghYXR0ci5idWZmZXIpIHtcbiAgICAgICAgICAgIC8vIFB1c2ggZGF0YSB0byBidWZmZXJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGdlb21ldHJ5IGNvdW50cy4gSWYgaW5kZXhlZCwgaWdub3JlIHJlZ3VsYXIgYXR0cmlidXRlc1xuICAgICAgICBpZiAoYXR0ci5kaXZpc29yKSB7XG4gICAgICAgICAgICB0aGlzLmlzSW5zdGFuY2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlZENvdW50ICYmIHRoaXMuaW5zdGFuY2VkQ291bnQgIT09IGF0dHIuY291bnQgKiBhdHRyLmRpdmlzb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2dlb21ldHJ5IGhhcyBtdWx0aXBsZSBpbnN0YW5jZWQgYnVmZmVycyBvZiBkaWZmZXJlbnQgbGVuZ3RoJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmluc3RhbmNlZENvdW50ID0gTWF0aC5taW4odGhpcy5pbnN0YW5jZWRDb3VudCwgYXR0ci5jb3VudCAqIGF0dHIuZGl2aXNvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudCA9IGF0dHIuY291bnQgKiBhdHRyLmRpdmlzb3I7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5kZXgnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGF0dHIuY291bnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQgPSBNYXRoLm1heCh0aGlzLmRyYXdSYW5nZS5jb3VudCwgYXR0ci5jb3VudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVBdHRyaWJ1dGUoYXR0cikge1xuICAgICAgICBjb25zdCBpc05ld0J1ZmZlciA9ICFhdHRyLmJ1ZmZlcjtcbiAgICAgICAgaWYgKGlzTmV3QnVmZmVyKSBhdHRyLmJ1ZmZlciA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIGlmICh0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIgIT09IGF0dHIuYnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIoYXR0ci50YXJnZXQsIGF0dHIuYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuZ2xTdGF0ZS5ib3VuZEJ1ZmZlciA9IGF0dHIuYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ld0J1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKGF0dHIudGFyZ2V0LCBhdHRyLmRhdGEsIGF0dHIudXNhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nbC5idWZmZXJTdWJEYXRhKGF0dHIudGFyZ2V0LCAwLCBhdHRyLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGF0dHIubmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzZXRJbmRleCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZSgnaW5kZXgnLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0RHJhd1JhbmdlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICB0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGNvdW50O1xuICAgIH1cblxuICAgIHNldEluc3RhbmNlZENvdW50KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjcmVhdGVWQU8ocHJvZ3JhbSkge1xuICAgICAgICB0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0gPSB0aGlzLmdsLnJlbmRlcmVyLmNyZWF0ZVZlcnRleEFycmF5KCk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYmluZFZlcnRleEFycmF5KHRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSk7XG4gICAgICAgIHRoaXMuYmluZEF0dHJpYnV0ZXMocHJvZ3JhbSk7XG4gICAgfVxuXG4gICAgYmluZEF0dHJpYnV0ZXMocHJvZ3JhbSkge1xuICAgICAgICAvLyBMaW5rIGFsbCBhdHRyaWJ1dGVzIHRvIHByb2dyYW0gdXNpbmcgZ2wudmVydGV4QXR0cmliUG9pbnRlclxuICAgICAgICBwcm9ncmFtLmF0dHJpYnV0ZUxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbiwgeyBuYW1lLCB0eXBlIH0pID0+IHtcbiAgICAgICAgICAgIC8vIElmIGdlb21ldHJ5IG1pc3NpbmcgYSByZXF1aXJlZCBzaGFkZXIgYXR0cmlidXRlXG4gICAgICAgICAgICBpZiAoIXRoaXMuYXR0cmlidXRlc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgYWN0aXZlIGF0dHJpYnV0ZSAke25hbWV9IG5vdCBiZWluZyBzdXBwbGllZGApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKGF0dHIudGFyZ2V0LCBhdHRyLmJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIgPSBhdHRyLmJ1ZmZlcjtcblxuICAgICAgICAgICAgLy8gRm9yIG1hdHJpeCBhdHRyaWJ1dGVzLCBidWZmZXIgbmVlZHMgdG8gYmUgZGVmaW5lZCBwZXIgY29sdW1uXG4gICAgICAgICAgICBsZXQgbnVtTG9jID0gMTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAzNTY3NCkgbnVtTG9jID0gMjsgLy8gbWF0MlxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDM1Njc1KSBudW1Mb2MgPSAzOyAvLyBtYXQzXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gMzU2NzYpIG51bUxvYyA9IDQ7IC8vIG1hdDRcblxuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IGF0dHIuc2l6ZSAvIG51bUxvYztcbiAgICAgICAgICAgIGNvbnN0IHN0cmlkZSA9IG51bUxvYyA9PT0gMSA/IDAgOiBudW1Mb2MgKiBudW1Mb2MgKiA0O1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbnVtTG9jID09PSAxID8gMCA6IG51bUxvYyAqIDQ7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtTG9jOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIobG9jYXRpb24gKyBpLCBzaXplLCBhdHRyLnR5cGUsIGF0dHIubm9ybWFsaXplZCwgYXR0ci5zdHJpZGUgKyBzdHJpZGUsIGF0dHIub2Zmc2V0ICsgaSAqIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShsb2NhdGlvbiArIGkpO1xuXG4gICAgICAgICAgICAgICAgLy8gRm9yIGluc3RhbmNlZCBhdHRyaWJ1dGVzLCBkaXZpc29yIG5lZWRzIHRvIGJlIHNldC5cbiAgICAgICAgICAgICAgICAvLyBGb3IgZmlyZWZveCwgbmVlZCB0byBzZXQgYmFjayB0byAwIGlmIG5vbi1pbnN0YW5jZWQgZHJhd24gYWZ0ZXIgaW5zdGFuY2VkLiBFbHNlIHdvbid0IHJlbmRlclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIudmVydGV4QXR0cmliRGl2aXNvcihsb2NhdGlvbiArIGksIGF0dHIuZGl2aXNvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEJpbmQgaW5kaWNlcyBpZiBnZW9tZXRyeSBpbmRleGVkXG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmF0dHJpYnV0ZXMuaW5kZXguYnVmZmVyKTtcbiAgICB9XG5cbiAgICBkcmF3KHsgcHJvZ3JhbSwgbW9kZSA9IHRoaXMuZ2wuVFJJQU5HTEVTIH0pIHtcbiAgICAgICAgaWYgKHRoaXMuZ2wucmVuZGVyZXIuY3VycmVudEdlb21ldHJ5ICE9PSBgJHt0aGlzLmlkfV8ke3Byb2dyYW0uYXR0cmlidXRlT3JkZXJ9YCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0pIHRoaXMuY3JlYXRlVkFPKHByb2dyYW0pO1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5iaW5kVmVydGV4QXJyYXkodGhpcy5WQU9zW3Byb2dyYW0uYXR0cmlidXRlT3JkZXJdKTtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuY3VycmVudEdlb21ldHJ5ID0gYCR7dGhpcy5pZH1fJHtwcm9ncmFtLmF0dHJpYnV0ZU9yZGVyfWA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiBhbnkgYXR0cmlidXRlcyBuZWVkIHVwZGF0aW5nXG4gICAgICAgIHByb2dyYW0uYXR0cmlidXRlTG9jYXRpb25zLmZvckVhY2goKGxvY2F0aW9uLCB7IG5hbWUgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuYXR0cmlidXRlc1tuYW1lXTtcbiAgICAgICAgICAgIGlmIChhdHRyLm5lZWRzVXBkYXRlKSB0aGlzLnVwZGF0ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRm9yIGRyYXdFbGVtZW50cywgb2Zmc2V0IG5lZWRzIHRvIGJlIG11bHRpcGxlIG9mIHR5cGUgc2l6ZVxuICAgICAgICBsZXQgaW5kZXhCeXRlc1BlckVsZW1lbnQgPSAyO1xuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmluZGV4Py50eXBlID09PSB0aGlzLmdsLlVOU0lHTkVEX0lOVCkgaW5kZXhCeXRlc1BlckVsZW1lbnQgPSA0O1xuXG4gICAgICAgIGlmICh0aGlzLmlzSW5zdGFuY2VkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5kcmF3RWxlbWVudHNJbnN0YW5jZWQoXG4gICAgICAgICAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmluZGV4Lm9mZnNldCArIHRoaXMuZHJhd1JhbmdlLnN0YXJ0ICogaW5kZXhCeXRlc1BlckVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmRyYXdBcnJheXNJbnN0YW5jZWQobW9kZSwgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQsIHRoaXMuZHJhd1JhbmdlLmNvdW50LCB0aGlzLmluc3RhbmNlZENvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmRyYXdFbGVtZW50cyhcbiAgICAgICAgICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5pbmRleC50eXBlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgub2Zmc2V0ICsgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQgKiBpbmRleEJ5dGVzUGVyRWxlbWVudFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZHJhd0FycmF5cyhtb2RlLCB0aGlzLmRyYXdSYW5nZS5zdGFydCwgdGhpcy5kcmF3UmFuZ2UuY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UG9zaXRpb24oKSB7XG4gICAgICAgIC8vIFVzZSBwb3NpdGlvbiBidWZmZXIsIG9yIG1pbi9tYXggaWYgYXZhaWxhYmxlXG4gICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XG4gICAgICAgIC8vIGlmIChhdHRyLm1pbikgcmV0dXJuIFsuLi5hdHRyLm1pbiwgLi4uYXR0ci5tYXhdO1xuICAgICAgICBpZiAoYXR0ci5kYXRhKSByZXR1cm4gYXR0cjtcbiAgICAgICAgaWYgKGlzQm91bmRzV2FybmVkKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUud2FybignTm8gcG9zaXRpb24gYnVmZmVyIGRhdGEgZm91bmQgdG8gY29tcHV0ZSBib3VuZHMnKTtcbiAgICAgICAgcmV0dXJuIChpc0JvdW5kc1dhcm5lZCA9IHRydWUpO1xuICAgIH1cblxuICAgIGNvbXB1dGVCb3VuZGluZ0JveChhdHRyKSB7XG4gICAgICAgIGlmICghYXR0cikgYXR0ciA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBhdHRyLmRhdGE7XG4gICAgICAgIC8vIERhdGEgbG9hZGVkIHNob3VsZG4ndCBoYWF2ZSBzdHJpZGUsIG9ubHkgYnVmZmVyc1xuICAgICAgICAvLyBjb25zdCBzdHJpZGUgPSBhdHRyLnN0cmlkZSA/IGF0dHIuc3RyaWRlIC8gYXJyYXkuQllURVNfUEVSX0VMRU1FTlQgOiBhdHRyLnNpemU7XG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IGF0dHIuc2l6ZTtcblxuICAgICAgICBpZiAoIXRoaXMuYm91bmRzKSB7XG4gICAgICAgICAgICB0aGlzLmJvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICBtaW46IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgbWF4OiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIGNlbnRlcjogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICBzY2FsZTogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICByYWRpdXM6IEluZmluaXR5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMuYm91bmRzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5ib3VuZHMubWF4O1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmJvdW5kcy5jZW50ZXI7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5ib3VuZHMuc2NhbGU7XG5cbiAgICAgICAgbWluLnNldCgrSW5maW5pdHkpO1xuICAgICAgICBtYXguc2V0KC1JbmZpbml0eSk7XG5cbiAgICAgICAgLy8gVE9ETzogY2hlY2sgc2l6ZSBvZiBwb3NpdGlvbiAoZWcgdHJpYW5nbGUgd2l0aCBWZWMyKVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gYXJyYXlbaV07XG4gICAgICAgICAgICBjb25zdCB5ID0gYXJyYXlbaSArIDFdO1xuICAgICAgICAgICAgY29uc3QgeiA9IGFycmF5W2kgKyAyXTtcblxuICAgICAgICAgICAgbWluLnggPSBNYXRoLm1pbih4LCBtaW4ueCk7XG4gICAgICAgICAgICBtaW4ueSA9IE1hdGgubWluKHksIG1pbi55KTtcbiAgICAgICAgICAgIG1pbi56ID0gTWF0aC5taW4oeiwgbWluLnopO1xuXG4gICAgICAgICAgICBtYXgueCA9IE1hdGgubWF4KHgsIG1heC54KTtcbiAgICAgICAgICAgIG1heC55ID0gTWF0aC5tYXgoeSwgbWF4LnkpO1xuICAgICAgICAgICAgbWF4LnogPSBNYXRoLm1heCh6LCBtYXgueik7XG4gICAgICAgIH1cblxuICAgICAgICBzY2FsZS5zdWIobWF4LCBtaW4pO1xuICAgICAgICBjZW50ZXIuYWRkKG1pbiwgbWF4KS5kaXZpZGUoMik7XG4gICAgfVxuXG4gICAgY29tcHV0ZUJvdW5kaW5nU3BoZXJlKGF0dHIpIHtcbiAgICAgICAgaWYgKCFhdHRyKSBhdHRyID0gdGhpcy5nZXRQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBhcnJheSA9IGF0dHIuZGF0YTtcbiAgICAgICAgLy8gRGF0YSBsb2FkZWQgc2hvdWxkbid0IGhhYXZlIHN0cmlkZSwgb25seSBidWZmZXJzXG4gICAgICAgIC8vIGNvbnN0IHN0cmlkZSA9IGF0dHIuc3RyaWRlID8gYXR0ci5zdHJpZGUgLyBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCA6IGF0dHIuc2l6ZTtcbiAgICAgICAgY29uc3Qgc3RyaWRlID0gYXR0ci5zaXplO1xuXG4gICAgICAgIGlmICghdGhpcy5ib3VuZHMpIHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KGF0dHIpO1xuXG4gICAgICAgIGxldCBtYXhSYWRpdXNTcSA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgICAgICAgIHRlbXBWZWMzLmZyb21BcnJheShhcnJheSwgaSk7XG4gICAgICAgICAgICBtYXhSYWRpdXNTcSA9IE1hdGgubWF4KG1heFJhZGl1c1NxLCB0aGlzLmJvdW5kcy5jZW50ZXIuc3F1YXJlZERpc3RhbmNlKHRlbXBWZWMzKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJvdW5kcy5yYWRpdXMgPSBNYXRoLnNxcnQobWF4UmFkaXVzU3EpO1xuICAgIH1cblxuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuVkFPcykge1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5kZWxldGVWZXJ0ZXhBcnJheSh0aGlzLlZBT3Nba2V5XSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5WQU9zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5hdHRyaWJ1dGVzW2tleV0uYnVmZmVyKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4vVHJhbnNmb3JtLmpzJztcbmltcG9ydCB7IE1hdDMgfSBmcm9tICcuLi9tYXRoL01hdDMuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4uL21hdGgvTWF0NC5qcyc7XG5cbmxldCBJRCA9IDA7XG5cbmV4cG9ydCBjbGFzcyBNZXNoIGV4dGVuZHMgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgeyBnZW9tZXRyeSwgcHJvZ3JhbSwgbW9kZSA9IGdsLlRSSUFOR0xFUywgZnJ1c3R1bUN1bGxlZCA9IHRydWUsIHJlbmRlck9yZGVyID0gMCB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKCFnbC5jYW52YXMpIGNvbnNvbGUuZXJyb3IoJ2dsIG5vdCBwYXNzZWQgYXMgZmlyc3QgYXJndW1lbnQgdG8gTWVzaCcpO1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuICAgICAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG4gICAgICAgIHRoaXMubW9kZSA9IG1vZGU7XG5cbiAgICAgICAgLy8gVXNlZCB0byBza2lwIGZydXN0dW0gY3VsbGluZ1xuICAgICAgICB0aGlzLmZydXN0dW1DdWxsZWQgPSBmcnVzdHVtQ3VsbGVkO1xuXG4gICAgICAgIC8vIE92ZXJyaWRlIHNvcnRpbmcgdG8gZm9yY2UgYW4gb3JkZXJcbiAgICAgICAgdGhpcy5yZW5kZXJPcmRlciA9IHJlbmRlck9yZGVyO1xuICAgICAgICB0aGlzLm1vZGVsVmlld01hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMubm9ybWFsTWF0cml4ID0gbmV3IE1hdDMoKTtcbiAgICAgICAgdGhpcy5iZWZvcmVSZW5kZXJDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgdGhpcy5hZnRlclJlbmRlckNhbGxiYWNrcyA9IFtdO1xuICAgIH1cblxuICAgIG9uQmVmb3JlUmVuZGVyKGYpIHtcbiAgICAgICAgdGhpcy5iZWZvcmVSZW5kZXJDYWxsYmFja3MucHVzaChmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb25BZnRlclJlbmRlcihmKSB7XG4gICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXJDYWxsYmFja3MucHVzaChmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZHJhdyh7IGNhbWVyYSB9ID0ge30pIHtcbiAgICAgICAgaWYgKGNhbWVyYSkge1xuICAgICAgICAgICAgLy8gQWRkIGVtcHR5IG1hdHJpeCB1bmlmb3JtcyB0byBwcm9ncmFtIGlmIHVuc2V0XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvZ3JhbS51bmlmb3Jtcy5tb2RlbE1hdHJpeCkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5wcm9ncmFtLnVuaWZvcm1zLCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsTWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIHZpZXdNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxWaWV3TWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbE1hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uTWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYVBvc2l0aW9uOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgbWF0cml4IHVuaWZvcm1zXG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMucHJvamVjdGlvbk1hdHJpeC52YWx1ZSA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4O1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLmNhbWVyYVBvc2l0aW9uLnZhbHVlID0gY2FtZXJhLndvcmxkUG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMudmlld01hdHJpeC52YWx1ZSA9IGNhbWVyYS52aWV3TWF0cml4O1xuICAgICAgICAgICAgdGhpcy5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHkoY2FtZXJhLnZpZXdNYXRyaXgsIHRoaXMud29ybGRNYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KHRoaXMubW9kZWxWaWV3TWF0cml4KTtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5tb2RlbE1hdHJpeC52YWx1ZSA9IHRoaXMud29ybGRNYXRyaXg7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMubW9kZWxWaWV3TWF0cml4LnZhbHVlID0gdGhpcy5tb2RlbFZpZXdNYXRyaXg7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMubm9ybWFsTWF0cml4LnZhbHVlID0gdGhpcy5ub3JtYWxNYXRyaXg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iZWZvcmVSZW5kZXJDYWxsYmFja3MuZm9yRWFjaCgoZikgPT4gZiAmJiBmKHsgbWVzaDogdGhpcywgY2FtZXJhIH0pKTtcblxuICAgICAgICAvLyBkZXRlcm1pbmUgaWYgZmFjZXMgbmVlZCB0byBiZSBmbGlwcGVkIC0gd2hlbiBtZXNoIHNjYWxlZCBuZWdhdGl2ZWx5XG4gICAgICAgIGxldCBmbGlwRmFjZXMgPSB0aGlzLnByb2dyYW0uY3VsbEZhY2UgJiYgdGhpcy53b3JsZE1hdHJpeC5kZXRlcm1pbmFudCgpIDwgMDtcbiAgICAgICAgdGhpcy5wcm9ncmFtLnVzZSh7IGZsaXBGYWNlcyB9KTtcbiAgICAgICAgdGhpcy5nZW9tZXRyeS5kcmF3KHsgbW9kZTogdGhpcy5tb2RlLCBwcm9ncmFtOiB0aGlzLnByb2dyYW0gfSk7XG4gICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXJDYWxsYmFja3MuZm9yRWFjaCgoZikgPT4gZiAmJiBmKHsgbWVzaDogdGhpcywgY2FtZXJhIH0pKTtcbiAgICB9XG59XG4iLCIvLyBUT0RPOiB1cGxvYWQgZW1wdHkgdGV4dHVyZSBpZiBudWxsID8gbWF5YmUgbm90XG4vLyBUT0RPOiB1cGxvYWQgaWRlbnRpdHkgbWF0cml4IGlmIG51bGwgP1xuLy8gVE9ETzogc2FtcGxlciBDdWJlXG5cbmxldCBJRCA9IDE7XG5cbi8vIGNhY2hlIG9mIHR5cGVkIGFycmF5cyB1c2VkIHRvIGZsYXR0ZW4gdW5pZm9ybSBhcnJheXNcbmNvbnN0IGFycmF5Q2FjaGVGMzIgPSB7fTtcblxuZXhwb3J0IGNsYXNzIFByb2dyYW0ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBnbCxcbiAgICAgICAge1xuICAgICAgICAgICAgdmVydGV4LFxuICAgICAgICAgICAgZnJhZ21lbnQsXG4gICAgICAgICAgICB1bmlmb3JtcyA9IHt9LFxuXG4gICAgICAgICAgICB0cmFuc3BhcmVudCA9IGZhbHNlLFxuICAgICAgICAgICAgY3VsbEZhY2UgPSBnbC5CQUNLLFxuICAgICAgICAgICAgZnJvbnRGYWNlID0gZ2wuQ0NXLFxuICAgICAgICAgICAgZGVwdGhUZXN0ID0gdHJ1ZSxcbiAgICAgICAgICAgIGRlcHRoV3JpdGUgPSB0cnVlLFxuICAgICAgICAgICAgZGVwdGhGdW5jID0gZ2wuTEVTUyxcbiAgICAgICAgfSA9IHt9XG4gICAgKSB7XG4gICAgICAgIGlmICghZ2wuY2FudmFzKSBjb25zb2xlLmVycm9yKCdnbCBub3QgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50IHRvIFByb2dyYW0nKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gdW5pZm9ybXM7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIGlmICghdmVydGV4KSBjb25zb2xlLndhcm4oJ3ZlcnRleCBzaGFkZXIgbm90IHN1cHBsaWVkJyk7XG4gICAgICAgIGlmICghZnJhZ21lbnQpIGNvbnNvbGUud2FybignZnJhZ21lbnQgc2hhZGVyIG5vdCBzdXBwbGllZCcpO1xuXG4gICAgICAgIC8vIFN0b3JlIHByb2dyYW0gc3RhdGVcbiAgICAgICAgdGhpcy50cmFuc3BhcmVudCA9IHRyYW5zcGFyZW50O1xuICAgICAgICB0aGlzLmN1bGxGYWNlID0gY3VsbEZhY2U7XG4gICAgICAgIHRoaXMuZnJvbnRGYWNlID0gZnJvbnRGYWNlO1xuICAgICAgICB0aGlzLmRlcHRoVGVzdCA9IGRlcHRoVGVzdDtcbiAgICAgICAgdGhpcy5kZXB0aFdyaXRlID0gZGVwdGhXcml0ZTtcbiAgICAgICAgdGhpcy5kZXB0aEZ1bmMgPSBkZXB0aEZ1bmM7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jID0ge307XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbiA9IHt9O1xuXG4gICAgICAgIC8vIHNldCBkZWZhdWx0IGJsZW5kRnVuYyBpZiB0cmFuc3BhcmVudCBmbGFnZ2VkXG4gICAgICAgIGlmICh0aGlzLnRyYW5zcGFyZW50ICYmICF0aGlzLmJsZW5kRnVuYy5zcmMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsLnJlbmRlcmVyLnByZW11bHRpcGxpZWRBbHBoYSkgdGhpcy5zZXRCbGVuZEZ1bmModGhpcy5nbC5PTkUsIHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG4gICAgICAgICAgICBlbHNlIHRoaXMuc2V0QmxlbmRGdW5jKHRoaXMuZ2wuU1JDX0FMUEhBLCB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGlsZSB2ZXJ0ZXggc2hhZGVyIGFuZCBsb2cgZXJyb3JzXG4gICAgICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHZlcnRleFNoYWRlciwgdmVydGV4KTtcbiAgICAgICAgZ2wuY29tcGlsZVNoYWRlcih2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBpZiAoZ2wuZ2V0U2hhZGVySW5mb0xvZyh2ZXJ0ZXhTaGFkZXIpICE9PSAnJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke2dsLmdldFNoYWRlckluZm9Mb2codmVydGV4U2hhZGVyKX1cXG5WZXJ0ZXggU2hhZGVyXFxuJHthZGRMaW5lTnVtYmVycyh2ZXJ0ZXgpfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGlsZSBmcmFnbWVudCBzaGFkZXIgYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVyLCBmcmFnbWVudCk7XG4gICAgICAgIGdsLmNvbXBpbGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgICBpZiAoZ2wuZ2V0U2hhZGVySW5mb0xvZyhmcmFnbWVudFNoYWRlcikgIT09ICcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7Z2wuZ2V0U2hhZGVySW5mb0xvZyhmcmFnbWVudFNoYWRlcil9XFxuRnJhZ21lbnQgU2hhZGVyXFxuJHthZGRMaW5lTnVtYmVycyhmcmFnbWVudCl9YCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21waWxlIHByb2dyYW0gYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICAgICAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG4gICAgICAgIGdsLmxpbmtQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihnbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLnByb2dyYW0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBzaGFkZXIgb25jZSBsaW5rZWRcbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcik7XG4gICAgICAgIGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG5cbiAgICAgICAgLy8gR2V0IGFjdGl2ZSB1bmlmb3JtIGxvY2F0aW9uc1xuICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGxldCBudW1Vbmlmb3JtcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5wcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xuICAgICAgICBmb3IgKGxldCB1SW5kZXggPSAwOyB1SW5kZXggPCBudW1Vbmlmb3JtczsgdUluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCB1bmlmb3JtID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybSh0aGlzLnByb2dyYW0sIHVJbmRleCk7XG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMuc2V0KHVuaWZvcm0sIGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIHVuaWZvcm0ubmFtZSkpO1xuXG4gICAgICAgICAgICAvLyBzcGxpdCB1bmlmb3JtcycgbmFtZXMgdG8gc2VwYXJhdGUgYXJyYXkgYW5kIHN0cnVjdCBkZWNsYXJhdGlvbnNcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0ID0gdW5pZm9ybS5uYW1lLm1hdGNoKC8oXFx3KykvZyk7XG5cbiAgICAgICAgICAgIHVuaWZvcm0udW5pZm9ybU5hbWUgPSBzcGxpdFswXTtcbiAgICAgICAgICAgIHVuaWZvcm0ubmFtZUNvbXBvbmVudHMgPSBzcGxpdC5zbGljZSgxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBhY3RpdmUgYXR0cmlidXRlIGxvY2F0aW9uc1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZUxvY2F0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgY29uc3QgbG9jYXRpb25zID0gW107XG4gICAgICAgIGNvbnN0IG51bUF0dHJpYnMgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSwgZ2wuQUNUSVZFX0FUVFJJQlVURVMpO1xuICAgICAgICBmb3IgKGxldCBhSW5kZXggPSAwOyBhSW5kZXggPCBudW1BdHRyaWJzOyBhSW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gZ2wuZ2V0QWN0aXZlQXR0cmliKHRoaXMucHJvZ3JhbSwgYUluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCBhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAvLyBJZ25vcmUgc3BlY2lhbCBidWlsdC1pbiBpbnB1dHMuIGVnIGdsX1ZlcnRleElELCBnbF9JbnN0YW5jZUlEXG4gICAgICAgICAgICBpZiAobG9jYXRpb24gPT09IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgIGxvY2F0aW9uc1tsb2NhdGlvbl0gPSBhdHRyaWJ1dGUubmFtZTtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlTG9jYXRpb25zLnNldChhdHRyaWJ1dGUsIGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dHJpYnV0ZU9yZGVyID0gbG9jYXRpb25zLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHNldEJsZW5kRnVuYyhzcmMsIGRzdCwgc3JjQWxwaGEsIGRzdEFscGhhKSB7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jLnNyYyA9IHNyYztcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmMuZHN0ID0gZHN0O1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5zcmNBbHBoYSA9IHNyY0FscGhhO1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5kc3RBbHBoYSA9IGRzdEFscGhhO1xuICAgICAgICBpZiAoc3JjKSB0aGlzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzZXRCbGVuZEVxdWF0aW9uKG1vZGVSR0IsIG1vZGVBbHBoYSkge1xuICAgICAgICB0aGlzLmJsZW5kRXF1YXRpb24ubW9kZVJHQiA9IG1vZGVSR0I7XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGEgPSBtb2RlQWxwaGE7XG4gICAgfVxuXG4gICAgYXBwbHlTdGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVwdGhUZXN0KSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuXG4gICAgICAgIGlmICh0aGlzLmN1bGxGYWNlKSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5yZW5kZXJlci5kaXNhYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcblxuICAgICAgICBpZiAodGhpcy5ibGVuZEZ1bmMuc3JjKSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkJMRU5EKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLnJlbmRlcmVyLmRpc2FibGUodGhpcy5nbC5CTEVORCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VsbEZhY2UpIHRoaXMuZ2wucmVuZGVyZXIuc2V0Q3VsbEZhY2UodGhpcy5jdWxsRmFjZSk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc2V0RnJvbnRGYWNlKHRoaXMuZnJvbnRGYWNlKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXREZXB0aE1hc2sodGhpcy5kZXB0aFdyaXRlKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXREZXB0aEZ1bmModGhpcy5kZXB0aEZ1bmMpO1xuICAgICAgICBpZiAodGhpcy5ibGVuZEZ1bmMuc3JjKVxuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXRCbGVuZEZ1bmModGhpcy5ibGVuZEZ1bmMuc3JjLCB0aGlzLmJsZW5kRnVuYy5kc3QsIHRoaXMuYmxlbmRGdW5jLnNyY0FscGhhLCB0aGlzLmJsZW5kRnVuYy5kc3RBbHBoYSk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc2V0QmxlbmRFcXVhdGlvbih0aGlzLmJsZW5kRXF1YXRpb24ubW9kZVJHQiwgdGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYSk7XG4gICAgfVxuXG4gICAgdXNlKHsgZmxpcEZhY2VzID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgICAgIGxldCB0ZXh0dXJlVW5pdCA9IC0xO1xuICAgICAgICBjb25zdCBwcm9ncmFtQWN0aXZlID0gdGhpcy5nbC5yZW5kZXJlci5zdGF0ZS5jdXJyZW50UHJvZ3JhbSA9PT0gdGhpcy5pZDtcblxuICAgICAgICAvLyBBdm9pZCBnbCBjYWxsIGlmIHByb2dyYW0gYWxyZWFkeSBpbiB1c2VcbiAgICAgICAgaWYgKCFwcm9ncmFtQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc3RhdGUuY3VycmVudFByb2dyYW0gPSB0aGlzLmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IG9ubHkgdGhlIGFjdGl2ZSB1bmlmb3JtcyBmb3VuZCBpbiB0aGUgc2hhZGVyXG4gICAgICAgIHRoaXMudW5pZm9ybUxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbiwgYWN0aXZlVW5pZm9ybSkgPT4ge1xuICAgICAgICAgICAgbGV0IHVuaWZvcm0gPSB0aGlzLnVuaWZvcm1zW2FjdGl2ZVVuaWZvcm0udW5pZm9ybU5hbWVdO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBhY3RpdmVVbmlmb3JtLm5hbWVDb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1bmlmb3JtKSBicmVhaztcblxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQgaW4gdW5pZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3JtID0gdW5pZm9ybVtjb21wb25lbnRdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh1bmlmb3JtLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3JtID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdW5pZm9ybSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKGBBY3RpdmUgdW5pZm9ybSAke2FjdGl2ZVVuaWZvcm0ubmFtZX0gaGFzIG5vdCBiZWVuIHN1cHBsaWVkYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1bmlmb3JtICYmIHVuaWZvcm0udmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKGAke2FjdGl2ZVVuaWZvcm0ubmFtZX0gdW5pZm9ybSBpcyBtaXNzaW5nIGEgdmFsdWUgcGFyYW1ldGVyYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1bmlmb3JtLnZhbHVlLnRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0ICsgMTtcblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRleHR1cmUgbmVlZHMgdG8gYmUgdXBkYXRlZFxuICAgICAgICAgICAgICAgIHVuaWZvcm0udmFsdWUudXBkYXRlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0VW5pZm9ybSh0aGlzLmdsLCBhY3RpdmVVbmlmb3JtLnR5cGUsIGxvY2F0aW9uLCB0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZvciB0ZXh0dXJlIGFycmF5cywgc2V0IHVuaWZvcm0gYXMgYW4gYXJyYXkgb2YgdGV4dHVyZSB1bml0cyBpbnN0ZWFkIG9mIGp1c3Qgb25lXG4gICAgICAgICAgICBpZiAodW5pZm9ybS52YWx1ZS5sZW5ndGggJiYgdW5pZm9ybS52YWx1ZVswXS50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dHVyZVVuaXRzID0gW107XG4gICAgICAgICAgICAgICAgdW5pZm9ybS52YWx1ZS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUudXBkYXRlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVVuaXRzLnB1c2godGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFVuaWZvcm0odGhpcy5nbCwgYWN0aXZlVW5pZm9ybS50eXBlLCBsb2NhdGlvbiwgdGV4dHVyZVVuaXRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0VW5pZm9ybSh0aGlzLmdsLCBhY3RpdmVVbmlmb3JtLnR5cGUsIGxvY2F0aW9uLCB1bmlmb3JtLnZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcHBseVN0YXRlKCk7XG4gICAgICAgIGlmIChmbGlwRmFjZXMpIHRoaXMuZ2wucmVuZGVyZXIuc2V0RnJvbnRGYWNlKHRoaXMuZnJvbnRGYWNlID09PSB0aGlzLmdsLkNDVyA/IHRoaXMuZ2wuQ1cgOiB0aGlzLmdsLkNDVyk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICB0aGlzLmdsLmRlbGV0ZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFVuaWZvcm0oZ2wsIHR5cGUsIGxvY2F0aW9uLCB2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUubGVuZ3RoID8gZmxhdHRlbih2YWx1ZSkgOiB2YWx1ZTtcbiAgICBjb25zdCBzZXRWYWx1ZSA9IGdsLnJlbmRlcmVyLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMuZ2V0KGxvY2F0aW9uKTtcblxuICAgIC8vIEF2b2lkIHJlZHVuZGFudCB1bmlmb3JtIGNvbW1hbmRzXG4gICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICBpZiAoc2V0VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBzZXRWYWx1ZS5sZW5ndGggIT09IHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gY2xvbmUgYXJyYXkgdG8gc3RvcmUgYXMgY2FjaGVcbiAgICAgICAgICAgIGdsLnJlbmRlcmVyLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMuc2V0KGxvY2F0aW9uLCB2YWx1ZS5zbGljZSgwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYXJyYXlzRXF1YWwoc2V0VmFsdWUsIHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2FjaGVkIGFycmF5IHZhbHVlc1xuICAgICAgICAgICAgc2V0VmFsdWUuc2V0ID8gc2V0VmFsdWUuc2V0KHZhbHVlKSA6IHNldEFycmF5KHNldFZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgc2V0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNldFZhbHVlID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgdmFsdWUpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIDUxMjY6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID8gZ2wudW5pZm9ybTFmdihsb2NhdGlvbiwgdmFsdWUpIDogZ2wudW5pZm9ybTFmKGxvY2F0aW9uLCB2YWx1ZSk7IC8vIEZMT0FUXG4gICAgICAgIGNhc2UgMzU2NjQ6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTJmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUMyXG4gICAgICAgIGNhc2UgMzU2NjU6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTNmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUMzXG4gICAgICAgIGNhc2UgMzU2NjY6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTRmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUM0XG4gICAgICAgIGNhc2UgMzU2NzA6IC8vIEJPT0xcbiAgICAgICAgY2FzZSA1MTI0OiAvLyBJTlRcbiAgICAgICAgY2FzZSAzNTY3ODogLy8gU0FNUExFUl8yRFxuICAgICAgICBjYXNlIDM1NjgwOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA/IGdsLnVuaWZvcm0xaXYobG9jYXRpb24sIHZhbHVlKSA6IGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdmFsdWUpOyAvLyBTQU1QTEVSX0NVQkVcbiAgICAgICAgY2FzZSAzNTY3MTogLy8gQk9PTF9WRUMyXG4gICAgICAgIGNhc2UgMzU2Njc6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBJTlRfVkVDMlxuICAgICAgICBjYXNlIDM1NjcyOiAvLyBCT09MX1ZFQzNcbiAgICAgICAgY2FzZSAzNTY2ODpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtM2l2KGxvY2F0aW9uLCB2YWx1ZSk7IC8vIElOVF9WRUMzXG4gICAgICAgIGNhc2UgMzU2NzM6IC8vIEJPT0xfVkVDNFxuICAgICAgICBjYXNlIDM1NjY5OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm00aXYobG9jYXRpb24sIHZhbHVlKTsgLy8gSU5UX1ZFQzRcbiAgICAgICAgY2FzZSAzNTY3NDpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtTWF0cml4MmZ2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpOyAvLyBGTE9BVF9NQVQyXG4gICAgICAgIGNhc2UgMzU2NzU6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbiwgZmFsc2UsIHZhbHVlKTsgLy8gRkxPQVRfTUFUM1xuICAgICAgICBjYXNlIDM1Njc2OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB2YWx1ZSk7IC8vIEZMT0FUX01BVDRcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFkZExpbmVOdW1iZXJzKHN0cmluZykge1xuICAgIGxldCBsaW5lcyA9IHN0cmluZy5zcGxpdCgnXFxuJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaW5lc1tpXSA9IGkgKyAxICsgJzogJyArIGxpbmVzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gbGluZXMuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4oYSkge1xuICAgIGNvbnN0IGFycmF5TGVuID0gYS5sZW5ndGg7XG4gICAgY29uc3QgdmFsdWVMZW4gPSBhWzBdLmxlbmd0aDtcbiAgICBpZiAodmFsdWVMZW4gPT09IHVuZGVmaW5lZCkgcmV0dXJuIGE7XG4gICAgY29uc3QgbGVuZ3RoID0gYXJyYXlMZW4gKiB2YWx1ZUxlbjtcbiAgICBsZXQgdmFsdWUgPSBhcnJheUNhY2hlRjMyW2xlbmd0aF07XG4gICAgaWYgKCF2YWx1ZSkgYXJyYXlDYWNoZUYzMltsZW5ndGhdID0gdmFsdWUgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheUxlbjsgaSsrKSB2YWx1ZS5zZXQoYVtpXSwgaSAqIHZhbHVlTGVuKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGFycmF5c0VxdWFsKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2V0QXJyYXkoYSwgYikge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gYS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgfVxufVxuXG5sZXQgd2FybkNvdW50ID0gMDtcbmZ1bmN0aW9uIHdhcm4obWVzc2FnZSkge1xuICAgIGlmICh3YXJuQ291bnQgPiAxMDApIHJldHVybjtcbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgd2FybkNvdW50Kys7XG4gICAgaWYgKHdhcm5Db3VudCA+IDEwMCkgY29uc29sZS53YXJuKCdNb3JlIHRoYW4gMTAwIHByb2dyYW0gd2FybmluZ3MgLSBzdG9wcGluZyBsb2dzLicpO1xufVxuIiwiaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uL21hdGgvVmVjMy5qcyc7XG5cbi8vIFRPRE86IEhhbmRsZSBjb250ZXh0IGxvc3MgaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvd2ViZ2wvd2lraS9IYW5kbGluZ0NvbnRleHRMb3N0XG5cbi8vIE5vdCBhdXRvbWF0aWMgLSBkZXZzIHRvIHVzZSB0aGVzZSBtZXRob2RzIG1hbnVhbGx5XG4vLyBnbC5jb2xvck1hc2soIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzayApO1xuLy8gZ2wuY2xlYXJDb2xvciggciwgZywgYiwgYSApO1xuLy8gZ2wuc3RlbmNpbE1hc2soIHN0ZW5jaWxNYXNrICk7XG4vLyBnbC5zdGVuY2lsRnVuYyggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICk7XG4vLyBnbC5zdGVuY2lsT3AoIHN0ZW5jaWxGYWlsLCBzdGVuY2lsWkZhaWwsIHN0ZW5jaWxaUGFzcyApO1xuLy8gZ2wuY2xlYXJTdGVuY2lsKCBzdGVuY2lsICk7XG5cbmNvbnN0IHRlbXBWZWMzID0gbmV3IFZlYzMoKTtcbmxldCBJRCA9IDE7XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJlciB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcbiAgICAgICAgd2lkdGggPSAzMDAsXG4gICAgICAgIGhlaWdodCA9IDE1MCxcbiAgICAgICAgZHByID0gMSxcbiAgICAgICAgYWxwaGEgPSBmYWxzZSxcbiAgICAgICAgZGVwdGggPSB0cnVlLFxuICAgICAgICBzdGVuY2lsID0gZmFsc2UsXG4gICAgICAgIGFudGlhbGlhcyA9IGZhbHNlLFxuICAgICAgICBwcmVtdWx0aXBsaWVkQWxwaGEgPSBmYWxzZSxcbiAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyID0gZmFsc2UsXG4gICAgICAgIHBvd2VyUHJlZmVyZW5jZSA9ICdkZWZhdWx0JyxcbiAgICAgICAgYXV0b0NsZWFyID0gdHJ1ZSxcbiAgICAgICAgd2ViZ2wgPSAyLFxuICAgIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0geyBhbHBoYSwgZGVwdGgsIHN0ZW5jaWwsIGFudGlhbGlhcywgcHJlbXVsdGlwbGllZEFscGhhLCBwcmVzZXJ2ZURyYXdpbmdCdWZmZXIsIHBvd2VyUHJlZmVyZW5jZSB9O1xuICAgICAgICB0aGlzLmRwciA9IGRwcjtcbiAgICAgICAgdGhpcy5hbHBoYSA9IGFscGhhO1xuICAgICAgICB0aGlzLmNvbG9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXB0aCA9IGRlcHRoO1xuICAgICAgICB0aGlzLnN0ZW5jaWwgPSBzdGVuY2lsO1xuICAgICAgICB0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9IHByZW11bHRpcGxpZWRBbHBoYTtcbiAgICAgICAgdGhpcy5hdXRvQ2xlYXIgPSBhdXRvQ2xlYXI7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIC8vIEF0dGVtcHQgV2ViR0wyIHVubGVzcyBmb3JjZWQgdG8gMSwgaWYgbm90IHN1cHBvcnRlZCBmYWxsYmFjayB0byBXZWJHTDFcbiAgICAgICAgaWYgKHdlYmdsID09PSAyKSB0aGlzLmdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsMicsIGF0dHJpYnV0ZXMpO1xuICAgICAgICB0aGlzLmlzV2ViZ2wyID0gISF0aGlzLmdsO1xuICAgICAgICBpZiAoIXRoaXMuZ2wpIHRoaXMuZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgaWYgKCF0aGlzLmdsKSBjb25zb2xlLmVycm9yKCd1bmFibGUgdG8gY3JlYXRlIHdlYmdsIGNvbnRleHQnKTtcblxuICAgICAgICAvLyBBdHRhY2ggcmVuZGVyZXIgdG8gZ2wgc28gdGhhdCBhbGwgY2xhc3NlcyBoYXZlIGFjY2VzcyB0byBpbnRlcm5hbCBzdGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlciA9IHRoaXM7XG5cbiAgICAgICAgLy8gaW5pdGlhbGlzZSBzaXplIHZhbHVlc1xuICAgICAgICB0aGlzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgLy8gZ2wgc3RhdGUgc3RvcmVzIHRvIGF2b2lkIHJlZHVuZGFudCBjYWxscyBvbiBtZXRob2RzIHVzZWQgaW50ZXJuYWxseVxuICAgICAgICB0aGlzLnN0YXRlID0ge307XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jID0geyBzcmM6IHRoaXMuZ2wuT05FLCBkc3Q6IHRoaXMuZ2wuWkVSTyB9O1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24gPSB7IG1vZGVSR0I6IHRoaXMuZ2wuRlVOQ19BREQgfTtcbiAgICAgICAgdGhpcy5zdGF0ZS5jdWxsRmFjZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUuZnJvbnRGYWNlID0gdGhpcy5nbC5DQ1c7XG4gICAgICAgIHRoaXMuc3RhdGUuZGVwdGhNYXNrID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGF0ZS5kZXB0aEZ1bmMgPSB0aGlzLmdsLkxFU1M7XG4gICAgICAgIHRoaXMuc3RhdGUucHJlbXVsdGlwbHlBbHBoYSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXRlLmZsaXBZID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RhdGUudW5wYWNrQWxpZ25tZW50ID0gNDtcbiAgICAgICAgdGhpcy5zdGF0ZS5mcmFtZWJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUudmlld3BvcnQgPSB7IHg6IDAsIHk6IDAsIHdpZHRoOiBudWxsLCBoZWlnaHQ6IG51bGwgfTtcbiAgICAgICAgdGhpcy5zdGF0ZS50ZXh0dXJlVW5pdHMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdCA9IDA7XG4gICAgICAgIHRoaXMuc3RhdGUuYm91bmRCdWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuc3RhdGUuY3VycmVudFByb2dyYW0gPSBudWxsO1xuXG4gICAgICAgIC8vIHN0b3JlIHJlcXVlc3RlZCBleHRlbnNpb25zXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IHt9O1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgZXh0cmEgZm9ybWF0IHR5cGVzXG4gICAgICAgIGlmICh0aGlzLmlzV2ViZ2wyKSB7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0Jyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX2VsZW1lbnRfaW5kZXhfdWludCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ0VYVF9zUkdCJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfZGVwdGhfdGV4dHVyZScpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YycpO1xuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfY29tcHJlc3Npb25fYnB0YycpO1xuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnKTtcbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJyk7XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnKTtcbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnKTtcblxuICAgICAgICAvLyBDcmVhdGUgbWV0aG9kIGFsaWFzZXMgdXNpbmcgZXh0ZW5zaW9uIChXZWJHTDEpIG9yIG5hdGl2ZSBpZiBhdmFpbGFibGUgKFdlYkdMMilcbiAgICAgICAgdGhpcy52ZXJ0ZXhBdHRyaWJEaXZpc29yID0gdGhpcy5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnLCAndmVydGV4QXR0cmliRGl2aXNvcicsICd2ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUnKTtcbiAgICAgICAgdGhpcy5kcmF3QXJyYXlzSW5zdGFuY2VkID0gdGhpcy5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnLCAnZHJhd0FycmF5c0luc3RhbmNlZCcsICdkcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUnKTtcbiAgICAgICAgdGhpcy5kcmF3RWxlbWVudHNJbnN0YW5jZWQgPSB0aGlzLmdldEV4dGVuc2lvbignQU5HTEVfaW5zdGFuY2VkX2FycmF5cycsICdkcmF3RWxlbWVudHNJbnN0YW5jZWQnLCAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUnKTtcbiAgICAgICAgdGhpcy5jcmVhdGVWZXJ0ZXhBcnJheSA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdmVydGV4X2FycmF5X29iamVjdCcsICdjcmVhdGVWZXJ0ZXhBcnJheScsICdjcmVhdGVWZXJ0ZXhBcnJheU9FUycpO1xuICAgICAgICB0aGlzLmJpbmRWZXJ0ZXhBcnJheSA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdmVydGV4X2FycmF5X29iamVjdCcsICdiaW5kVmVydGV4QXJyYXknLCAnYmluZFZlcnRleEFycmF5T0VTJyk7XG4gICAgICAgIHRoaXMuZGVsZXRlVmVydGV4QXJyYXkgPSB0aGlzLmdldEV4dGVuc2lvbignT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnLCAnZGVsZXRlVmVydGV4QXJyYXknLCAnZGVsZXRlVmVydGV4QXJyYXlPRVMnKTtcbiAgICAgICAgdGhpcy5kcmF3QnVmZmVycyA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9kcmF3X2J1ZmZlcnMnLCAnZHJhd0J1ZmZlcnMnLCAnZHJhd0J1ZmZlcnNXRUJHTCcpO1xuXG4gICAgICAgIC8vIFN0b3JlIGRldmljZSBwYXJhbWV0ZXJzXG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHt9O1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMubWF4VGV4dHVyZVVuaXRzID0gdGhpcy5nbC5nZXRQYXJhbWV0ZXIodGhpcy5nbC5NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyk7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5tYXhBbmlzb3Ryb3B5ID0gdGhpcy5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpXG4gICAgICAgICAgICA/IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKS5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpXG4gICAgICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5nbC5jYW52YXMud2lkdGggPSB3aWR0aCAqIHRoaXMuZHByO1xuICAgICAgICB0aGlzLmdsLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiB0aGlzLmRwcjtcblxuICAgICAgICBpZiAoIXRoaXMuZ2wuY2FudmFzLnN0eWxlKSByZXR1cm47XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5nbC5jYW52YXMuc3R5bGUsIHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICdweCcsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArICdweCcsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFZpZXdwb3J0KHdpZHRoLCBoZWlnaHQsIHggPSAwLCB5ID0gMCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS52aWV3cG9ydC53aWR0aCA9PT0gd2lkdGggJiYgdGhpcy5zdGF0ZS52aWV3cG9ydC5oZWlnaHQgPT09IGhlaWdodCkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuc3RhdGUudmlld3BvcnQuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LnggPSB4O1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LnkgPSB5O1xuICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIHNldFNjaXNzb3Iod2lkdGgsIGhlaWdodCwgeCA9IDAsIHkgPSAwKSB7XG4gICAgICAgIHRoaXMuZ2wuc2Npc3Nvcih4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBlbmFibGUoaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVbaWRdID09PSB0cnVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlKGlkKTtcbiAgICAgICAgdGhpcy5zdGF0ZVtpZF0gPSB0cnVlO1xuICAgIH1cblxuICAgIGRpc2FibGUoaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVbaWRdID09PSBmYWxzZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmRpc2FibGUoaWQpO1xuICAgICAgICB0aGlzLnN0YXRlW2lkXSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNldEJsZW5kRnVuYyhzcmMsIGRzdCwgc3JjQWxwaGEsIGRzdEFscGhhKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLnNyYyA9PT0gc3JjICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5kc3QgPT09IGRzdCAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuc3JjQWxwaGEgPT09IHNyY0FscGhhICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5kc3RBbHBoYSA9PT0gZHN0QWxwaGFcbiAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5zcmMgPSBzcmM7XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLmRzdCA9IGRzdDtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuc3JjQWxwaGEgPSBzcmNBbHBoYTtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuZHN0QWxwaGEgPSBkc3RBbHBoYTtcbiAgICAgICAgaWYgKHNyY0FscGhhICE9PSB1bmRlZmluZWQpIHRoaXMuZ2wuYmxlbmRGdW5jU2VwYXJhdGUoc3JjLCBkc3QsIHNyY0FscGhhLCBkc3RBbHBoYSk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5ibGVuZEZ1bmMoc3JjLCBkc3QpO1xuICAgIH1cblxuICAgIHNldEJsZW5kRXF1YXRpb24obW9kZVJHQiwgbW9kZUFscGhhKSB7XG4gICAgICAgIG1vZGVSR0IgPSBtb2RlUkdCIHx8IHRoaXMuZ2wuRlVOQ19BREQ7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZVJHQiA9PT0gbW9kZVJHQiAmJiB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZUFscGhhID09PSBtb2RlQWxwaGEpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uLm1vZGVSR0IgPSBtb2RlUkdCO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZUFscGhhID0gbW9kZUFscGhhO1xuICAgICAgICBpZiAobW9kZUFscGhhICE9PSB1bmRlZmluZWQpIHRoaXMuZ2wuYmxlbmRFcXVhdGlvblNlcGFyYXRlKG1vZGVSR0IsIG1vZGVBbHBoYSk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5ibGVuZEVxdWF0aW9uKG1vZGVSR0IpO1xuICAgIH1cblxuICAgIHNldEN1bGxGYWNlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmN1bGxGYWNlID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmN1bGxGYWNlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuY3VsbEZhY2UodmFsdWUpO1xuICAgIH1cblxuICAgIHNldEZyb250RmFjZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5mcm9udEZhY2UgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuZnJvbnRGYWNlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXREZXB0aE1hc2sodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZGVwdGhNYXNrID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmRlcHRoTWFzayA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmRlcHRoTWFzayh2YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0RGVwdGhGdW5jKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmRlcHRoRnVuYyA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5kZXB0aEZ1bmMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5kZXB0aEZ1bmModmFsdWUpO1xuICAgIH1cblxuICAgIGFjdGl2ZVRleHR1cmUodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYWN0aXZlVGV4dHVyZVVuaXQgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlVGV4dHVyZVVuaXQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTAgKyB2YWx1ZSk7XG4gICAgfVxuXG4gICAgYmluZEZyYW1lYnVmZmVyKHsgdGFyZ2V0ID0gdGhpcy5nbC5GUkFNRUJVRkZFUiwgYnVmZmVyID0gbnVsbCB9ID0ge30pIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZnJhbWVidWZmZXIgPT09IGJ1ZmZlcikgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmZyYW1lYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0YXJnZXQsIGJ1ZmZlcik7XG4gICAgfVxuXG4gICAgZ2V0RXh0ZW5zaW9uKGV4dGVuc2lvbiwgd2ViZ2wyRnVuYywgZXh0RnVuYykge1xuICAgICAgICAvLyBpZiB3ZWJnbDIgZnVuY3Rpb24gc3VwcG9ydGVkLCByZXR1cm4gZnVuYyBib3VuZCB0byBnbCBjb250ZXh0XG4gICAgICAgIGlmICh3ZWJnbDJGdW5jICYmIHRoaXMuZ2xbd2ViZ2wyRnVuY10pIHJldHVybiB0aGlzLmdsW3dlYmdsMkZ1bmNdLmJpbmQodGhpcy5nbCk7XG5cbiAgICAgICAgLy8gZmV0Y2ggZXh0ZW5zaW9uIG9uY2Ugb25seVxuICAgICAgICBpZiAoIXRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dKSB7XG4gICAgICAgICAgICB0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXSA9IHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKGV4dGVuc2lvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXR1cm4gZXh0ZW5zaW9uIGlmIG5vIGZ1bmN0aW9uIHJlcXVlc3RlZFxuICAgICAgICBpZiAoIXdlYmdsMkZ1bmMpIHJldHVybiB0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXTtcblxuICAgICAgICAvLyBSZXR1cm4gbnVsbCBpZiBleHRlbnNpb24gbm90IHN1cHBvcnRlZFxuICAgICAgICBpZiAoIXRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dKSByZXR1cm4gbnVsbDtcblxuICAgICAgICAvLyByZXR1cm4gZXh0ZW5zaW9uIGZ1bmN0aW9uLCBib3VuZCB0byBleHRlbnNpb25cbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dW2V4dEZ1bmNdLmJpbmQodGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl0pO1xuICAgIH1cblxuICAgIHNvcnRPcGFxdWUoYSwgYikge1xuICAgICAgICBpZiAoYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuICAgICAgICB9IGVsc2UgaWYgKGEucHJvZ3JhbS5pZCAhPT0gYi5wcm9ncmFtLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcm9ncmFtLmlkIC0gYi5wcm9ncmFtLmlkO1xuICAgICAgICB9IGVsc2UgaWYgKGEuekRlcHRoICE9PSBiLnpEZXB0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGEuekRlcHRoIC0gYi56RGVwdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYi5pZCAtIGEuaWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzb3J0VHJhbnNwYXJlbnQoYSwgYikge1xuICAgICAgICBpZiAoYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhLnpEZXB0aCAhPT0gYi56RGVwdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBiLnpEZXB0aCAtIGEuekRlcHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGIuaWQgLSBhLmlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc29ydFVJKGEsIGIpIHtcbiAgICAgICAgaWYgKGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcbiAgICAgICAgfSBlbHNlIGlmIChhLnByb2dyYW0uaWQgIT09IGIucHJvZ3JhbS5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIGEucHJvZ3JhbS5pZCAtIGIucHJvZ3JhbS5pZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiLmlkIC0gYS5pZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFJlbmRlckxpc3QoeyBzY2VuZSwgY2FtZXJhLCBmcnVzdHVtQ3VsbCwgc29ydCB9KSB7XG4gICAgICAgIGxldCByZW5kZXJMaXN0ID0gW107XG5cbiAgICAgICAgaWYgKGNhbWVyYSAmJiBmcnVzdHVtQ3VsbCkgY2FtZXJhLnVwZGF0ZUZydXN0dW0oKTtcblxuICAgICAgICAvLyBHZXQgdmlzaWJsZVxuICAgICAgICBzY2VuZS50cmF2ZXJzZSgobm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFub2RlLnZpc2libGUpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYgKCFub2RlLmRyYXcpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKGZydXN0dW1DdWxsICYmIG5vZGUuZnJ1c3R1bUN1bGxlZCAmJiBjYW1lcmEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhbWVyYS5mcnVzdHVtSW50ZXJzZWN0c01lc2gobm9kZSkpIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVuZGVyTGlzdC5wdXNoKG5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoc29ydCkge1xuICAgICAgICAgICAgY29uc3Qgb3BhcXVlID0gW107XG4gICAgICAgICAgICBjb25zdCB0cmFuc3BhcmVudCA9IFtdOyAvLyBkZXB0aFRlc3QgdHJ1ZVxuICAgICAgICAgICAgY29uc3QgdWkgPSBbXTsgLy8gZGVwdGhUZXN0IGZhbHNlXG5cbiAgICAgICAgICAgIHJlbmRlckxpc3QuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGludG8gdGhlIDMgcmVuZGVyIGdyb3Vwc1xuICAgICAgICAgICAgICAgIGlmICghbm9kZS5wcm9ncmFtLnRyYW5zcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIG9wYXF1ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5wcm9ncmFtLmRlcHRoVGVzdCkge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc3BhcmVudC5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHVpLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbm9kZS56RGVwdGggPSAwO1xuXG4gICAgICAgICAgICAgICAgLy8gT25seSBjYWxjdWxhdGUgei1kZXB0aCBpZiByZW5kZXJPcmRlciB1bnNldCBhbmQgZGVwdGhUZXN0IGlzIHRydWVcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5yZW5kZXJPcmRlciAhPT0gMCB8fCAhbm9kZS5wcm9ncmFtLmRlcHRoVGVzdCB8fCAhY2FtZXJhKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgei1kZXB0aFxuICAgICAgICAgICAgICAgIG5vZGUud29ybGRNYXRyaXguZ2V0VHJhbnNsYXRpb24odGVtcFZlYzMpO1xuICAgICAgICAgICAgICAgIHRlbXBWZWMzLmFwcGx5TWF0cml4NChjYW1lcmEucHJvamVjdGlvblZpZXdNYXRyaXgpO1xuICAgICAgICAgICAgICAgIG5vZGUuekRlcHRoID0gdGVtcFZlYzMuejtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBvcGFxdWUuc29ydCh0aGlzLnNvcnRPcGFxdWUpO1xuICAgICAgICAgICAgdHJhbnNwYXJlbnQuc29ydCh0aGlzLnNvcnRUcmFuc3BhcmVudCk7XG4gICAgICAgICAgICB1aS5zb3J0KHRoaXMuc29ydFVJKTtcblxuICAgICAgICAgICAgcmVuZGVyTGlzdCA9IG9wYXF1ZS5jb25jYXQodHJhbnNwYXJlbnQsIHVpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJMaXN0O1xuICAgIH1cblxuICAgIHJlbmRlcih7IHNjZW5lLCBjYW1lcmEsIHRhcmdldCA9IG51bGwsIHVwZGF0ZSA9IHRydWUsIHNvcnQgPSB0cnVlLCBmcnVzdHVtQ3VsbCA9IHRydWUsIGNsZWFyIH0pIHtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIG5vIHJlbmRlciB0YXJnZXQgYm91bmQgc28gZHJhd3MgdG8gY2FudmFzXG4gICAgICAgICAgICB0aGlzLmJpbmRGcmFtZWJ1ZmZlcigpO1xuICAgICAgICAgICAgdGhpcy5zZXRWaWV3cG9ydCh0aGlzLndpZHRoICogdGhpcy5kcHIsIHRoaXMuaGVpZ2h0ICogdGhpcy5kcHIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYmluZCBzdXBwbGllZCByZW5kZXIgdGFyZ2V0IGFuZCB1cGRhdGUgdmlld3BvcnRcbiAgICAgICAgICAgIHRoaXMuYmluZEZyYW1lYnVmZmVyKHRhcmdldCk7XG4gICAgICAgICAgICB0aGlzLnNldFZpZXdwb3J0KHRhcmdldC53aWR0aCwgdGFyZ2V0LmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xlYXIgfHwgKHRoaXMuYXV0b0NsZWFyICYmIGNsZWFyICE9PSBmYWxzZSkpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSBkZXB0aCBidWZmZXIgd3JpdGluZyBpcyBlbmFibGVkIHNvIGl0IGNhbiBiZSBjbGVhcmVkXG4gICAgICAgICAgICBpZiAodGhpcy5kZXB0aCAmJiAoIXRhcmdldCB8fCB0YXJnZXQuZGVwdGgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmFibGUodGhpcy5nbC5ERVBUSF9URVNUKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldERlcHRoTWFzayh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ2wuY2xlYXIoXG4gICAgICAgICAgICAgICAgKHRoaXMuY29sb3IgPyB0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmRlcHRoID8gdGhpcy5nbC5ERVBUSF9CVUZGRVJfQklUIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5zdGVuY2lsID8gdGhpcy5nbC5TVEVOQ0lMX0JVRkZFUl9CSVQgOiAwKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZXMgYWxsIHNjZW5lIGdyYXBoIG1hdHJpY2VzXG4gICAgICAgIGlmICh1cGRhdGUpIHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cbiAgICAgICAgLy8gVXBkYXRlIGNhbWVyYSBzZXBhcmF0ZWx5LCBpbiBjYXNlIG5vdCBpbiBzY2VuZSBncmFwaFxuICAgICAgICBpZiAoY2FtZXJhKSBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuICAgICAgICAvLyBHZXQgcmVuZGVyIGxpc3QgLSBlbnRhaWxzIGN1bGxpbmcgYW5kIHNvcnRpbmdcbiAgICAgICAgY29uc3QgcmVuZGVyTGlzdCA9IHRoaXMuZ2V0UmVuZGVyTGlzdCh7IHNjZW5lLCBjYW1lcmEsIGZydXN0dW1DdWxsLCBzb3J0IH0pO1xuXG4gICAgICAgIHJlbmRlckxpc3QuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgbm9kZS5kcmF3KHsgY2FtZXJhIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcbmltcG9ydCB7IFF1YXQgfSBmcm9tICcuLi9tYXRoL1F1YXQuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4uL21hdGgvTWF0NC5qcyc7XG5pbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uL21hdGgvRXVsZXIuanMnO1xuXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWMzKCk7XG4gICAgICAgIHRoaXMucXVhdGVybmlvbiA9IG5ldyBRdWF0KCk7XG4gICAgICAgIHRoaXMuc2NhbGUgPSBuZXcgVmVjMygxKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xuICAgICAgICB0aGlzLnVwID0gbmV3IFZlYzMoMCwgMSwgMCk7XG5cbiAgICAgICAgdGhpcy5yb3RhdGlvbi5vbkNoYW5nZSA9ICgpID0+IHRoaXMucXVhdGVybmlvbi5mcm9tRXVsZXIodGhpcy5yb3RhdGlvbik7XG4gICAgICAgIHRoaXMucXVhdGVybmlvbi5vbkNoYW5nZSA9ICgpID0+IHRoaXMucm90YXRpb24uZnJvbVF1YXRlcm5pb24odGhpcy5xdWF0ZXJuaW9uKTtcbiAgICB9XG5cbiAgICBzZXRQYXJlbnQocGFyZW50LCBub3RpZnlQYXJlbnQgPSB0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiBwYXJlbnQgIT09IHRoaXMucGFyZW50KSB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBpZiAobm90aWZ5UGFyZW50ICYmIHBhcmVudCkgcGFyZW50LmFkZENoaWxkKHRoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBhZGRDaGlsZChjaGlsZCwgbm90aWZ5Q2hpbGQgPSB0cnVlKSB7XG4gICAgICAgIGlmICghfnRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCkpIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIGlmIChub3RpZnlDaGlsZCkgY2hpbGQuc2V0UGFyZW50KHRoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZW1vdmVDaGlsZChjaGlsZCwgbm90aWZ5Q2hpbGQgPSB0cnVlKSB7XG4gICAgICAgIGlmICghIX50aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpKSB0aGlzLmNoaWxkcmVuLnNwbGljZSh0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpLCAxKTtcbiAgICAgICAgaWYgKG5vdGlmeUNoaWxkKSBjaGlsZC5zZXRQYXJlbnQobnVsbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKSB7XG4gICAgICAgIGlmICh0aGlzLm1hdHJpeEF1dG9VcGRhdGUpIHRoaXMudXBkYXRlTWF0cml4KCk7XG4gICAgICAgIGlmICh0aGlzLndvcmxkTWF0cml4TmVlZHNVcGRhdGUgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCA9PT0gbnVsbCkgdGhpcy53b3JsZE1hdHJpeC5jb3B5KHRoaXMubWF0cml4KTtcbiAgICAgICAgICAgIGVsc2UgdGhpcy53b3JsZE1hdHJpeC5tdWx0aXBseSh0aGlzLnBhcmVudC53b3JsZE1hdHJpeCwgdGhpcy5tYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBmb3JjZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLnVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeCgpIHtcbiAgICAgICAgdGhpcy5tYXRyaXguY29tcG9zZSh0aGlzLnF1YXRlcm5pb24sIHRoaXMucG9zaXRpb24sIHRoaXMuc2NhbGUpO1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4TmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHRyYXZlcnNlKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIFJldHVybiB0cnVlIGluIGNhbGxiYWNrIHRvIHN0b3AgdHJhdmVyc2luZyBjaGlsZHJlblxuICAgICAgICBpZiAoY2FsbGJhY2sodGhpcykpIHJldHVybjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpXS50cmF2ZXJzZShjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWNvbXBvc2UoKSB7XG4gICAgICAgIHRoaXMubWF0cml4LmdldFRyYW5zbGF0aW9uKHRoaXMucG9zaXRpb24pO1xuICAgICAgICB0aGlzLm1hdHJpeC5nZXRSb3RhdGlvbih0aGlzLnF1YXRlcm5pb24pO1xuICAgICAgICB0aGlzLm1hdHJpeC5nZXRTY2FsaW5nKHRoaXMuc2NhbGUpO1xuICAgICAgICB0aGlzLnJvdGF0aW9uLmZyb21RdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbik7XG4gICAgfVxuXG4gICAgbG9va0F0KHRhcmdldCwgaW52ZXJ0ID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGludmVydCkgdGhpcy5tYXRyaXgubG9va0F0KHRoaXMucG9zaXRpb24sIHRhcmdldCwgdGhpcy51cCk7XG4gICAgICAgIGVsc2UgdGhpcy5tYXRyaXgubG9va0F0KHRhcmdldCwgdGhpcy5wb3NpdGlvbiwgdGhpcy51cCk7XG4gICAgICAgIHRoaXMubWF0cml4LmdldFJvdGF0aW9uKHRoaXMucXVhdGVybmlvbik7XG4gICAgICAgIHRoaXMucm90YXRpb24uZnJvbVF1YXRlcm5pb24odGhpcy5xdWF0ZXJuaW9uKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvR2VvbWV0cnkuanMnO1xuXG5leHBvcnQgY2xhc3MgUGxhbmUgZXh0ZW5kcyBHZW9tZXRyeSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIHsgd2lkdGggPSAxLCBoZWlnaHQgPSAxLCB3aWR0aFNlZ21lbnRzID0gMSwgaGVpZ2h0U2VnbWVudHMgPSAxLCBhdHRyaWJ1dGVzID0ge30gfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHdTZWdzID0gd2lkdGhTZWdtZW50cztcbiAgICAgICAgY29uc3QgaFNlZ3MgPSBoZWlnaHRTZWdtZW50cztcblxuICAgICAgICAvLyBEZXRlcm1pbmUgbGVuZ3RoIG9mIGFycmF5c1xuICAgICAgICBjb25zdCBudW0gPSAod1NlZ3MgKyAxKSAqIChoU2VncyArIDEpO1xuICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gd1NlZ3MgKiBoU2VncyAqIDY7XG5cbiAgICAgICAgLy8gR2VuZXJhdGUgZW1wdHkgYXJyYXlzIG9uY2VcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KG51bSAqIDMpO1xuICAgICAgICBjb25zdCBub3JtYWwgPSBuZXcgRmxvYXQzMkFycmF5KG51bSAqIDMpO1xuICAgICAgICBjb25zdCB1diA9IG5ldyBGbG9hdDMyQXJyYXkobnVtICogMik7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gbnVtSW5kaWNlcyA+IDY1NTM2ID8gbmV3IFVpbnQzMkFycmF5KG51bUluZGljZXMpIDogbmV3IFVpbnQxNkFycmF5KG51bUluZGljZXMpO1xuXG4gICAgICAgIFBsYW5lLmJ1aWxkUGxhbmUocG9zaXRpb24sIG5vcm1hbCwgdXYsIGluZGV4LCB3aWR0aCwgaGVpZ2h0LCAwLCB3U2VncywgaFNlZ3MpO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlcywge1xuICAgICAgICAgICAgcG9zaXRpb246IHsgc2l6ZTogMywgZGF0YTogcG9zaXRpb24gfSxcbiAgICAgICAgICAgIG5vcm1hbDogeyBzaXplOiAzLCBkYXRhOiBub3JtYWwgfSxcbiAgICAgICAgICAgIHV2OiB7IHNpemU6IDIsIGRhdGE6IHV2IH0sXG4gICAgICAgICAgICBpbmRleDogeyBkYXRhOiBpbmRleCB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBzdXBlcihnbCwgYXR0cmlidXRlcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGJ1aWxkUGxhbmUocG9zaXRpb24sIG5vcm1hbCwgdXYsIGluZGV4LCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd1NlZ3MsIGhTZWdzLCB1ID0gMCwgdiA9IDEsIHcgPSAyLCB1RGlyID0gMSwgdkRpciA9IC0xLCBpID0gMCwgaWkgPSAwKSB7XG4gICAgICAgIGNvbnN0IGlvID0gaTtcbiAgICAgICAgY29uc3Qgc2VnVyA9IHdpZHRoIC8gd1NlZ3M7XG4gICAgICAgIGNvbnN0IHNlZ0ggPSBoZWlnaHQgLyBoU2VncztcblxuICAgICAgICBmb3IgKGxldCBpeSA9IDA7IGl5IDw9IGhTZWdzOyBpeSsrKSB7XG4gICAgICAgICAgICBsZXQgeSA9IGl5ICogc2VnSCAtIGhlaWdodCAvIDI7XG4gICAgICAgICAgICBmb3IgKGxldCBpeCA9IDA7IGl4IDw9IHdTZWdzOyBpeCsrLCBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IGl4ICogc2VnVyAtIHdpZHRoIC8gMjtcblxuICAgICAgICAgICAgICAgIHBvc2l0aW9uW2kgKiAzICsgdV0gPSB4ICogdURpcjtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbltpICogMyArIHZdID0geSAqIHZEaXI7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25baSAqIDMgKyB3XSA9IGRlcHRoIC8gMjtcblxuICAgICAgICAgICAgICAgIG5vcm1hbFtpICogMyArIHVdID0gMDtcbiAgICAgICAgICAgICAgICBub3JtYWxbaSAqIDMgKyB2XSA9IDA7XG4gICAgICAgICAgICAgICAgbm9ybWFsW2kgKiAzICsgd10gPSBkZXB0aCA+PSAwID8gMSA6IC0xO1xuXG4gICAgICAgICAgICAgICAgdXZbaSAqIDJdID0gaXggLyB3U2VncztcbiAgICAgICAgICAgICAgICB1dltpICogMiArIDFdID0gMSAtIGl5IC8gaFNlZ3M7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXkgPT09IGhTZWdzIHx8IGl4ID09PSB3U2VncykgY29udGludWU7XG4gICAgICAgICAgICAgICAgbGV0IGEgPSBpbyArIGl4ICsgaXkgKiAod1NlZ3MgKyAxKTtcbiAgICAgICAgICAgICAgICBsZXQgYiA9IGlvICsgaXggKyAoaXkgKyAxKSAqICh3U2VncyArIDEpO1xuICAgICAgICAgICAgICAgIGxldCBjID0gaW8gKyBpeCArIChpeSArIDEpICogKHdTZWdzICsgMSkgKyAxO1xuICAgICAgICAgICAgICAgIGxldCBkID0gaW8gKyBpeCArIGl5ICogKHdTZWdzICsgMSkgKyAxO1xuXG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2XSA9IGE7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgMV0gPSBiO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDJdID0gZDtcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyAzXSA9IGI7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgNF0gPSBjO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDVdID0gZDtcbiAgICAgICAgICAgICAgICBpaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgRXVsZXJGdW5jIGZyb20gJy4vZnVuY3Rpb25zL0V1bGVyRnVuYy5qcyc7XG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi9NYXQ0LmpzJztcblxuY29uc3QgdG1wTWF0NCA9IG5ldyBNYXQ0KCk7XG5cbmV4cG9ydCBjbGFzcyBFdWxlciBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IHgsIHogPSB4LCBvcmRlciA9ICdZWFonKSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHopO1xuICAgICAgICB0aGlzLm9yZGVyID0gb3JkZXI7XG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSAoKSA9PiB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0IHgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzBdO1xuICAgIH1cblxuICAgIGdldCB5KCkge1xuICAgICAgICByZXR1cm4gdGhpc1sxXTtcbiAgICB9XG5cbiAgICBnZXQgeigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMl07XG4gICAgfVxuXG4gICAgc2V0IHgodikge1xuICAgICAgICB0aGlzWzBdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpc1sxXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXNbMl0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0KHgsIHkgPSB4LCB6ID0geCkge1xuICAgICAgICBpZiAoeC5sZW5ndGgpIHJldHVybiB0aGlzLmNvcHkoeCk7XG4gICAgICAgIHRoaXNbMF0gPSB4O1xuICAgICAgICB0aGlzWzFdID0geTtcbiAgICAgICAgdGhpc1syXSA9IHo7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29weSh2KSB7XG4gICAgICAgIHRoaXNbMF0gPSB2WzBdO1xuICAgICAgICB0aGlzWzFdID0gdlsxXTtcbiAgICAgICAgdGhpc1syXSA9IHZbMl07XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVvcmRlcihvcmRlcikge1xuICAgICAgICB0aGlzLm9yZGVyID0gb3JkZXI7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVJvdGF0aW9uTWF0cml4KG0sIG9yZGVyID0gdGhpcy5vcmRlcikge1xuICAgICAgICBFdWxlckZ1bmMuZnJvbVJvdGF0aW9uTWF0cml4KHRoaXMsIG0sIG9yZGVyKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tUXVhdGVybmlvbihxLCBvcmRlciA9IHRoaXMub3JkZXIpIHtcbiAgICAgICAgdG1wTWF0NC5mcm9tUXVhdGVybmlvbihxKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVJvdGF0aW9uTWF0cml4KHRtcE1hdDQsIG9yZGVyKTtcbiAgICB9XG5cbiAgICBmcm9tQXJyYXkoYSwgbyA9IDApIHtcbiAgICAgICAgdGhpc1swXSA9IGFbb107XG4gICAgICAgIHRoaXNbMV0gPSBhW28gKyAxXTtcbiAgICAgICAgdGhpc1syXSA9IGFbbyArIDJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0b0FycmF5KGEgPSBbXSwgbyA9IDApIHtcbiAgICAgICAgYVtvXSA9IHRoaXNbMF07XG4gICAgICAgIGFbbyArIDFdID0gdGhpc1sxXTtcbiAgICAgICAgYVtvICsgMl0gPSB0aGlzWzJdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBNYXQzRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9NYXQzRnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNYXQzIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKG0wMCA9IDEsIG0wMSA9IDAsIG0wMiA9IDAsIG0xMCA9IDAsIG0xMSA9IDEsIG0xMiA9IDAsIG0yMCA9IDAsIG0yMSA9IDAsIG0yMiA9IDEpIHtcbiAgICAgICAgc3VwZXIobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNldChtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gICAgICAgIGlmIChtMDAubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KG0wMCk7XG4gICAgICAgIE1hdDNGdW5jLnNldCh0aGlzLCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnRyYW5zbGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnJvdGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2NhbGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuc2NhbGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG11bHRpcGx5KG1hLCBtYikge1xuICAgICAgICBpZiAobWIpIHtcbiAgICAgICAgICAgIE1hdDNGdW5jLm11bHRpcGx5KHRoaXMsIG1hLCBtYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBNYXQzRnVuYy5tdWx0aXBseSh0aGlzLCB0aGlzLCBtYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWRlbnRpdHkoKSB7XG4gICAgICAgIE1hdDNGdW5jLmlkZW50aXR5KHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb3B5KG0pIHtcbiAgICAgICAgTWF0M0Z1bmMuY29weSh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbU1hdHJpeDQobSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tUXVhdCh0aGlzLCBxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUJhc2lzKHZlYzNhLCB2ZWMzYiwgdmVjM2MpIHtcbiAgICAgICAgdGhpcy5zZXQodmVjM2FbMF0sIHZlYzNhWzFdLCB2ZWMzYVsyXSwgdmVjM2JbMF0sIHZlYzNiWzFdLCB2ZWMzYlsyXSwgdmVjM2NbMF0sIHZlYzNjWzFdLCB2ZWMzY1syXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGludmVyc2UobSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuaW52ZXJ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXROb3JtYWxNYXRyaXgobSkge1xuICAgICAgICBNYXQzRnVuYy5ub3JtYWxGcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgTWF0NEZ1bmMgZnJvbSAnLi9mdW5jdGlvbnMvTWF0NEZ1bmMuanMnO1xuXG5leHBvcnQgY2xhc3MgTWF0NCBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgbTAwID0gMSxcbiAgICAgICAgbTAxID0gMCxcbiAgICAgICAgbTAyID0gMCxcbiAgICAgICAgbTAzID0gMCxcbiAgICAgICAgbTEwID0gMCxcbiAgICAgICAgbTExID0gMSxcbiAgICAgICAgbTEyID0gMCxcbiAgICAgICAgbTEzID0gMCxcbiAgICAgICAgbTIwID0gMCxcbiAgICAgICAgbTIxID0gMCxcbiAgICAgICAgbTIyID0gMSxcbiAgICAgICAgbTIzID0gMCxcbiAgICAgICAgbTMwID0gMCxcbiAgICAgICAgbTMxID0gMCxcbiAgICAgICAgbTMyID0gMCxcbiAgICAgICAgbTMzID0gMVxuICAgICkge1xuICAgICAgICBzdXBlcihtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMTJdO1xuICAgIH1cblxuICAgIGdldCB5KCkge1xuICAgICAgICByZXR1cm4gdGhpc1sxM107XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzE0XTtcbiAgICB9XG5cbiAgICBnZXQgdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMTVdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpc1sxMl0gPSB2O1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpc1sxM10gPSB2O1xuICAgIH1cblxuICAgIHNldCB6KHYpIHtcbiAgICAgICAgdGhpc1sxNF0gPSB2O1xuICAgIH1cblxuICAgIHNldCB3KHYpIHtcbiAgICAgICAgdGhpc1sxNV0gPSB2O1xuICAgIH1cblxuICAgIHNldChtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcbiAgICAgICAgaWYgKG0wMC5sZW5ndGgpIHJldHVybiB0aGlzLmNvcHkobTAwKTtcbiAgICAgICAgTWF0NEZ1bmMuc2V0KHRoaXMsIG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZSh2LCBtID0gdGhpcykge1xuICAgICAgICBNYXQ0RnVuYy50cmFuc2xhdGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJvdGF0ZSh2LCBheGlzLCBtID0gdGhpcykge1xuICAgICAgICBNYXQ0RnVuYy5yb3RhdGUodGhpcywgbSwgdiwgYXhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjYWxlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDRGdW5jLnNjYWxlKHRoaXMsIG0sIHR5cGVvZiB2ID09PSAnbnVtYmVyJyA/IFt2LCB2LCB2XSA6IHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGQobWEsIG1iKSB7XG4gICAgICAgIGlmIChtYikgTWF0NEZ1bmMuYWRkKHRoaXMsIG1hLCBtYik7XG4gICAgICAgIGVsc2UgTWF0NEZ1bmMuYWRkKHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3ViKG1hLCBtYikge1xuICAgICAgICBpZiAobWIpIE1hdDRGdW5jLnN1YnRyYWN0KHRoaXMsIG1hLCBtYik7XG4gICAgICAgIGVsc2UgTWF0NEZ1bmMuc3VidHJhY3QodGhpcywgdGhpcywgbWEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseShtYSwgbWIpIHtcbiAgICAgICAgaWYgKCFtYS5sZW5ndGgpIHtcbiAgICAgICAgICAgIE1hdDRGdW5jLm11bHRpcGx5U2NhbGFyKHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfSBlbHNlIGlmIChtYikge1xuICAgICAgICAgICAgTWF0NEZ1bmMubXVsdGlwbHkodGhpcywgbWEsIG1iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE1hdDRGdW5jLm11bHRpcGx5KHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZGVudGl0eSgpIHtcbiAgICAgICAgTWF0NEZ1bmMuaWRlbnRpdHkodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkobSkge1xuICAgICAgICBNYXQ0RnVuYy5jb3B5KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tUGVyc3BlY3RpdmUoeyBmb3YsIGFzcGVjdCwgbmVhciwgZmFyIH0gPSB7fSkge1xuICAgICAgICBNYXQ0RnVuYy5wZXJzcGVjdGl2ZSh0aGlzLCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbU9ydGhvZ29uYWwoeyBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhciB9KSB7XG4gICAgICAgIE1hdDRGdW5jLm9ydGhvKHRoaXMsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSkge1xuICAgICAgICBNYXQ0RnVuYy5mcm9tUXVhdCh0aGlzLCBxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb24odikge1xuICAgICAgICB0aGlzLnggPSB2WzBdO1xuICAgICAgICB0aGlzLnkgPSB2WzFdO1xuICAgICAgICB0aGlzLnogPSB2WzJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnZlcnNlKG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDRGdW5jLmludmVydCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29tcG9zZShxLCBwb3MsIHNjYWxlKSB7XG4gICAgICAgIE1hdDRGdW5jLmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGUodGhpcywgcSwgcG9zLCBzY2FsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFJvdGF0aW9uKHEpIHtcbiAgICAgICAgTWF0NEZ1bmMuZ2V0Um90YXRpb24ocSwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFRyYW5zbGF0aW9uKHBvcykge1xuICAgICAgICBNYXQ0RnVuYy5nZXRUcmFuc2xhdGlvbihwb3MsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRTY2FsaW5nKHNjYWxlKSB7XG4gICAgICAgIE1hdDRGdW5jLmdldFNjYWxpbmcoc2NhbGUsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRNYXhTY2FsZU9uQXhpcygpIHtcbiAgICAgICAgcmV0dXJuIE1hdDRGdW5jLmdldE1heFNjYWxlT25BeGlzKHRoaXMpO1xuICAgIH1cblxuICAgIGxvb2tBdChleWUsIHRhcmdldCwgdXApIHtcbiAgICAgICAgTWF0NEZ1bmMudGFyZ2V0VG8odGhpcywgZXllLCB0YXJnZXQsIHVwKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZGV0ZXJtaW5hbnQoKSB7XG4gICAgICAgIHJldHVybiBNYXQ0RnVuYy5kZXRlcm1pbmFudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmcm9tQXJyYXkoYSwgbyA9IDApIHtcbiAgICAgICAgdGhpc1swXSA9IGFbb107XG4gICAgICAgIHRoaXNbMV0gPSBhW28gKyAxXTtcbiAgICAgICAgdGhpc1syXSA9IGFbbyArIDJdO1xuICAgICAgICB0aGlzWzNdID0gYVtvICsgM107XG4gICAgICAgIHRoaXNbNF0gPSBhW28gKyA0XTtcbiAgICAgICAgdGhpc1s1XSA9IGFbbyArIDVdO1xuICAgICAgICB0aGlzWzZdID0gYVtvICsgNl07XG4gICAgICAgIHRoaXNbN10gPSBhW28gKyA3XTtcbiAgICAgICAgdGhpc1s4XSA9IGFbbyArIDhdO1xuICAgICAgICB0aGlzWzldID0gYVtvICsgOV07XG4gICAgICAgIHRoaXNbMTBdID0gYVtvICsgMTBdO1xuICAgICAgICB0aGlzWzExXSA9IGFbbyArIDExXTtcbiAgICAgICAgdGhpc1sxMl0gPSBhW28gKyAxMl07XG4gICAgICAgIHRoaXNbMTNdID0gYVtvICsgMTNdO1xuICAgICAgICB0aGlzWzE0XSA9IGFbbyArIDE0XTtcbiAgICAgICAgdGhpc1sxNV0gPSBhW28gKyAxNV07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvQXJyYXkoYSA9IFtdLCBvID0gMCkge1xuICAgICAgICBhW29dID0gdGhpc1swXTtcbiAgICAgICAgYVtvICsgMV0gPSB0aGlzWzFdO1xuICAgICAgICBhW28gKyAyXSA9IHRoaXNbMl07XG4gICAgICAgIGFbbyArIDNdID0gdGhpc1szXTtcbiAgICAgICAgYVtvICsgNF0gPSB0aGlzWzRdO1xuICAgICAgICBhW28gKyA1XSA9IHRoaXNbNV07XG4gICAgICAgIGFbbyArIDZdID0gdGhpc1s2XTtcbiAgICAgICAgYVtvICsgN10gPSB0aGlzWzddO1xuICAgICAgICBhW28gKyA4XSA9IHRoaXNbOF07XG4gICAgICAgIGFbbyArIDldID0gdGhpc1s5XTtcbiAgICAgICAgYVtvICsgMTBdID0gdGhpc1sxMF07XG4gICAgICAgIGFbbyArIDExXSA9IHRoaXNbMTFdO1xuICAgICAgICBhW28gKyAxMl0gPSB0aGlzWzEyXTtcbiAgICAgICAgYVtvICsgMTNdID0gdGhpc1sxM107XG4gICAgICAgIGFbbyArIDE0XSA9IHRoaXNbMTRdO1xuICAgICAgICBhW28gKyAxNV0gPSB0aGlzWzE1XTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgUXVhdEZ1bmMgZnJvbSAnLi9mdW5jdGlvbnMvUXVhdEZ1bmMuanMnO1xuXG5leHBvcnQgY2xhc3MgUXVhdCBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDAsIHogPSAwLCB3ID0gMSkge1xuICAgICAgICBzdXBlcih4LCB5LCB6LCB3KTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9ICgpID0+IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF07XG4gICAgfVxuXG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzFdO1xuICAgIH1cblxuICAgIGdldCB6KCkge1xuICAgICAgICByZXR1cm4gdGhpc1syXTtcbiAgICB9XG5cbiAgICBnZXQgdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbM107XG4gICAgfVxuXG4gICAgc2V0IHgodikge1xuICAgICAgICB0aGlzWzBdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpc1sxXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXNbMl0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHcodikge1xuICAgICAgICB0aGlzWzNdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIGlkZW50aXR5KCkge1xuICAgICAgICBRdWF0RnVuYy5pZGVudGl0eSh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZXQoeCwgeSwgeiwgdykge1xuICAgICAgICBpZiAoeC5sZW5ndGgpIHJldHVybiB0aGlzLmNvcHkoeCk7XG4gICAgICAgIFF1YXRGdW5jLnNldCh0aGlzLCB4LCB5LCB6LCB3KTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGVYKGEpIHtcbiAgICAgICAgUXVhdEZ1bmMucm90YXRlWCh0aGlzLCB0aGlzLCBhKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGVZKGEpIHtcbiAgICAgICAgUXVhdEZ1bmMucm90YXRlWSh0aGlzLCB0aGlzLCBhKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGVaKGEpIHtcbiAgICAgICAgUXVhdEZ1bmMucm90YXRlWih0aGlzLCB0aGlzLCBhKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnZlcnNlKHEgPSB0aGlzKSB7XG4gICAgICAgIFF1YXRGdW5jLmludmVydCh0aGlzLCBxKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb25qdWdhdGUocSA9IHRoaXMpIHtcbiAgICAgICAgUXVhdEZ1bmMuY29uanVnYXRlKHRoaXMsIHEpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkocSkge1xuICAgICAgICBRdWF0RnVuYy5jb3B5KHRoaXMsIHEpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG5vcm1hbGl6ZShxID0gdGhpcykge1xuICAgICAgICBRdWF0RnVuYy5ub3JtYWxpemUodGhpcywgcSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbXVsdGlwbHkocUEsIHFCKSB7XG4gICAgICAgIGlmIChxQikge1xuICAgICAgICAgICAgUXVhdEZ1bmMubXVsdGlwbHkodGhpcywgcUEsIHFCKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFF1YXRGdW5jLm11bHRpcGx5KHRoaXMsIHRoaXMsIHFBKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRvdCh2KSB7XG4gICAgICAgIHJldHVybiBRdWF0RnVuYy5kb3QodGhpcywgdik7XG4gICAgfVxuXG4gICAgZnJvbU1hdHJpeDMobWF0cml4Mykge1xuICAgICAgICBRdWF0RnVuYy5mcm9tTWF0Myh0aGlzLCBtYXRyaXgzKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tRXVsZXIoZXVsZXIpIHtcbiAgICAgICAgUXVhdEZ1bmMuZnJvbUV1bGVyKHRoaXMsIGV1bGVyLCBldWxlci5vcmRlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21BeGlzQW5nbGUoYXhpcywgYSkge1xuICAgICAgICBRdWF0RnVuYy5zZXRBeGlzQW5nbGUodGhpcywgYXhpcywgYSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2xlcnAocSwgdCkge1xuICAgICAgICBRdWF0RnVuYy5zbGVycCh0aGlzLCB0aGlzLCBxLCB0KTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQXJyYXkoYSwgbyA9IDApIHtcbiAgICAgICAgdGhpc1swXSA9IGFbb107XG4gICAgICAgIHRoaXNbMV0gPSBhW28gKyAxXTtcbiAgICAgICAgdGhpc1syXSA9IGFbbyArIDJdO1xuICAgICAgICB0aGlzWzNdID0gYVtvICsgM107XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgYVtvICsgM10gPSB0aGlzWzNdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBWZWMzRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9WZWMzRnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBWZWMzIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgeik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICB9XG5cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzJdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpc1swXSA9IHY7XG4gICAgfVxuXG4gICAgc2V0IHkodikge1xuICAgICAgICB0aGlzWzFdID0gdjtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXNbMl0gPSB2O1xuICAgIH1cblxuICAgIHNldCh4LCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICBWZWMzRnVuYy5zZXQodGhpcywgeCwgeSwgeik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkodikge1xuICAgICAgICBWZWMzRnVuYy5jb3B5KHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGQodmEsIHZiKSB7XG4gICAgICAgIGlmICh2YikgVmVjM0Z1bmMuYWRkKHRoaXMsIHZhLCB2Yik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuYWRkKHRoaXMsIHRoaXMsIHZhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3ViKHZhLCB2Yikge1xuICAgICAgICBpZiAodmIpIFZlYzNGdW5jLnN1YnRyYWN0KHRoaXMsIHZhLCB2Yik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuc3VidHJhY3QodGhpcywgdGhpcywgdmEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseSh2KSB7XG4gICAgICAgIGlmICh2Lmxlbmd0aCkgVmVjM0Z1bmMubXVsdGlwbHkodGhpcywgdGhpcywgdik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuc2NhbGUodGhpcywgdGhpcywgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRpdmlkZSh2KSB7XG4gICAgICAgIGlmICh2Lmxlbmd0aCkgVmVjM0Z1bmMuZGl2aWRlKHRoaXMsIHRoaXMsIHYpO1xuICAgICAgICBlbHNlIFZlYzNGdW5jLnNjYWxlKHRoaXMsIHRoaXMsIDEgLyB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW52ZXJzZSh2ID0gdGhpcykge1xuICAgICAgICBWZWMzRnVuYy5pbnZlcnNlKHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBDYW4ndCB1c2UgJ2xlbmd0aCcgYXMgQXJyYXkucHJvdG90eXBlIHVzZXMgaXRcbiAgICBsZW4oKSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5sZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgZGlzdGFuY2Uodikge1xuICAgICAgICBpZiAodikgcmV0dXJuIFZlYzNGdW5jLmRpc3RhbmNlKHRoaXMsIHYpO1xuICAgICAgICBlbHNlIHJldHVybiBWZWMzRnVuYy5sZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgc3F1YXJlZExlbigpIHtcbiAgICAgICAgcmV0dXJuIFZlYzNGdW5jLnNxdWFyZWRMZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgc3F1YXJlZERpc3RhbmNlKHYpIHtcbiAgICAgICAgaWYgKHYpIHJldHVybiBWZWMzRnVuYy5zcXVhcmVkRGlzdGFuY2UodGhpcywgdik7XG4gICAgICAgIGVsc2UgcmV0dXJuIFZlYzNGdW5jLnNxdWFyZWRMZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgbmVnYXRlKHYgPSB0aGlzKSB7XG4gICAgICAgIFZlYzNGdW5jLm5lZ2F0ZSh0aGlzLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY3Jvc3ModmEsIHZiKSB7XG4gICAgICAgIGlmICh2YikgVmVjM0Z1bmMuY3Jvc3ModGhpcywgdmEsIHZiKTtcbiAgICAgICAgZWxzZSBWZWMzRnVuYy5jcm9zcyh0aGlzLCB0aGlzLCB2YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjYWxlKHYpIHtcbiAgICAgICAgVmVjM0Z1bmMuc2NhbGUodGhpcywgdGhpcywgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgVmVjM0Z1bmMubm9ybWFsaXplKHRoaXMsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkb3Qodikge1xuICAgICAgICByZXR1cm4gVmVjM0Z1bmMuZG90KHRoaXMsIHYpO1xuICAgIH1cblxuICAgIGVxdWFscyh2KSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5leGFjdEVxdWFscyh0aGlzLCB2KTtcbiAgICB9XG5cbiAgICBhcHBseU1hdHJpeDMobWF0Mykge1xuICAgICAgICBWZWMzRnVuYy50cmFuc2Zvcm1NYXQzKHRoaXMsIHRoaXMsIG1hdDMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhcHBseU1hdHJpeDQobWF0NCkge1xuICAgICAgICBWZWMzRnVuYy50cmFuc2Zvcm1NYXQ0KHRoaXMsIHRoaXMsIG1hdDQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZVJvdGF0ZU1hdHJpeDQobWF0NCkge1xuICAgICAgICBWZWMzRnVuYy5zY2FsZVJvdGF0ZU1hdDQodGhpcywgdGhpcywgbWF0NCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFwcGx5UXVhdGVybmlvbihxKSB7XG4gICAgICAgIFZlYzNGdW5jLnRyYW5zZm9ybVF1YXQodGhpcywgdGhpcywgcSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFuZ2xlKHYpIHtcbiAgICAgICAgcmV0dXJuIFZlYzNGdW5jLmFuZ2xlKHRoaXMsIHYpO1xuICAgIH1cblxuICAgIGxlcnAodiwgdCkge1xuICAgICAgICBWZWMzRnVuYy5sZXJwKHRoaXMsIHRoaXMsIHYsIHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWMzKHRoaXNbMF0sIHRoaXNbMV0sIHRoaXNbMl0pO1xuICAgIH1cblxuICAgIGZyb21BcnJheShhLCBvID0gMCkge1xuICAgICAgICB0aGlzWzBdID0gYVtvXTtcbiAgICAgICAgdGhpc1sxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzWzJdID0gYVtvICsgMl07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvQXJyYXkoYSA9IFtdLCBvID0gMCkge1xuICAgICAgICBhW29dID0gdGhpc1swXTtcbiAgICAgICAgYVtvICsgMV0gPSB0aGlzWzFdO1xuICAgICAgICBhW28gKyAyXSA9IHRoaXNbMl07XG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybURpcmVjdGlvbihtYXQ0KSB7XG4gICAgICAgIGNvbnN0IHggPSB0aGlzWzBdO1xuICAgICAgICBjb25zdCB5ID0gdGhpc1sxXTtcbiAgICAgICAgY29uc3QgeiA9IHRoaXNbMl07XG5cbiAgICAgICAgdGhpc1swXSA9IG1hdDRbMF0gKiB4ICsgbWF0NFs0XSAqIHkgKyBtYXQ0WzhdICogejtcbiAgICAgICAgdGhpc1sxXSA9IG1hdDRbMV0gKiB4ICsgbWF0NFs1XSAqIHkgKyBtYXQ0WzldICogejtcbiAgICAgICAgdGhpc1syXSA9IG1hdDRbMl0gKiB4ICsgbWF0NFs2XSAqIHkgKyBtYXQ0WzEwXSAqIHo7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG4gICAgfVxufVxuIiwiLy8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25NYXRyaXgob3V0LCBtLCBvcmRlciA9ICdZWFonKSB7XG4gICAgaWYgKG9yZGVyID09PSAnWFlaJykge1xuICAgICAgICBvdXRbMV0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVs4XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzhdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMihtWzZdLCBtWzVdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVhaJykge1xuICAgICAgICBvdXRbMF0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bOV0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs5XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKG1bOF0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVs1XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKC1tWzJdLCBtWzBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWlhZJykge1xuICAgICAgICBvdXRbMF0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVs2XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzZdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIoLW1bMl0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bNV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzFdID0gMDtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVswXSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWllYJykge1xuICAgICAgICBvdXRbMV0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bMl0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVsyXSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSAwO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMigtbVs0XSwgbVs1XSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVpYJykge1xuICAgICAgICBvdXRbMl0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVsxXSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzFdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMigtbVsyXSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSAwO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzEwXSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWFpZJykge1xuICAgICAgICBvdXRbMl0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bNF0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs0XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuIiwiY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxO1xuXG4vKipcbiAqIENvcGllcyB0aGUgdXBwZXItbGVmdCAzeDMgdmFsdWVzIGludG8gdGhlIGdpdmVuIG1hdDMuXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyAzeDMgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgICB0aGUgc291cmNlIDR4NCBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQ0KG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbNF07XG4gICAgb3V0WzRdID0gYVs1XTtcbiAgICBvdXRbNV0gPSBhWzZdO1xuICAgIG91dFs2XSA9IGFbOF07XG4gICAgb3V0WzddID0gYVs5XTtcbiAgICBvdXRbOF0gPSBhWzEwXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IHEgUXVhdGVybmlvbiB0byBjcmVhdGUgbWF0cml4IGZyb21cbiAqXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgICBsZXQgeCA9IHFbMF0sXG4gICAgICAgIHkgPSBxWzFdLFxuICAgICAgICB6ID0gcVsyXSxcbiAgICAgICAgdyA9IHFbM107XG4gICAgbGV0IHgyID0geCArIHg7XG4gICAgbGV0IHkyID0geSArIHk7XG4gICAgbGV0IHoyID0geiArIHo7XG5cbiAgICBsZXQgeHggPSB4ICogeDI7XG4gICAgbGV0IHl4ID0geSAqIHgyO1xuICAgIGxldCB5eSA9IHkgKiB5MjtcbiAgICBsZXQgenggPSB6ICogeDI7XG4gICAgbGV0IHp5ID0geiAqIHkyO1xuICAgIGxldCB6eiA9IHogKiB6MjtcbiAgICBsZXQgd3ggPSB3ICogeDI7XG4gICAgbGV0IHd5ID0gdyAqIHkyO1xuICAgIGxldCB3eiA9IHcgKiB6MjtcblxuICAgIG91dFswXSA9IDEgLSB5eSAtIHp6O1xuICAgIG91dFszXSA9IHl4IC0gd3o7XG4gICAgb3V0WzZdID0genggKyB3eTtcblxuICAgIG91dFsxXSA9IHl4ICsgd3o7XG4gICAgb3V0WzRdID0gMSAtIHh4IC0geno7XG4gICAgb3V0WzddID0genkgLSB3eDtcblxuICAgIG91dFsyXSA9IHp4IC0gd3k7XG4gICAgb3V0WzVdID0genkgKyB3eDtcbiAgICBvdXRbOF0gPSAxIC0geHggLSB5eTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbNF0gPSBhWzRdO1xuICAgIG91dFs1XSA9IGFbNV07XG4gICAgb3V0WzZdID0gYVs2XTtcbiAgICBvdXRbN10gPSBhWzddO1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xuICAgIG91dFswXSA9IG0wMDtcbiAgICBvdXRbMV0gPSBtMDE7XG4gICAgb3V0WzJdID0gbTAyO1xuICAgIG91dFszXSA9IG0xMDtcbiAgICBvdXRbNF0gPSBtMTE7XG4gICAgb3V0WzVdID0gbTEyO1xuICAgIG91dFs2XSA9IG0yMDtcbiAgICBvdXRbN10gPSBtMjE7XG4gICAgb3V0WzhdID0gbTIyO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IGEgbWF0MyB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMTtcbiAgICBvdXRbNV0gPSAwO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAgIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgICBpZiAob3V0ID09PSBhKSB7XG4gICAgICAgIGxldCBhMDEgPSBhWzFdLFxuICAgICAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgICAgIGExMiA9IGFbNV07XG4gICAgICAgIG91dFsxXSA9IGFbM107XG4gICAgICAgIG91dFsyXSA9IGFbNl07XG4gICAgICAgIG91dFszXSA9IGEwMTtcbiAgICAgICAgb3V0WzVdID0gYVs3XTtcbiAgICAgICAgb3V0WzZdID0gYTAyO1xuICAgICAgICBvdXRbN10gPSBhMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3V0WzBdID0gYVswXTtcbiAgICAgICAgb3V0WzFdID0gYVszXTtcbiAgICAgICAgb3V0WzJdID0gYVs2XTtcbiAgICAgICAgb3V0WzNdID0gYVsxXTtcbiAgICAgICAgb3V0WzRdID0gYVs0XTtcbiAgICAgICAgb3V0WzVdID0gYVs3XTtcbiAgICAgICAgb3V0WzZdID0gYVsyXTtcbiAgICAgICAgb3V0WzddID0gYVs1XTtcbiAgICAgICAgb3V0WzhdID0gYVs4XTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEludmVydHMgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdO1xuICAgIGxldCBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdO1xuICAgIGxldCBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdO1xuXG4gICAgbGV0IGIwMSA9IGEyMiAqIGExMSAtIGExMiAqIGEyMTtcbiAgICBsZXQgYjExID0gLWEyMiAqIGExMCArIGExMiAqIGEyMDtcbiAgICBsZXQgYjIxID0gYTIxICogYTEwIC0gYTExICogYTIwO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgIGxldCBkZXQgPSBhMDAgKiBiMDEgKyBhMDEgKiBiMTEgKyBhMDIgKiBiMjE7XG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgb3V0WzBdID0gYjAxICogZGV0O1xuICAgIG91dFsxXSA9ICgtYTIyICogYTAxICsgYTAyICogYTIxKSAqIGRldDtcbiAgICBvdXRbMl0gPSAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGRldDtcbiAgICBvdXRbM10gPSBiMTEgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGEyMiAqIGEwMCAtIGEwMiAqIGEyMCkgKiBkZXQ7XG4gICAgb3V0WzVdID0gKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogZGV0O1xuICAgIG91dFs2XSA9IGIyMSAqIGRldDtcbiAgICBvdXRbN10gPSAoLWEyMSAqIGEwMCArIGEwMSAqIGEyMCkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBkZXQ7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXTtcbiAgICBsZXQgYTEwID0gYVszXSxcbiAgICAgICAgYTExID0gYVs0XSxcbiAgICAgICAgYTEyID0gYVs1XTtcbiAgICBsZXQgYTIwID0gYVs2XSxcbiAgICAgICAgYTIxID0gYVs3XSxcbiAgICAgICAgYTIyID0gYVs4XTtcblxuICAgIHJldHVybiBhMDAgKiAoYTIyICogYTExIC0gYTEyICogYTIxKSArIGEwMSAqICgtYTIyICogYTEwICsgYTEyICogYTIwKSArIGEwMiAqIChhMjEgKiBhMTAgLSBhMTEgKiBhMjApO1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDMnc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdO1xuICAgIGxldCBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdO1xuICAgIGxldCBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdO1xuXG4gICAgbGV0IGIwMCA9IGJbMF0sXG4gICAgICAgIGIwMSA9IGJbMV0sXG4gICAgICAgIGIwMiA9IGJbMl07XG4gICAgbGV0IGIxMCA9IGJbM10sXG4gICAgICAgIGIxMSA9IGJbNF0sXG4gICAgICAgIGIxMiA9IGJbNV07XG4gICAgbGV0IGIyMCA9IGJbNl0sXG4gICAgICAgIGIyMSA9IGJbN10sXG4gICAgICAgIGIyMiA9IGJbOF07XG5cbiAgICBvdXRbMF0gPSBiMDAgKiBhMDAgKyBiMDEgKiBhMTAgKyBiMDIgKiBhMjA7XG4gICAgb3V0WzFdID0gYjAwICogYTAxICsgYjAxICogYTExICsgYjAyICogYTIxO1xuICAgIG91dFsyXSA9IGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMiAqIGEyMjtcblxuICAgIG91dFszXSA9IGIxMCAqIGEwMCArIGIxMSAqIGExMCArIGIxMiAqIGEyMDtcbiAgICBvdXRbNF0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjE7XG4gICAgb3V0WzVdID0gYjEwICogYTAyICsgYjExICogYTEyICsgYjEyICogYTIyO1xuXG4gICAgb3V0WzZdID0gYjIwICogYTAwICsgYjIxICogYTEwICsgYjIyICogYTIwO1xuICAgIG91dFs3XSA9IGIyMCAqIGEwMSArIGIyMSAqIGExMSArIGIyMiAqIGEyMTtcbiAgICBvdXRbOF0gPSBiMjAgKiBhMDIgKyBiMjEgKiBhMTIgKyBiMjIgKiBhMjI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdGUgYSBtYXQzIGJ5IHRoZSBnaXZlbiB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdLFxuICAgICAgICBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdLFxuICAgICAgICB4ID0gdlswXSxcbiAgICAgICAgeSA9IHZbMV07XG5cbiAgICBvdXRbMF0gPSBhMDA7XG4gICAgb3V0WzFdID0gYTAxO1xuICAgIG91dFsyXSA9IGEwMjtcblxuICAgIG91dFszXSA9IGExMDtcbiAgICBvdXRbNF0gPSBhMTE7XG4gICAgb3V0WzVdID0gYTEyO1xuXG4gICAgb3V0WzZdID0geCAqIGEwMCArIHkgKiBhMTAgKyBhMjA7XG4gICAgb3V0WzddID0geCAqIGEwMSArIHkgKiBhMTEgKyBhMjE7XG4gICAgb3V0WzhdID0geCAqIGEwMiArIHkgKiBhMTIgKyBhMjI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0MyBieSB0aGUgZ2l2ZW4gYW5nbGVcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGExMCA9IGFbM10sXG4gICAgICAgIGExMSA9IGFbNF0sXG4gICAgICAgIGExMiA9IGFbNV0sXG4gICAgICAgIGEyMCA9IGFbNl0sXG4gICAgICAgIGEyMSA9IGFbN10sXG4gICAgICAgIGEyMiA9IGFbOF0sXG4gICAgICAgIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGMgKiBhMDAgKyBzICogYTEwO1xuICAgIG91dFsxXSA9IGMgKiBhMDEgKyBzICogYTExO1xuICAgIG91dFsyXSA9IGMgKiBhMDIgKyBzICogYTEyO1xuXG4gICAgb3V0WzNdID0gYyAqIGExMCAtIHMgKiBhMDA7XG4gICAgb3V0WzRdID0gYyAqIGExMSAtIHMgKiBhMDE7XG4gICAgb3V0WzVdID0gYyAqIGExMiAtIHMgKiBhMDI7XG5cbiAgICBvdXRbNl0gPSBhMjA7XG4gICAgb3V0WzddID0gYTIxO1xuICAgIG91dFs4XSA9IGEyMjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0MyBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7dmVjMn0gdiB0aGUgdmVjMiB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKiovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XG4gICAgbGV0IHggPSB2WzBdLFxuICAgICAgICB5ID0gdlsxXTtcblxuICAgIG91dFswXSA9IHggKiBhWzBdO1xuICAgIG91dFsxXSA9IHggKiBhWzFdO1xuICAgIG91dFsyXSA9IHggKiBhWzJdO1xuXG4gICAgb3V0WzNdID0geSAqIGFbM107XG4gICAgb3V0WzRdID0geSAqIGFbNF07XG4gICAgb3V0WzVdID0geSAqIGFbNV07XG5cbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbm9ybWFsIG1hdHJpeCAodHJhbnNwb3NlIGludmVyc2UpIGZyb20gdGhlIDR4NCBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge21hdDR9IGEgTWF0NCB0byBkZXJpdmUgdGhlIG5vcm1hbCBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbEZyb21NYXQ0KG91dCwgYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICAgIGxldCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gICAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICAgIGxldCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gICAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICAgIGxldCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gICAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICAgIGxldCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgbGV0IGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICAgIGlmICghZGV0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvdXRbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGRldDtcbiAgICBvdXRbMV0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcbiAgICBvdXRbMl0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcblxuICAgIG91dFszXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xuICAgIG91dFs0XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xuICAgIG91dFs1XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuXG4gICAgb3V0WzZdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzddID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIDJEIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCBvZiB5b3VyIGdsIGNvbnRleHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgSGVpZ2h0IG9mIGdsIGNvbnRleHRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3Rpb24ob3V0LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgb3V0WzBdID0gMiAvIHdpZHRoO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IC0yIC8gaGVpZ2h0O1xuICAgIG91dFs1XSA9IDA7XG4gICAgb3V0WzZdID0gLTE7XG4gICAgb3V0WzddID0gMTtcbiAgICBvdXRbOF0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gbWF0MydzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICAgIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICAgIG91dFs3XSA9IGFbN10gKyBiWzddO1xuICAgIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgb3V0WzRdID0gYVs0XSAqIGI7XG4gICAgb3V0WzVdID0gYVs1XSAqIGI7XG4gICAgb3V0WzZdID0gYVs2XSAqIGI7XG4gICAgb3V0WzddID0gYVs3XSAqIGI7XG4gICAgb3V0WzhdID0gYVs4XSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsImNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0NCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs1XTtcbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICBvdXRbOV0gPSBhWzldO1xuICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxMV07XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0NCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMykge1xuICAgIG91dFswXSA9IG0wMDtcbiAgICBvdXRbMV0gPSBtMDE7XG4gICAgb3V0WzJdID0gbTAyO1xuICAgIG91dFszXSA9IG0wMztcbiAgICBvdXRbNF0gPSBtMTA7XG4gICAgb3V0WzVdID0gbTExO1xuICAgIG91dFs2XSA9IG0xMjtcbiAgICBvdXRbN10gPSBtMTM7XG4gICAgb3V0WzhdID0gbTIwO1xuICAgIG91dFs5XSA9IG0yMTtcbiAgICBvdXRbMTBdID0gbTIyO1xuICAgIG91dFsxMV0gPSBtMjM7XG4gICAgb3V0WzEyXSA9IG0zMDtcbiAgICBvdXRbMTNdID0gbTMxO1xuICAgIG91dFsxNF0gPSBtMzI7XG4gICAgb3V0WzE1XSA9IG0zMztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCBhIG1hdDQgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgICBvdXRbMF0gPSAxO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDA7XG4gICAgb3V0WzVdID0gMTtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMDtcbiAgICBvdXRbOV0gPSAwO1xuICAgIG91dFsxMF0gPSAxO1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSAwO1xuICAgIG91dFsxM10gPSAwO1xuICAgIG91dFsxNF0gPSAwO1xuICAgIG91dFsxNV0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAgIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgICBpZiAob3V0ID09PSBhKSB7XG4gICAgICAgIGxldCBhMDEgPSBhWzFdLFxuICAgICAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgICAgIGEwMyA9IGFbM107XG4gICAgICAgIGxldCBhMTIgPSBhWzZdLFxuICAgICAgICAgICAgYTEzID0gYVs3XTtcbiAgICAgICAgbGV0IGEyMyA9IGFbMTFdO1xuXG4gICAgICAgIG91dFsxXSA9IGFbNF07XG4gICAgICAgIG91dFsyXSA9IGFbOF07XG4gICAgICAgIG91dFszXSA9IGFbMTJdO1xuICAgICAgICBvdXRbNF0gPSBhMDE7XG4gICAgICAgIG91dFs2XSA9IGFbOV07XG4gICAgICAgIG91dFs3XSA9IGFbMTNdO1xuICAgICAgICBvdXRbOF0gPSBhMDI7XG4gICAgICAgIG91dFs5XSA9IGExMjtcbiAgICAgICAgb3V0WzExXSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTJdID0gYTAzO1xuICAgICAgICBvdXRbMTNdID0gYTEzO1xuICAgICAgICBvdXRbMTRdID0gYTIzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG91dFswXSA9IGFbMF07XG4gICAgICAgIG91dFsxXSA9IGFbNF07XG4gICAgICAgIG91dFsyXSA9IGFbOF07XG4gICAgICAgIG91dFszXSA9IGFbMTJdO1xuICAgICAgICBvdXRbNF0gPSBhWzFdO1xuICAgICAgICBvdXRbNV0gPSBhWzVdO1xuICAgICAgICBvdXRbNl0gPSBhWzldO1xuICAgICAgICBvdXRbN10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzhdID0gYVsyXTtcbiAgICAgICAgb3V0WzldID0gYVs2XTtcbiAgICAgICAgb3V0WzEwXSA9IGFbMTBdO1xuICAgICAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgICAgIG91dFsxMl0gPSBhWzNdO1xuICAgICAgICBvdXRbMTNdID0gYVs3XTtcbiAgICAgICAgb3V0WzE0XSA9IGFbMTFdO1xuICAgICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBJbnZlcnRzIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTAzID0gYVszXTtcbiAgICBsZXQgYTEwID0gYVs0XSxcbiAgICAgICAgYTExID0gYVs1XSxcbiAgICAgICAgYTEyID0gYVs2XSxcbiAgICAgICAgYTEzID0gYVs3XTtcbiAgICBsZXQgYTIwID0gYVs4XSxcbiAgICAgICAgYTIxID0gYVs5XSxcbiAgICAgICAgYTIyID0gYVsxMF0sXG4gICAgICAgIGEyMyA9IGFbMTFdO1xuICAgIGxldCBhMzAgPSBhWzEyXSxcbiAgICAgICAgYTMxID0gYVsxM10sXG4gICAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgICBhMzMgPSBhWzE1XTtcblxuICAgIGxldCBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gICAgbGV0IGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgICBsZXQgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xuICAgIGxldCBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gICAgbGV0IGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgICBsZXQgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xuICAgIGxldCBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XG4gICAgbGV0IGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgICBsZXQgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xuICAgIGxldCBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XG4gICAgbGV0IGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgICBsZXQgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzFdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzddID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzEwXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xuICAgIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDtcbiAgICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzEzXSA9IChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogZGV0O1xuICAgIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDtcbiAgICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICAgIGxldCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gICAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICAgIGxldCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gICAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICAgIGxldCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gICAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICAgIGxldCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgcmV0dXJuIGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQ0c1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgLy8gQ2FjaGUgb25seSB0aGUgY3VycmVudCBsaW5lIG9mIHRoZSBzZWNvbmQgbWF0cml4XG4gICAgbGV0IGIwID0gYlswXSxcbiAgICAgICAgYjEgPSBiWzFdLFxuICAgICAgICBiMiA9IGJbMl0sXG4gICAgICAgIGIzID0gYlszXTtcbiAgICBvdXRbMF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgICBvdXRbMV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgICBvdXRbMl0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgICBvdXRbM10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcblxuICAgIGIwID0gYls0XTtcbiAgICBiMSA9IGJbNV07XG4gICAgYjIgPSBiWzZdO1xuICAgIGIzID0gYls3XTtcbiAgICBvdXRbNF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgICBvdXRbNV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgICBvdXRbNl0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgICBvdXRbN10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcblxuICAgIGIwID0gYls4XTtcbiAgICBiMSA9IGJbOV07XG4gICAgYjIgPSBiWzEwXTtcbiAgICBiMyA9IGJbMTFdO1xuICAgIG91dFs4XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICAgIG91dFs5XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICAgIG91dFsxMF0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgICBvdXRbMTFdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XG5cbiAgICBiMCA9IGJbMTJdO1xuICAgIGIxID0gYlsxM107XG4gICAgYjIgPSBiWzE0XTtcbiAgICBiMyA9IGJbMTVdO1xuICAgIG91dFsxMl0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgICBvdXRbMTNdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gICAgb3V0WzE0XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICAgIG91dFsxNV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSBhIG1hdDQgYnkgdGhlIGdpdmVuIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcbiAqIEBwYXJhbSB7dmVjM30gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUob3V0LCBhLCB2KSB7XG4gICAgbGV0IHggPSB2WzBdLFxuICAgICAgICB5ID0gdlsxXSxcbiAgICAgICAgeiA9IHZbMl07XG4gICAgbGV0IGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgICBsZXQgYTEwLCBhMTEsIGExMiwgYTEzO1xuICAgIGxldCBhMjAsIGEyMSwgYTIyLCBhMjM7XG5cbiAgICBpZiAoYSA9PT0gb3V0KSB7XG4gICAgICAgIG91dFsxMl0gPSBhWzBdICogeCArIGFbNF0gKiB5ICsgYVs4XSAqIHogKyBhWzEyXTtcbiAgICAgICAgb3V0WzEzXSA9IGFbMV0gKiB4ICsgYVs1XSAqIHkgKyBhWzldICogeiArIGFbMTNdO1xuICAgICAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYVszXSAqIHggKyBhWzddICogeSArIGFbMTFdICogeiArIGFbMTVdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGEwMCA9IGFbMF07XG4gICAgICAgIGEwMSA9IGFbMV07XG4gICAgICAgIGEwMiA9IGFbMl07XG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgICAgIGExMCA9IGFbNF07XG4gICAgICAgIGExMSA9IGFbNV07XG4gICAgICAgIGExMiA9IGFbNl07XG4gICAgICAgIGExMyA9IGFbN107XG4gICAgICAgIGEyMCA9IGFbOF07XG4gICAgICAgIGEyMSA9IGFbOV07XG4gICAgICAgIGEyMiA9IGFbMTBdO1xuICAgICAgICBhMjMgPSBhWzExXTtcblxuICAgICAgICBvdXRbMF0gPSBhMDA7XG4gICAgICAgIG91dFsxXSA9IGEwMTtcbiAgICAgICAgb3V0WzJdID0gYTAyO1xuICAgICAgICBvdXRbM10gPSBhMDM7XG4gICAgICAgIG91dFs0XSA9IGExMDtcbiAgICAgICAgb3V0WzVdID0gYTExO1xuICAgICAgICBvdXRbNl0gPSBhMTI7XG4gICAgICAgIG91dFs3XSA9IGExMztcbiAgICAgICAgb3V0WzhdID0gYTIwO1xuICAgICAgICBvdXRbOV0gPSBhMjE7XG4gICAgICAgIG91dFsxMF0gPSBhMjI7XG4gICAgICAgIG91dFsxMV0gPSBhMjM7XG5cbiAgICAgICAgb3V0WzEyXSA9IGEwMCAqIHggKyBhMTAgKiB5ICsgYTIwICogeiArIGFbMTJdO1xuICAgICAgICBvdXRbMTNdID0gYTAxICogeCArIGExMSAqIHkgKyBhMjEgKiB6ICsgYVsxM107XG4gICAgICAgIG91dFsxNF0gPSBhMDIgKiB4ICsgYTEyICogeSArIGEyMiAqIHogKyBhWzE0XTtcbiAgICAgICAgb3V0WzE1XSA9IGEwMyAqIHggKyBhMTMgKiB5ICsgYTIzICogeiArIGFbMTVdO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2NhbGVzIHRoZSBtYXQ0IGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMzIG5vdCB1c2luZyB2ZWN0b3JpemF0aW9uXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge3ZlYzN9IHYgdGhlIHZlYzMgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICAgIGxldCB4ID0gdlswXSxcbiAgICAgICAgeSA9IHZbMV0sXG4gICAgICAgIHogPSB2WzJdO1xuXG4gICAgb3V0WzBdID0gYVswXSAqIHg7XG4gICAgb3V0WzFdID0gYVsxXSAqIHg7XG4gICAgb3V0WzJdID0gYVsyXSAqIHg7XG4gICAgb3V0WzNdID0gYVszXSAqIHg7XG4gICAgb3V0WzRdID0gYVs0XSAqIHk7XG4gICAgb3V0WzVdID0gYVs1XSAqIHk7XG4gICAgb3V0WzZdID0gYVs2XSAqIHk7XG4gICAgb3V0WzddID0gYVs3XSAqIHk7XG4gICAgb3V0WzhdID0gYVs4XSAqIHo7XG4gICAgb3V0WzldID0gYVs5XSAqIHo7XG4gICAgb3V0WzEwXSA9IGFbMTBdICogejtcbiAgICBvdXRbMTFdID0gYVsxMV0gKiB6O1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgYSBtYXQ0IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIGdpdmVuIGF4aXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCwgYXhpcykge1xuICAgIGxldCB4ID0gYXhpc1swXSxcbiAgICAgICAgeSA9IGF4aXNbMV0sXG4gICAgICAgIHogPSBheGlzWzJdO1xuICAgIGxldCBsZW4gPSBNYXRoLmh5cG90KHgsIHksIHopO1xuICAgIGxldCBzLCBjLCB0O1xuICAgIGxldCBhMDAsIGEwMSwgYTAyLCBhMDM7XG4gICAgbGV0IGExMCwgYTExLCBhMTIsIGExMztcbiAgICBsZXQgYTIwLCBhMjEsIGEyMiwgYTIzO1xuICAgIGxldCBiMDAsIGIwMSwgYjAyO1xuICAgIGxldCBiMTAsIGIxMSwgYjEyO1xuICAgIGxldCBiMjAsIGIyMSwgYjIyO1xuXG4gICAgaWYgKE1hdGguYWJzKGxlbikgPCBFUFNJTE9OKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxlbiA9IDEgLyBsZW47XG4gICAgeCAqPSBsZW47XG4gICAgeSAqPSBsZW47XG4gICAgeiAqPSBsZW47XG5cbiAgICBzID0gTWF0aC5zaW4ocmFkKTtcbiAgICBjID0gTWF0aC5jb3MocmFkKTtcbiAgICB0ID0gMSAtIGM7XG5cbiAgICBhMDAgPSBhWzBdO1xuICAgIGEwMSA9IGFbMV07XG4gICAgYTAyID0gYVsyXTtcbiAgICBhMDMgPSBhWzNdO1xuICAgIGExMCA9IGFbNF07XG4gICAgYTExID0gYVs1XTtcbiAgICBhMTIgPSBhWzZdO1xuICAgIGExMyA9IGFbN107XG4gICAgYTIwID0gYVs4XTtcbiAgICBhMjEgPSBhWzldO1xuICAgIGEyMiA9IGFbMTBdO1xuICAgIGEyMyA9IGFbMTFdO1xuXG4gICAgLy8gQ29uc3RydWN0IHRoZSBlbGVtZW50cyBvZiB0aGUgcm90YXRpb24gbWF0cml4XG4gICAgYjAwID0geCAqIHggKiB0ICsgYztcbiAgICBiMDEgPSB5ICogeCAqIHQgKyB6ICogcztcbiAgICBiMDIgPSB6ICogeCAqIHQgLSB5ICogcztcbiAgICBiMTAgPSB4ICogeSAqIHQgLSB6ICogcztcbiAgICBiMTEgPSB5ICogeSAqIHQgKyBjO1xuICAgIGIxMiA9IHogKiB5ICogdCArIHggKiBzO1xuICAgIGIyMCA9IHggKiB6ICogdCArIHkgKiBzO1xuICAgIGIyMSA9IHkgKiB6ICogdCAtIHggKiBzO1xuICAgIGIyMiA9IHogKiB6ICogdCArIGM7XG5cbiAgICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIG91dFswXSA9IGEwMCAqIGIwMCArIGExMCAqIGIwMSArIGEyMCAqIGIwMjtcbiAgICBvdXRbMV0gPSBhMDEgKiBiMDAgKyBhMTEgKiBiMDEgKyBhMjEgKiBiMDI7XG4gICAgb3V0WzJdID0gYTAyICogYjAwICsgYTEyICogYjAxICsgYTIyICogYjAyO1xuICAgIG91dFszXSA9IGEwMyAqIGIwMCArIGExMyAqIGIwMSArIGEyMyAqIGIwMjtcbiAgICBvdXRbNF0gPSBhMDAgKiBiMTAgKyBhMTAgKiBiMTEgKyBhMjAgKiBiMTI7XG4gICAgb3V0WzVdID0gYTAxICogYjEwICsgYTExICogYjExICsgYTIxICogYjEyO1xuICAgIG91dFs2XSA9IGEwMiAqIGIxMCArIGExMiAqIGIxMSArIGEyMiAqIGIxMjtcbiAgICBvdXRbN10gPSBhMDMgKiBiMTAgKyBhMTMgKiBiMTEgKyBhMjMgKiBiMTI7XG4gICAgb3V0WzhdID0gYTAwICogYjIwICsgYTEwICogYjIxICsgYTIwICogYjIyO1xuICAgIG91dFs5XSA9IGEwMSAqIGIyMCArIGExMSAqIGIyMSArIGEyMSAqIGIyMjtcbiAgICBvdXRbMTBdID0gYTAyICogYjIwICsgYTEyICogYjIxICsgYTIyICogYjIyO1xuICAgIG91dFsxMV0gPSBhMDMgKiBiMjAgKyBhMTMgKiBiMjEgKyBhMjMgKiBiMjI7XG5cbiAgICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICAgICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgICAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IgY29tcG9uZW50IG9mIGEgdHJhbnNmb3JtYXRpb25cbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sXG4gKiAgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3JcbiAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHRyYW5zbGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtICB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24ob3V0LCBtYXQpIHtcbiAgICBvdXRbMF0gPSBtYXRbMTJdO1xuICAgIG91dFsxXSA9IG1hdFsxM107XG4gICAgb3V0WzJdID0gbWF0WzE0XTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2NhbGluZyBmYWN0b3IgY29tcG9uZW50IG9mIGEgdHJhbnNmb3JtYXRpb25cbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZVxuICogIHdpdGggYSBub3JtYWxpemVkIFF1YXRlcm5pb24gcGFyYW10ZXIsIHRoZSByZXR1cm5lZCB2ZWN0b3Igd2lsbCBiZVxuICogIHRoZSBzYW1lIGFzIHRoZSBzY2FsaW5nIHZlY3RvclxuICogIG9yaWdpbmFsbHkgc3VwcGxpZWQuXG4gKiBAcGFyYW0gIHt2ZWMzfSBvdXQgVmVjdG9yIHRvIHJlY2VpdmUgc2NhbGluZyBmYWN0b3IgY29tcG9uZW50XG4gKiBAcGFyYW0gIHttYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxuICogQHJldHVybiB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2FsaW5nKG91dCwgbWF0KSB7XG4gICAgbGV0IG0xMSA9IG1hdFswXTtcbiAgICBsZXQgbTEyID0gbWF0WzFdO1xuICAgIGxldCBtMTMgPSBtYXRbMl07XG4gICAgbGV0IG0yMSA9IG1hdFs0XTtcbiAgICBsZXQgbTIyID0gbWF0WzVdO1xuICAgIGxldCBtMjMgPSBtYXRbNl07XG4gICAgbGV0IG0zMSA9IG1hdFs4XTtcbiAgICBsZXQgbTMyID0gbWF0WzldO1xuICAgIGxldCBtMzMgPSBtYXRbMTBdO1xuXG4gICAgb3V0WzBdID0gTWF0aC5oeXBvdChtMTEsIG0xMiwgbTEzKTtcbiAgICBvdXRbMV0gPSBNYXRoLmh5cG90KG0yMSwgbTIyLCBtMjMpO1xuICAgIG91dFsyXSA9IE1hdGguaHlwb3QobTMxLCBtMzIsIG0zMyk7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWF4U2NhbGVPbkF4aXMobWF0KSB7XG4gICAgbGV0IG0xMSA9IG1hdFswXTtcbiAgICBsZXQgbTEyID0gbWF0WzFdO1xuICAgIGxldCBtMTMgPSBtYXRbMl07XG4gICAgbGV0IG0yMSA9IG1hdFs0XTtcbiAgICBsZXQgbTIyID0gbWF0WzVdO1xuICAgIGxldCBtMjMgPSBtYXRbNl07XG4gICAgbGV0IG0zMSA9IG1hdFs4XTtcbiAgICBsZXQgbTMyID0gbWF0WzldO1xuICAgIGxldCBtMzMgPSBtYXRbMTBdO1xuXG4gICAgY29uc3QgeCA9IG0xMSAqIG0xMSArIG0xMiAqIG0xMiArIG0xMyAqIG0xMztcbiAgICBjb25zdCB5ID0gbTIxICogbTIxICsgbTIyICogbTIyICsgbTIzICogbTIzO1xuICAgIGNvbnN0IHogPSBtMzEgKiBtMzEgKyBtMzIgKiBtMzIgKyBtMzMgKiBtMzM7XG5cbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgubWF4KHgsIHksIHopKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uYWwgY29tcG9uZW50XG4gKiAgb2YgYSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGhcbiAqICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbiwgdGhlIHJldHVybmVkIHF1YXRlcm5pb24gd2lsbCBiZSB0aGVcbiAqICBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIG9yaWdpbmFsbHkgc3VwcGxpZWQuXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBRdWF0ZXJuaW9uIHRvIHJlY2VpdmUgdGhlIHJvdGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtIHttYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxuICogQHJldHVybiB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRSb3RhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdGVtcCA9IFsxLCAxLCAxXTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAob3V0LCBtYXQpIHtcbiAgICAgICAgbGV0IHNjYWxpbmcgPSB0ZW1wO1xuICAgICAgICBnZXRTY2FsaW5nKHNjYWxpbmcsIG1hdCk7XG5cbiAgICAgICAgbGV0IGlzMSA9IDEgLyBzY2FsaW5nWzBdO1xuICAgICAgICBsZXQgaXMyID0gMSAvIHNjYWxpbmdbMV07XG4gICAgICAgIGxldCBpczMgPSAxIC8gc2NhbGluZ1syXTtcblxuICAgICAgICBsZXQgc20xMSA9IG1hdFswXSAqIGlzMTtcbiAgICAgICAgbGV0IHNtMTIgPSBtYXRbMV0gKiBpczI7XG4gICAgICAgIGxldCBzbTEzID0gbWF0WzJdICogaXMzO1xuICAgICAgICBsZXQgc20yMSA9IG1hdFs0XSAqIGlzMTtcbiAgICAgICAgbGV0IHNtMjIgPSBtYXRbNV0gKiBpczI7XG4gICAgICAgIGxldCBzbTIzID0gbWF0WzZdICogaXMzO1xuICAgICAgICBsZXQgc20zMSA9IG1hdFs4XSAqIGlzMTtcbiAgICAgICAgbGV0IHNtMzIgPSBtYXRbOV0gKiBpczI7XG4gICAgICAgIGxldCBzbTMzID0gbWF0WzEwXSAqIGlzMztcblxuICAgICAgICBsZXQgdHJhY2UgPSBzbTExICsgc20yMiArIHNtMzM7XG4gICAgICAgIGxldCBTID0gMDtcblxuICAgICAgICBpZiAodHJhY2UgPiAwKSB7XG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KHRyYWNlICsgMS4wKSAqIDI7XG4gICAgICAgICAgICBvdXRbM10gPSAwLjI1ICogUztcbiAgICAgICAgICAgIG91dFswXSA9IChzbTIzIC0gc20zMikgLyBTO1xuICAgICAgICAgICAgb3V0WzFdID0gKHNtMzEgLSBzbTEzKSAvIFM7XG4gICAgICAgICAgICBvdXRbMl0gPSAoc20xMiAtIHNtMjEpIC8gUztcbiAgICAgICAgfSBlbHNlIGlmIChzbTExID4gc20yMiAmJiBzbTExID4gc20zMykge1xuICAgICAgICAgICAgUyA9IE1hdGguc3FydCgxLjAgKyBzbTExIC0gc20yMiAtIHNtMzMpICogMjtcbiAgICAgICAgICAgIG91dFszXSA9IChzbTIzIC0gc20zMikgLyBTO1xuICAgICAgICAgICAgb3V0WzBdID0gMC4yNSAqIFM7XG4gICAgICAgICAgICBvdXRbMV0gPSAoc20xMiArIHNtMjEpIC8gUztcbiAgICAgICAgICAgIG91dFsyXSA9IChzbTMxICsgc20xMykgLyBTO1xuICAgICAgICB9IGVsc2UgaWYgKHNtMjIgPiBzbTMzKSB7XG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMjIgLSBzbTExIC0gc20zMykgKiAyO1xuICAgICAgICAgICAgb3V0WzNdID0gKHNtMzEgLSBzbTEzKSAvIFM7XG4gICAgICAgICAgICBvdXRbMF0gPSAoc20xMiArIHNtMjEpIC8gUztcbiAgICAgICAgICAgIG91dFsxXSA9IDAuMjUgKiBTO1xuICAgICAgICAgICAgb3V0WzJdID0gKHNtMjMgKyBzbTMyKSAvIFM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMzMgLSBzbTExIC0gc20yMikgKiAyO1xuICAgICAgICAgICAgb3V0WzNdID0gKHNtMTIgLSBzbTIxKSAvIFM7XG4gICAgICAgICAgICBvdXRbMF0gPSAoc20zMSArIHNtMTMpIC8gUztcbiAgICAgICAgICAgIG91dFsxXSA9IChzbTIzICsgc20zMikgLyBTO1xuICAgICAgICAgICAgb3V0WzJdID0gMC4yNSAqIFM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG59KSgpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24sIHZlY3RvciB0cmFuc2xhdGlvbiBhbmQgdmVjdG9yIHNjYWxlXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xuICogICAgIGxldCBxdWF0TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5tdWx0aXBseShkZXN0LCBxdWF0TWF0KTtcbiAqICAgICBtYXQ0LnNjYWxlKGRlc3QsIHNjYWxlKVxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxuICogQHBhcmFtIHt2ZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBzIFNjYWxpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlKG91dCwgcSwgdiwgcykge1xuICAgIC8vIFF1YXRlcm5pb24gbWF0aFxuICAgIGxldCB4ID0gcVswXSxcbiAgICAgICAgeSA9IHFbMV0sXG4gICAgICAgIHogPSBxWzJdLFxuICAgICAgICB3ID0gcVszXTtcbiAgICBsZXQgeDIgPSB4ICsgeDtcbiAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICBsZXQgejIgPSB6ICsgejtcblxuICAgIGxldCB4eCA9IHggKiB4MjtcbiAgICBsZXQgeHkgPSB4ICogeTI7XG4gICAgbGV0IHh6ID0geCAqIHoyO1xuICAgIGxldCB5eSA9IHkgKiB5MjtcbiAgICBsZXQgeXogPSB5ICogejI7XG4gICAgbGV0IHp6ID0geiAqIHoyO1xuICAgIGxldCB3eCA9IHcgKiB4MjtcbiAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgbGV0IHd6ID0gdyAqIHoyO1xuICAgIGxldCBzeCA9IHNbMF07XG4gICAgbGV0IHN5ID0gc1sxXTtcbiAgICBsZXQgc3ogPSBzWzJdO1xuXG4gICAgb3V0WzBdID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gICAgb3V0WzFdID0gKHh5ICsgd3opICogc3g7XG4gICAgb3V0WzJdID0gKHh6IC0gd3kpICogc3g7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAoeHkgLSB3eikgKiBzeTtcbiAgICBvdXRbNV0gPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcbiAgICBvdXRbNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9ICh4eiArIHd5KSAqIHN6O1xuICAgIG91dFs5XSA9ICh5eiAtIHd4KSAqIHN6O1xuICAgIG91dFsxMF0gPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gdlswXTtcbiAgICBvdXRbMTNdID0gdlsxXTtcbiAgICBvdXRbMTRdID0gdlsyXTtcbiAgICBvdXRbMTVdID0gMTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDR4NCBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21RdWF0KG91dCwgcSkge1xuICAgIGxldCB4ID0gcVswXSxcbiAgICAgICAgeSA9IHFbMV0sXG4gICAgICAgIHogPSBxWzJdLFxuICAgICAgICB3ID0gcVszXTtcbiAgICBsZXQgeDIgPSB4ICsgeDtcbiAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICBsZXQgejIgPSB6ICsgejtcblxuICAgIGxldCB4eCA9IHggKiB4MjtcbiAgICBsZXQgeXggPSB5ICogeDI7XG4gICAgbGV0IHl5ID0geSAqIHkyO1xuICAgIGxldCB6eCA9IHogKiB4MjtcbiAgICBsZXQgenkgPSB6ICogeTI7XG4gICAgbGV0IHp6ID0geiAqIHoyO1xuICAgIGxldCB3eCA9IHcgKiB4MjtcbiAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgbGV0IHd6ID0gdyAqIHoyO1xuXG4gICAgb3V0WzBdID0gMSAtIHl5IC0geno7XG4gICAgb3V0WzFdID0geXggKyB3ejtcbiAgICBvdXRbMl0gPSB6eCAtIHd5O1xuICAgIG91dFszXSA9IDA7XG5cbiAgICBvdXRbNF0gPSB5eCAtIHd6O1xuICAgIG91dFs1XSA9IDEgLSB4eCAtIHp6O1xuICAgIG91dFs2XSA9IHp5ICsgd3g7XG4gICAgb3V0WzddID0gMDtcblxuICAgIG91dFs4XSA9IHp4ICsgd3k7XG4gICAgb3V0WzldID0genkgLSB3eDtcbiAgICBvdXRbMTBdID0gMSAtIHh4IC0geXk7XG4gICAgb3V0WzExXSA9IDA7XG5cbiAgICBvdXRbMTJdID0gMDtcbiAgICBvdXRbMTNdID0gMDtcbiAgICBvdXRbMTRdID0gMDtcbiAgICBvdXRbMTVdID0gMTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlKG91dCwgZm92eSwgYXNwZWN0LCBuZWFyLCBmYXIpIHtcbiAgICBsZXQgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKTtcbiAgICBsZXQgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICAgIG91dFswXSA9IGYgLyBhc3BlY3Q7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSBmO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG91dFsxMV0gPSAtMTtcbiAgICBvdXRbMTJdID0gMDtcbiAgICBvdXRbMTNdID0gMDtcbiAgICBvdXRbMTRdID0gMiAqIGZhciAqIG5lYXIgKiBuZjtcbiAgICBvdXRbMTVdID0gMDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIG9ydGhvZ29uYWwgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcnRobyhvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gICAgbGV0IGxyID0gMSAvIChsZWZ0IC0gcmlnaHQpO1xuICAgIGxldCBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcbiAgICBsZXQgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICAgIG91dFswXSA9IC0yICogbHI7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSAtMiAqIGJ0O1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IDIgKiBuZjtcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gKGxlZnQgKyByaWdodCkgKiBscjtcbiAgICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgICBvdXRbMTRdID0gKGZhciArIG5lYXIpICogbmY7XG4gICAgb3V0WzE1XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBtYXRyaXggdGhhdCBtYWtlcyBzb21ldGhpbmcgbG9vayBhdCBzb21ldGhpbmcgZWxzZS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge3ZlYzN9IGV5ZSBQb3NpdGlvbiBvZiB0aGUgdmlld2VyXG4gKiBAcGFyYW0ge3ZlYzN9IHRhcmdldCBQb2ludCB0aGUgdmlld2VyIGlzIGxvb2tpbmcgYXRcbiAqIEBwYXJhbSB7dmVjM30gdXAgdmVjMyBwb2ludGluZyB1cFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFyZ2V0VG8ob3V0LCBleWUsIHRhcmdldCwgdXApIHtcbiAgICBsZXQgZXlleCA9IGV5ZVswXSxcbiAgICAgICAgZXlleSA9IGV5ZVsxXSxcbiAgICAgICAgZXlleiA9IGV5ZVsyXSxcbiAgICAgICAgdXB4ID0gdXBbMF0sXG4gICAgICAgIHVweSA9IHVwWzFdLFxuICAgICAgICB1cHogPSB1cFsyXTtcblxuICAgIGxldCB6MCA9IGV5ZXggLSB0YXJnZXRbMF0sXG4gICAgICAgIHoxID0gZXlleSAtIHRhcmdldFsxXSxcbiAgICAgICAgejIgPSBleWV6IC0gdGFyZ2V0WzJdO1xuXG4gICAgbGV0IGxlbiA9IHowICogejAgKyB6MSAqIHoxICsgejIgKiB6MjtcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgIC8vIGV5ZSBhbmQgdGFyZ2V0IGFyZSBpbiB0aGUgc2FtZSBwb3NpdGlvblxuICAgICAgICB6MiA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgICAgICB6MCAqPSBsZW47XG4gICAgICAgIHoxICo9IGxlbjtcbiAgICAgICAgejIgKj0gbGVuO1xuICAgIH1cblxuICAgIGxldCB4MCA9IHVweSAqIHoyIC0gdXB6ICogejEsXG4gICAgICAgIHgxID0gdXB6ICogejAgLSB1cHggKiB6MixcbiAgICAgICAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xuXG4gICAgbGVuID0geDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyO1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgLy8gdXAgYW5kIHogYXJlIHBhcmFsbGVsXG4gICAgICAgIGlmICh1cHopIHtcbiAgICAgICAgICAgIHVweCArPSAxZS02O1xuICAgICAgICB9IGVsc2UgaWYgKHVweSkge1xuICAgICAgICAgICAgdXB6ICs9IDFlLTY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cHkgKz0gMWUtNjtcbiAgICAgICAgfVxuICAgICAgICAoeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxKSwgKHgxID0gdXB6ICogejAgLSB1cHggKiB6MiksICh4MiA9IHVweCAqIHoxIC0gdXB5ICogejApO1xuXG4gICAgICAgIGxlbiA9IHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4MjtcbiAgICB9XG5cbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gICAgeDAgKj0gbGVuO1xuICAgIHgxICo9IGxlbjtcbiAgICB4MiAqPSBsZW47XG5cbiAgICBvdXRbMF0gPSB4MDtcbiAgICBvdXRbMV0gPSB4MTtcbiAgICBvdXRbMl0gPSB4MjtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IHoxICogeDIgLSB6MiAqIHgxO1xuICAgIG91dFs1XSA9IHoyICogeDAgLSB6MCAqIHgyO1xuICAgIG91dFs2XSA9IHowICogeDEgLSB6MSAqIHgwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gejA7XG4gICAgb3V0WzldID0gejE7XG4gICAgb3V0WzEwXSA9IHoyO1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSBleWV4O1xuICAgIG91dFsxM10gPSBleWV5O1xuICAgIG91dFsxNF0gPSBleWV6O1xuICAgIG91dFsxNV0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gbWF0NCdzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICAgIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICAgIG91dFs3XSA9IGFbN10gKyBiWzddO1xuICAgIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xuICAgIG91dFs5XSA9IGFbOV0gKyBiWzldO1xuICAgIG91dFsxMF0gPSBhWzEwXSArIGJbMTBdO1xuICAgIG91dFsxMV0gPSBhWzExXSArIGJbMTFdO1xuICAgIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXSArIGJbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XSArIGJbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcbiAgICBvdXRbOV0gPSBhWzldIC0gYls5XTtcbiAgICBvdXRbMTBdID0gYVsxMF0gLSBiWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxMV0gLSBiWzExXTtcbiAgICBvdXRbMTJdID0gYVsxMl0gLSBiWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM10gLSBiWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF0gLSBiWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV0gLSBiWzE1XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgb3V0WzRdID0gYVs0XSAqIGI7XG4gICAgb3V0WzVdID0gYVs1XSAqIGI7XG4gICAgb3V0WzZdID0gYVs2XSAqIGI7XG4gICAgb3V0WzddID0gYVs3XSAqIGI7XG4gICAgb3V0WzhdID0gYVs4XSAqIGI7XG4gICAgb3V0WzldID0gYVs5XSAqIGI7XG4gICAgb3V0WzEwXSA9IGFbMTBdICogYjtcbiAgICBvdXRbMTFdID0gYVsxMV0gKiBiO1xuICAgIG91dFsxMl0gPSBhWzEyXSAqIGI7XG4gICAgb3V0WzEzXSA9IGFbMTNdICogYjtcbiAgICBvdXRbMTRdID0gYVsxNF0gKiBiO1xuICAgIG91dFsxNV0gPSBhWzE1XSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsImltcG9ydCAqIGFzIHZlYzQgZnJvbSAnLi9WZWM0RnVuYy5qcyc7XG5cbi8qKlxuICogU2V0IGEgcXVhdCB0byB0aGUgaWRlbnRpdHkgcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldHMgYSBxdWF0IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFuZCByb3RhdGlvbiBheGlzLFxuICogdGhlbiByZXR1cm5zIGl0LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIGFyb3VuZCB3aGljaCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRBeGlzQW5nbGUob3V0LCBheGlzLCByYWQpIHtcbiAgICByYWQgPSByYWQgKiAwLjU7XG4gICAgbGV0IHMgPSBNYXRoLnNpbihyYWQpO1xuICAgIG91dFswXSA9IHMgKiBheGlzWzBdO1xuICAgIG91dFsxXSA9IHMgKiBheGlzWzFdO1xuICAgIG91dFsyXSA9IHMgKiBheGlzWzJdO1xuICAgIG91dFszXSA9IE1hdGguY29zKHJhZCk7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBxdWF0c1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieCA9IGJbMF0sXG4gICAgICAgIGJ5ID0gYlsxXSxcbiAgICAgICAgYnogPSBiWzJdLFxuICAgICAgICBidyA9IGJbM107XG5cbiAgICBvdXRbMF0gPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5O1xuICAgIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieDtcbiAgICBvdXRbM10gPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBYIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWChvdXQsIGEsIHJhZCkge1xuICAgIHJhZCAqPSAwLjU7XG5cbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieCA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4O1xuICAgIG91dFsxXSA9IGF5ICogYncgKyBheiAqIGJ4O1xuICAgIG91dFsyXSA9IGF6ICogYncgLSBheSAqIGJ4O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBZIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIHJhZCkge1xuICAgIHJhZCAqPSAwLjU7XG5cbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieSA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGF4ICogYncgLSBheiAqIGJ5O1xuICAgIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5O1xuICAgIG91dFsyXSA9IGF6ICogYncgKyBheCAqIGJ5O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheSAqIGJ5O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBaIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIHJhZCkge1xuICAgIHJhZCAqPSAwLjU7XG5cbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieiA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGF4ICogYncgKyBheSAqIGJ6O1xuICAgIG91dFsxXSA9IGF5ICogYncgLSBheCAqIGJ6O1xuICAgIG91dFsyXSA9IGF6ICogYncgKyBhdyAqIGJ6O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheiAqIGJ6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICAvLyBiZW5jaG1hcmtzOlxuICAgIC8vICAgIGh0dHA6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tc2xlcnAtaW1wbGVtZW50YXRpb25zXG4gICAgbGV0IGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBheiA9IGFbMl0sXG4gICAgICAgIGF3ID0gYVszXTtcbiAgICBsZXQgYnggPSBiWzBdLFxuICAgICAgICBieSA9IGJbMV0sXG4gICAgICAgIGJ6ID0gYlsyXSxcbiAgICAgICAgYncgPSBiWzNdO1xuXG4gICAgbGV0IG9tZWdhLCBjb3NvbSwgc2lub20sIHNjYWxlMCwgc2NhbGUxO1xuXG4gICAgLy8gY2FsYyBjb3NpbmVcbiAgICBjb3NvbSA9IGF4ICogYnggKyBheSAqIGJ5ICsgYXogKiBieiArIGF3ICogYnc7XG4gICAgLy8gYWRqdXN0IHNpZ25zIChpZiBuZWNlc3NhcnkpXG4gICAgaWYgKGNvc29tIDwgMC4wKSB7XG4gICAgICAgIGNvc29tID0gLWNvc29tO1xuICAgICAgICBieCA9IC1ieDtcbiAgICAgICAgYnkgPSAtYnk7XG4gICAgICAgIGJ6ID0gLWJ6O1xuICAgICAgICBidyA9IC1idztcbiAgICB9XG4gICAgLy8gY2FsY3VsYXRlIGNvZWZmaWNpZW50c1xuICAgIGlmICgxLjAgLSBjb3NvbSA+IDAuMDAwMDAxKSB7XG4gICAgICAgIC8vIHN0YW5kYXJkIGNhc2UgKHNsZXJwKVxuICAgICAgICBvbWVnYSA9IE1hdGguYWNvcyhjb3NvbSk7XG4gICAgICAgIHNpbm9tID0gTWF0aC5zaW4ob21lZ2EpO1xuICAgICAgICBzY2FsZTAgPSBNYXRoLnNpbigoMS4wIC0gdCkgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICAgICAgc2NhbGUxID0gTWF0aC5zaW4odCAqIG9tZWdhKSAvIHNpbm9tO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFwiZnJvbVwiIGFuZCBcInRvXCIgcXVhdGVybmlvbnMgYXJlIHZlcnkgY2xvc2VcbiAgICAgICAgLy8gIC4uLiBzbyB3ZSBjYW4gZG8gYSBsaW5lYXIgaW50ZXJwb2xhdGlvblxuICAgICAgICBzY2FsZTAgPSAxLjAgLSB0O1xuICAgICAgICBzY2FsZTEgPSB0O1xuICAgIH1cbiAgICAvLyBjYWxjdWxhdGUgZmluYWwgdmFsdWVzXG4gICAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgICBvdXRbMV0gPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xuICAgIG91dFsyXSA9IHNjYWxlMCAqIGF6ICsgc2NhbGUxICogYno7XG4gICAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBvZiBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBpbnZlcnNlIG9mXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gICAgbGV0IGEwID0gYVswXSxcbiAgICAgICAgYTEgPSBhWzFdLFxuICAgICAgICBhMiA9IGFbMl0sXG4gICAgICAgIGEzID0gYVszXTtcbiAgICBsZXQgZG90ID0gYTAgKiBhMCArIGExICogYTEgKyBhMiAqIGEyICsgYTMgKiBhMztcbiAgICBsZXQgaW52RG90ID0gZG90ID8gMS4wIC8gZG90IDogMDtcblxuICAgIC8vIFRPRE86IFdvdWxkIGJlIGZhc3RlciB0byByZXR1cm4gWzAsMCwwLDBdIGltbWVkaWF0ZWx5IGlmIGRvdCA9PSAwXG5cbiAgICBvdXRbMF0gPSAtYTAgKiBpbnZEb3Q7XG4gICAgb3V0WzFdID0gLWExICogaW52RG90O1xuICAgIG91dFsyXSA9IC1hMiAqIGludkRvdDtcbiAgICBvdXRbM10gPSBhMyAqIGludkRvdDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIHF1YXRcbiAqIElmIHRoZSBxdWF0ZXJuaW9uIGlzIG5vcm1hbGl6ZWQsIHRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyIHRoYW4gcXVhdC5pbnZlcnNlIGFuZCBwcm9kdWNlcyB0aGUgc2FtZSByZXN1bHQuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgY29uanVnYXRlIG9mXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25qdWdhdGUob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gLWFbMF07XG4gICAgb3V0WzFdID0gLWFbMV07XG4gICAgb3V0WzJdID0gLWFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIDN4MyByb3RhdGlvbiBtYXRyaXguXG4gKlxuICogTk9URTogVGhlIHJlc3VsdGFudCBxdWF0ZXJuaW9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyB5b3Ugc2hvdWxkIGJlIHN1cmVcbiAqIHRvIHJlbm9ybWFsaXplIHRoZSBxdWF0ZXJuaW9uIHlvdXJzZWxmIHdoZXJlIG5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7bWF0M30gbSByb3RhdGlvbiBtYXRyaXhcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDMob3V0LCBtKSB7XG4gICAgLy8gQWxnb3JpdGhtIGluIEtlbiBTaG9lbWFrZSdzIGFydGljbGUgaW4gMTk4NyBTSUdHUkFQSCBjb3Vyc2Ugbm90ZXNcbiAgICAvLyBhcnRpY2xlIFwiUXVhdGVybmlvbiBDYWxjdWx1cyBhbmQgRmFzdCBBbmltYXRpb25cIi5cbiAgICBsZXQgZlRyYWNlID0gbVswXSArIG1bNF0gKyBtWzhdO1xuICAgIGxldCBmUm9vdDtcblxuICAgIGlmIChmVHJhY2UgPiAwLjApIHtcbiAgICAgICAgLy8gfHd8ID4gMS8yLCBtYXkgYXMgd2VsbCBjaG9vc2UgdyA+IDEvMlxuICAgICAgICBmUm9vdCA9IE1hdGguc3FydChmVHJhY2UgKyAxLjApOyAvLyAyd1xuICAgICAgICBvdXRbM10gPSAwLjUgKiBmUm9vdDtcbiAgICAgICAgZlJvb3QgPSAwLjUgLyBmUm9vdDsgLy8gMS8oNHcpXG4gICAgICAgIG91dFswXSA9IChtWzVdIC0gbVs3XSkgKiBmUm9vdDtcbiAgICAgICAgb3V0WzFdID0gKG1bNl0gLSBtWzJdKSAqIGZSb290O1xuICAgICAgICBvdXRbMl0gPSAobVsxXSAtIG1bM10pICogZlJvb3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gfHd8IDw9IDEvMlxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGlmIChtWzRdID4gbVswXSkgaSA9IDE7XG4gICAgICAgIGlmIChtWzhdID4gbVtpICogMyArIGldKSBpID0gMjtcbiAgICAgICAgbGV0IGogPSAoaSArIDEpICUgMztcbiAgICAgICAgbGV0IGsgPSAoaSArIDIpICUgMztcblxuICAgICAgICBmUm9vdCA9IE1hdGguc3FydChtW2kgKiAzICsgaV0gLSBtW2ogKiAzICsgal0gLSBtW2sgKiAzICsga10gKyAxLjApO1xuICAgICAgICBvdXRbaV0gPSAwLjUgKiBmUm9vdDtcbiAgICAgICAgZlJvb3QgPSAwLjUgLyBmUm9vdDtcbiAgICAgICAgb3V0WzNdID0gKG1baiAqIDMgKyBrXSAtIG1bayAqIDMgKyBqXSkgKiBmUm9vdDtcbiAgICAgICAgb3V0W2pdID0gKG1baiAqIDMgKyBpXSArIG1baSAqIDMgKyBqXSkgKiBmUm9vdDtcbiAgICAgICAgb3V0W2tdID0gKG1bayAqIDMgKyBpXSArIG1baSAqIDMgKyBrXSkgKiBmUm9vdDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGV1bGVyIGFuZ2xlIHgsIHksIHouXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IGV1bGVyIEFuZ2xlcyB0byByb3RhdGUgYXJvdW5kIGVhY2ggYXhpcyBpbiBkZWdyZWVzLlxuICogQHBhcmFtIHtTdHJpbmd9IG9yZGVyIGRldGFpbGluZyBvcmRlciBvZiBvcGVyYXRpb25zLiBEZWZhdWx0ICdYWVonLlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXVsZXIob3V0LCBldWxlciwgb3JkZXIgPSAnWVhaJykge1xuICAgIGxldCBzeCA9IE1hdGguc2luKGV1bGVyWzBdICogMC41KTtcbiAgICBsZXQgY3ggPSBNYXRoLmNvcyhldWxlclswXSAqIDAuNSk7XG4gICAgbGV0IHN5ID0gTWF0aC5zaW4oZXVsZXJbMV0gKiAwLjUpO1xuICAgIGxldCBjeSA9IE1hdGguY29zKGV1bGVyWzFdICogMC41KTtcbiAgICBsZXQgc3ogPSBNYXRoLnNpbihldWxlclsyXSAqIDAuNSk7XG4gICAgbGV0IGN6ID0gTWF0aC5jb3MoZXVsZXJbMl0gKiAwLjUpO1xuXG4gICAgaWYgKG9yZGVyID09PSAnWFlaJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogKyBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiAtIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6ICsgc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogLSBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1lYWicpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6ICsgY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogLSBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiAtIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6ICsgc3ggKiBzeSAqIHN6O1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWFknKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6ICsgc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogKyBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiAtIHN4ICogc3kgKiBzejtcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWllYJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogLSBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiArIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogKyBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1laWCcpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6ICsgY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiAtIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6IC0gc3ggKiBzeSAqIHN6O1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdYWlknKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6IC0gc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogKyBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBxdWF0IHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgc291cmNlIHF1YXRlcm5pb25cbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgY29weSA9IHZlYzQuY29weTtcblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBxdWF0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHNldCA9IHZlYzQuc2V0O1xuXG4vKipcbiAqIEFkZHMgdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGFkZCA9IHZlYzQuYWRkO1xuXG4vKipcbiAqIFNjYWxlcyBhIHF1YXQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzY2FsZSA9IHZlYzQuc2NhbGU7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBkb3QgPSB2ZWM0LmRvdDtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGxlcnAgPSB2ZWM0LmxlcnA7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGNvbnN0IGxlbmd0aCA9IHZlYzQubGVuZ3RoO1xuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0ZXJuaW9uIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemUgPSB2ZWM0Lm5vcm1hbGl6ZTtcbiIsImNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeikge1xuICAgIG91dFswXSA9IHg7XG4gICAgb3V0WzFdID0geTtcbiAgICBvdXRbMl0gPSB6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogRGl2aWRlcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLyBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2NhbGVzIGEgdmVjMyBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYjtcbiAgICBvdXRbMV0gPSBhWzFdICogYjtcbiAgICBvdXRbMl0gPSBhWzJdICogYjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICAgIGxldCB4ID0gYlswXSAtIGFbMF07XG4gICAgbGV0IHkgPSBiWzFdIC0gYVsxXTtcbiAgICBsZXQgeiA9IGJbMl0gLSBhWzJdO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICAgIGxldCB4ID0gYlswXSAtIGFbMF07XG4gICAgbGV0IHkgPSBiWzFdIC0gYVsxXTtcbiAgICBsZXQgeiA9IGJbMl0gLSBhWzJdO1xuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWRMZW5ndGgoYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG59XG5cbi8qKlxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBuZWdhdGVcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5lZ2F0ZShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSAtYVswXTtcbiAgICBvdXRbMV0gPSAtYVsxXTtcbiAgICBvdXRbMl0gPSAtYVsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gaW52ZXJ0XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICAgIG91dFswXSA9IDEuMCAvIGFbMF07XG4gICAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgICBvdXRbMl0gPSAxLjAgLyBhWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIGxldCBsZW4gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgLy9UT0RPOiBldmFsdWF0ZSB1c2Ugb2YgZ2xtX2ludnNxcnQgaGVyZT9cbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIH1cbiAgICBvdXRbMF0gPSBhWzBdICogbGVuO1xuICAgIG91dFsxXSA9IGFbMV0gKiBsZW47XG4gICAgb3V0WzJdID0gYVsyXSAqIGxlbjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XG4gICAgbGV0IGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBheiA9IGFbMl07XG4gICAgbGV0IGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICBieiA9IGJbMl07XG5cbiAgICBvdXRbMF0gPSBheSAqIGJ6IC0gYXogKiBieTtcbiAgICBvdXRbMV0gPSBheiAqIGJ4IC0gYXggKiBiejtcbiAgICBvdXRbMl0gPSBheCAqIGJ5IC0gYXkgKiBieDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICBsZXQgYXggPSBhWzBdO1xuICAgIGxldCBheSA9IGFbMV07XG4gICAgbGV0IGF6ID0gYVsyXTtcbiAgICBvdXRbMF0gPSBheCArIHQgKiAoYlswXSAtIGF4KTtcbiAgICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDQuXG4gKiA0dGggdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7bWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gICAgbGV0IHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgbGV0IHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XG4gICAgdyA9IHcgfHwgMS4wO1xuICAgIG91dFswXSA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSkgLyB3O1xuICAgIG91dFsxXSA9IChtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSkgLyB3O1xuICAgIG91dFsyXSA9IChtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6ICsgbVsxNF0pIC8gdztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNhbWUgYXMgYWJvdmUgYnV0IGRvZXNuJ3QgYXBwbHkgdHJhbnNsYXRpb24uXG4gKiBVc2VmdWwgZm9yIHJheXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZVJvdGF0ZU1hdDQob3V0LCBhLCBtKSB7XG4gICAgbGV0IHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgbGV0IHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XG4gICAgdyA9IHcgfHwgMS4wO1xuICAgIG91dFswXSA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHopIC8gdztcbiAgICBvdXRbMV0gPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6KSAvIHc7XG4gICAgb3V0WzJdID0gKG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHopIC8gdztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDMuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHttYXQzfSBtIHRoZSAzeDMgbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQzKG91dCwgYSwgbSkge1xuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIG91dFswXSA9IHggKiBtWzBdICsgeSAqIG1bM10gKyB6ICogbVs2XTtcbiAgICBvdXRbMV0gPSB4ICogbVsxXSArIHkgKiBtWzRdICsgeiAqIG1bN107XG4gICAgb3V0WzJdID0geCAqIG1bMl0gKyB5ICogbVs1XSArIHogKiBtWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7cXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1RdWF0KG91dCwgYSwgcSkge1xuICAgIC8vIGJlbmNobWFya3M6IGh0dHBzOi8vanNwZXJmLmNvbS9xdWF0ZXJuaW9uLXRyYW5zZm9ybS12ZWMzLWltcGxlbWVudGF0aW9ucy1maXhlZFxuXG4gICAgbGV0IHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgbGV0IHF4ID0gcVswXSxcbiAgICAgICAgcXkgPSBxWzFdLFxuICAgICAgICBxeiA9IHFbMl0sXG4gICAgICAgIHF3ID0gcVszXTtcblxuICAgIGxldCB1dnggPSBxeSAqIHogLSBxeiAqIHk7XG4gICAgbGV0IHV2eSA9IHF6ICogeCAtIHF4ICogejtcbiAgICBsZXQgdXZ6ID0gcXggKiB5IC0gcXkgKiB4O1xuXG4gICAgbGV0IHV1dnggPSBxeSAqIHV2eiAtIHF6ICogdXZ5O1xuICAgIGxldCB1dXZ5ID0gcXogKiB1dnggLSBxeCAqIHV2ejtcbiAgICBsZXQgdXV2eiA9IHF4ICogdXZ5IC0gcXkgKiB1dng7XG5cbiAgICBsZXQgdzIgPSBxdyAqIDI7XG4gICAgdXZ4ICo9IHcyO1xuICAgIHV2eSAqPSB3MjtcbiAgICB1dnogKj0gdzI7XG5cbiAgICB1dXZ4ICo9IDI7XG4gICAgdXV2eSAqPSAyO1xuICAgIHV1dnogKj0gMjtcblxuICAgIG91dFswXSA9IHggKyB1dnggKyB1dXZ4O1xuICAgIG91dFsxXSA9IHkgKyB1dnkgKyB1dXZ5O1xuICAgIG91dFsyXSA9IHogKyB1dnogKyB1dXZ6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBhbmdsZSBiZXR3ZWVuIHR3byAzRCB2ZWN0b3JzXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zXG4gKi9cbmV4cG9ydCBjb25zdCBhbmdsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdGVtcEEgPSBbMCwgMCwgMF07XG4gICAgY29uc3QgdGVtcEIgPSBbMCwgMCwgMF07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgY29weSh0ZW1wQSwgYSk7XG4gICAgICAgIGNvcHkodGVtcEIsIGIpO1xuXG4gICAgICAgIG5vcm1hbGl6ZSh0ZW1wQSwgdGVtcEEpO1xuICAgICAgICBub3JtYWxpemUodGVtcEIsIHRlbXBCKTtcblxuICAgICAgICBsZXQgY29zaW5lID0gZG90KHRlbXBBLCB0ZW1wQik7XG5cbiAgICAgICAgaWYgKGNvc2luZSA+IDEuMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSBpZiAoY29zaW5lIDwgLTEuMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguUEk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hY29zKGNvc2luZSk7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICAgIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXTtcbn1cbiIsImNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjNCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6LCB3KSB7XG4gICAgb3V0WzBdID0geDtcbiAgICBvdXRbMV0gPSB5O1xuICAgIG91dFsyXSA9IHo7XG4gICAgb3V0WzNdID0gdztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEFkZHMgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNjYWxlcyBhIHZlYzQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICBsZXQgdyA9IGFbM107XG4gICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdyk7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIGxldCB3ID0gYVszXTtcbiAgICBsZXQgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIH1cbiAgICBvdXRbMF0gPSB4ICogbGVuO1xuICAgIG91dFsxXSA9IHkgKiBsZW47XG4gICAgb3V0WzJdID0geiAqIGxlbjtcbiAgICBvdXRbM10gPSB3ICogbGVuO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xuICAgIGxldCBheCA9IGFbMF07XG4gICAgbGV0IGF5ID0gYVsxXTtcbiAgICBsZXQgYXogPSBhWzJdO1xuICAgIGxldCBhdyA9IGFbM107XG4gICAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gICAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XG4gICAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XG4gICAgb3V0WzNdID0gYXcgKyB0ICogKGJbM10gLSBhdyk7XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcImVjY2MwM2EwZWI1MzJkOGQ4M2RhXCIpIl0sIm5hbWVzIjpbIkdhbGxlcnkiLCJjb25zdHJ1Y3RvciIsImVsZW1lbnQiLCJnZW9tZXRyeSIsImluZGV4IiwiZ2wiLCJzY2VuZSIsInNpemVzIiwidGhpcyIsImVsZW1lbnRzV3JhcHBlciIsInF1ZXJ5U2VsZWN0b3IiLCJncm91cCIsIlRyYW5zZm9ybSIsInNjcm9sbCIsImN1cnJlbnQiLCJ0YXJnZXQiLCJzdGFydCIsImxlcnAiLCJ2ZWxvY2l0eSIsImNyZWF0ZU1lZGlhcyIsInNldFBhcmVudCIsIm1lZGlhc0VsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsIm1lZGlhcyIsIm1hcCIsIk1lZGlhIiwic2hvdyIsIm1lZGlhIiwiaGlkZSIsIm9uUmVzaXplIiwiZSIsImJvdW5kcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwid2luZG93IiwiaW5uZXJXaWR0aCIsIm9uVG91Y2hEb3duIiwieCIsInkiLCJvblRvdWNoTW92ZSIsImRpc3RhbmNlIiwiZW5kIiwib25Ub3VjaFVwIiwidXBkYXRlIiwiaW5uZXJIZWlnaHQiLCJkaXJlY3Rpb24iLCJHU0FQIiwidXRpbHMiLCJpbnRlcnBvbGF0ZSIsInNjYWxlWCIsIm1lc2giLCJzY2FsZSIsInBvc2l0aW9uIiwiZXh0cmEiLCJoZWlnaHQiLCJkZXN0cm95IiwicmVtb3ZlQ2hpbGQiLCJjcmVhdGVUZXh0dXJlIiwiY3JlYXRlUHJvZ3JhbSIsImNyZWF0ZU1lc2giLCJpbWFnZSIsInRleHR1cmUiLCJURVhUVVJFUyIsImdldEF0dHJpYnV0ZSIsInByb2dyYW0iLCJQcm9ncmFtIiwiZnJhZ21lbnQiLCJ2ZXJ0ZXgiLCJ1bmlmb3JtcyIsInVBbHBoYSIsInZhbHVlIiwidE1hcCIsIk1lc2giLCJjcmVhdGVCb3VuZHMiLCJ1cGRhdGVTY2FsZSIsInVwZGF0ZVgiLCJ1cGRhdGVZIiwiZnJvbVRvIiwiZGVsYXkiLCJkdXJhdGlvbiIsInRvIiwidXBkYXRlUm90YXRpb24iLCJyb3RhdGlvbiIsInoiLCJtYXBSYW5nZSIsIk1hdGgiLCJQSSIsImFicyIsImxlZnQiLCJ0b3AiLCJjb3MiLCJjcmVhdGVHZW9tZXRyeSIsImNyZWF0ZUdhbGxlcmllcyIsIlBsYW5lIiwiZ2FsbGVyaWVzRWxlbWVudHMiLCJkb2N1bWVudCIsImdhbGxlcmllcyIsImdhbGxlcnkiLCJvbldoZWVsIiwicGl4ZWxYIiwicGl4ZWxZIiwib3BhY2l0eSIsIm11bHRpcGxpZXIiLCJzaW4iLCJ0cmFuc2Zvcm1QcmVmaXgiLCJQcmVmaXgiLCJnYWxsZXJ5RWxlbWVudCIsImdhbGxlcnlXcmFwcGVyRWxlbWVudCIsImNvbGxlY3Rpb25zRWxlbWVudHMiLCJ0aXRsZXNFbGVtZW50IiwiY29sbGVjdGlvbnNFbGVtZW50c0FjdGl2ZSIsInNwZWVkIiwiY3JlYXRlR2FsbGVyeSIsImV2ZW50IiwibGFzdCIsImxpbWl0IiwiY2xpZW50V2lkdGgiLCJvbkNoYW5nZSIsInNlbGVjdGVkQ29sbGVjdGlvbiIsInBhcnNlSW50IiwiZWxlbWVudEluZGV4IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwic3R5bGUiLCJjbGFtcCIsImZsb29yIiwibGVuZ3RoIiwidVNwZWVkIiwidVZpZXdwb3J0U2l6ZXMiLCJyYW5kb20iLCJzY3JvbGxDdXJyZW50Iiwid2lkdGhTZWdtZW50cyIsImhlaWdodFNlZ21lbnRzIiwiZ2FsbGVyeUJvdW5kcyIsImdhbGxlcnlTaXplcyIsInhEaXN0YW5jZSIsInlEaXN0YW5jZSIsIm9mZnNldFgiLCJzY2FsZVkiLCJvZmZzZXRZIiwiY29sbGVjdGlvbnMiLCJ1cmwiLCJ0cmFuc2l0aW9uIiwiQ2FudmFzIiwidGVtcGxhdGUiLCJjcmVhdGVSZW5kZXJlciIsImNyZWF0ZUNhbWVyYSIsImNyZWF0ZVNjZW5lIiwicmVuZGVyZXIiLCJSZW5kZXJlciIsImFscGhhIiwiYW50aWFsaWFzIiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2FudmFzIiwiY2FtZXJhIiwiQ2FtZXJhIiwiY3JlYXRlSG9tZSIsImhvbWUiLCJIb21lIiwiZGVzdHJveUhvbWUiLCJjcmVhdGVBYm91dCIsImFib3V0IiwiQWJvdXQiLCJkZXN0cm95QWJvdXQiLCJjcmVhdGVDb2xsZWN0aW9ucyIsIkNvbGxlY3Rpb25zIiwiZGVzdHJveUNvbGxlY3Rpb25zIiwiY3JlYXRlRGV0YWlscyIsImRldGFpbHMiLCJEZXRhaWxzIiwiZGVzdHJveURldGFpbHMiLCJvblByZWxvYWRlZCIsIm9uQ2hhbmdlRW5kIiwib25DaGFuZ2VTdGFydCIsImlzRnJvbUNvbGxlY3Rpb25zVG9EZXRhaWwiLCJpbmRleE9mIiwiaXNGcm9tRGV0YWlsVG9Db2xsZWN0aW9ucyIsIlRyYW5zaXRpb24iLCJzZXRTaXplIiwicGVyc3BlY3RpdmUiLCJhc3BlY3QiLCJmb3YiLCJ0YW4iLCJ2YWx1ZXMiLCJpc0Rvd24iLCJ0b3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJjaGFuZ2VkVG91Y2hlcyIsInJlbmRlciIsInRlbXBNYXQ0IiwiTWF0NCIsInRlbXBWZWMzYSIsIlZlYzMiLCJ0ZW1wVmVjM2IiLCJuZWFyIiwiZmFyIiwicmlnaHQiLCJib3R0b20iLCJ6b29tIiwic3VwZXIiLCJPYmplY3QiLCJhc3NpZ24iLCJwcm9qZWN0aW9uTWF0cml4Iiwidmlld01hdHJpeCIsInByb2plY3Rpb25WaWV3TWF0cml4Iiwid29ybGRQb3NpdGlvbiIsInR5cGUiLCJvcnRob2dyYXBoaWMiLCJmcm9tUGVyc3BlY3RpdmUiLCJmcm9tT3J0aG9nb25hbCIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiaW52ZXJzZSIsIndvcmxkTWF0cml4IiwiZ2V0VHJhbnNsYXRpb24iLCJtdWx0aXBseSIsImxvb2tBdCIsInByb2plY3QiLCJ2IiwiYXBwbHlNYXRyaXg0IiwidW5wcm9qZWN0IiwidXBkYXRlRnJ1c3R1bSIsImZydXN0dW0iLCJtIiwic2V0IiwiY29uc3RhbnQiLCJpIiwiaW52TGVuIiwiZnJ1c3R1bUludGVyc2VjdHNNZXNoIiwibm9kZSIsImF0dHJpYnV0ZXMiLCJyYWRpdXMiLCJJbmZpbml0eSIsImNvbXB1dGVCb3VuZGluZ1NwaGVyZSIsImNlbnRlciIsImNvcHkiLCJnZXRNYXhTY2FsZU9uQXhpcyIsImZydXN0dW1JbnRlcnNlY3RzU3BoZXJlIiwibm9ybWFsIiwicGxhbmUiLCJkb3QiLCJ0ZW1wVmVjMyIsIklEIiwiQVRUUl9JRCIsImlzQm91bmRzV2FybmVkIiwiR2VvbWV0cnkiLCJjb25zb2xlIiwiZXJyb3IiLCJpZCIsIlZBT3MiLCJkcmF3UmFuZ2UiLCJjb3VudCIsImluc3RhbmNlZENvdW50IiwiYmluZFZlcnRleEFycmF5IiwiY3VycmVudEdlb21ldHJ5IiwiZ2xTdGF0ZSIsInN0YXRlIiwia2V5IiwiYWRkQXR0cmlidXRlIiwiYXR0ciIsInNpemUiLCJkYXRhIiwiRmxvYXQzMkFycmF5IiwiRkxPQVQiLCJVaW50MTZBcnJheSIsIlVOU0lHTkVEX1NIT1JUIiwiVU5TSUdORURfSU5UIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJBUlJBWV9CVUZGRVIiLCJub3JtYWxpemVkIiwic3RyaWRlIiwib2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImRpdmlzb3IiLCJpbnN0YW5jZWQiLCJuZWVkc1VwZGF0ZSIsInVzYWdlIiwiU1RBVElDX0RSQVciLCJidWZmZXIiLCJ1cGRhdGVBdHRyaWJ1dGUiLCJpc0luc3RhbmNlZCIsIndhcm4iLCJtaW4iLCJtYXgiLCJpc05ld0J1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsImJvdW5kQnVmZmVyIiwiYmluZEJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJidWZmZXJTdWJEYXRhIiwic2V0SW5kZXgiLCJzZXREcmF3UmFuZ2UiLCJzZXRJbnN0YW5jZWRDb3VudCIsImNyZWF0ZVZBTyIsImF0dHJpYnV0ZU9yZGVyIiwiY3JlYXRlVmVydGV4QXJyYXkiLCJiaW5kQXR0cmlidXRlcyIsImF0dHJpYnV0ZUxvY2F0aW9ucyIsImZvckVhY2giLCJsb2NhdGlvbiIsIm5hbWUiLCJudW1Mb2MiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJEaXZpc29yIiwiZHJhdyIsIm1vZGUiLCJUUklBTkdMRVMiLCJpbmRleEJ5dGVzUGVyRWxlbWVudCIsImRyYXdFbGVtZW50c0luc3RhbmNlZCIsImRyYXdBcnJheXNJbnN0YW5jZWQiLCJkcmF3RWxlbWVudHMiLCJkcmF3QXJyYXlzIiwiZ2V0UG9zaXRpb24iLCJjb21wdXRlQm91bmRpbmdCb3giLCJhcnJheSIsImwiLCJzdWIiLCJkaXZpZGUiLCJtYXhSYWRpdXNTcSIsImZyb21BcnJheSIsInNxdWFyZWREaXN0YW5jZSIsInNxcnQiLCJkZWxldGVWZXJ0ZXhBcnJheSIsImRlbGV0ZUJ1ZmZlciIsImZydXN0dW1DdWxsZWQiLCJyZW5kZXJPcmRlciIsIm1vZGVsVmlld01hdHJpeCIsIm5vcm1hbE1hdHJpeCIsIk1hdDMiLCJiZWZvcmVSZW5kZXJDYWxsYmFja3MiLCJhZnRlclJlbmRlckNhbGxiYWNrcyIsIm9uQmVmb3JlUmVuZGVyIiwiZiIsInB1c2giLCJvbkFmdGVyUmVuZGVyIiwibW9kZWxNYXRyaXgiLCJjYW1lcmFQb3NpdGlvbiIsImdldE5vcm1hbE1hdHJpeCIsImZsaXBGYWNlcyIsImN1bGxGYWNlIiwiZGV0ZXJtaW5hbnQiLCJ1c2UiLCJhcnJheUNhY2hlRjMyIiwidHJhbnNwYXJlbnQiLCJCQUNLIiwiZnJvbnRGYWNlIiwiQ0NXIiwiZGVwdGhUZXN0IiwiZGVwdGhXcml0ZSIsImRlcHRoRnVuYyIsIkxFU1MiLCJibGVuZEZ1bmMiLCJibGVuZEVxdWF0aW9uIiwic3JjIiwicHJlbXVsdGlwbGllZEFscGhhIiwic2V0QmxlbmRGdW5jIiwiT05FIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIlNSQ19BTFBIQSIsInZlcnRleFNoYWRlciIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVySW5mb0xvZyIsImFkZExpbmVOdW1iZXJzIiwiZnJhZ21lbnRTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwidW5pZm9ybUxvY2F0aW9ucyIsIk1hcCIsIm51bVVuaWZvcm1zIiwiQUNUSVZFX1VOSUZPUk1TIiwidUluZGV4IiwidW5pZm9ybSIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJzcGxpdCIsIm1hdGNoIiwidW5pZm9ybU5hbWUiLCJuYW1lQ29tcG9uZW50cyIsInNsaWNlIiwibG9jYXRpb25zIiwibnVtQXR0cmlicyIsIkFDVElWRV9BVFRSSUJVVEVTIiwiYUluZGV4IiwiYXR0cmlidXRlIiwiZ2V0QWN0aXZlQXR0cmliIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJqb2luIiwiZHN0Iiwic3JjQWxwaGEiLCJkc3RBbHBoYSIsInNldEJsZW5kRXF1YXRpb24iLCJtb2RlUkdCIiwibW9kZUFscGhhIiwiYXBwbHlTdGF0ZSIsImVuYWJsZSIsIkRFUFRIX1RFU1QiLCJkaXNhYmxlIiwiQ1VMTF9GQUNFIiwiQkxFTkQiLCJzZXRDdWxsRmFjZSIsInNldEZyb250RmFjZSIsInNldERlcHRoTWFzayIsInNldERlcHRoRnVuYyIsInRleHR1cmVVbml0IiwiY3VycmVudFByb2dyYW0iLCJ1c2VQcm9ncmFtIiwiYWN0aXZlVW5pZm9ybSIsImNvbXBvbmVudCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsInNldFVuaWZvcm0iLCJ0ZXh0dXJlVW5pdHMiLCJDVyIsImRlbGV0ZVByb2dyYW0iLCJhIiwiYXJyYXlMZW4iLCJ2YWx1ZUxlbiIsImZsYXR0ZW4iLCJzZXRWYWx1ZSIsImdldCIsImIiLCJhcnJheXNFcXVhbCIsInNldEFycmF5IiwidW5pZm9ybTFmdiIsInVuaWZvcm0xZiIsInVuaWZvcm0yZnYiLCJ1bmlmb3JtM2Z2IiwidW5pZm9ybTRmdiIsInVuaWZvcm0xaXYiLCJ1bmlmb3JtMWkiLCJ1bmlmb3JtMml2IiwidW5pZm9ybTNpdiIsInVuaWZvcm00aXYiLCJ1bmlmb3JtTWF0cml4MmZ2IiwidW5pZm9ybU1hdHJpeDNmdiIsInVuaWZvcm1NYXRyaXg0ZnYiLCJzdHJpbmciLCJsaW5lcyIsIndhcm5Db3VudCIsIm1lc3NhZ2UiLCJjcmVhdGVFbGVtZW50IiwiZHByIiwiZGVwdGgiLCJzdGVuY2lsIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwicG93ZXJQcmVmZXJlbmNlIiwiYXV0b0NsZWFyIiwid2ViZ2wiLCJjb2xvciIsImdldENvbnRleHQiLCJpc1dlYmdsMiIsIlpFUk8iLCJGVU5DX0FERCIsImRlcHRoTWFzayIsInByZW11bHRpcGx5QWxwaGEiLCJmbGlwWSIsInVucGFja0FsaWdubWVudCIsImZyYW1lYnVmZmVyIiwidmlld3BvcnQiLCJhY3RpdmVUZXh0dXJlVW5pdCIsImV4dGVuc2lvbnMiLCJnZXRFeHRlbnNpb24iLCJkcmF3QnVmZmVycyIsInBhcmFtZXRlcnMiLCJtYXhUZXh0dXJlVW5pdHMiLCJnZXRQYXJhbWV0ZXIiLCJNQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyIsIm1heEFuaXNvdHJvcHkiLCJNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJzZXRWaWV3cG9ydCIsInNldFNjaXNzb3IiLCJzY2lzc29yIiwiYmxlbmRGdW5jU2VwYXJhdGUiLCJibGVuZEVxdWF0aW9uU2VwYXJhdGUiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImV4dGVuc2lvbiIsIndlYmdsMkZ1bmMiLCJleHRGdW5jIiwiYmluZCIsInNvcnRPcGFxdWUiLCJ6RGVwdGgiLCJzb3J0VHJhbnNwYXJlbnQiLCJzb3J0VUkiLCJnZXRSZW5kZXJMaXN0IiwiZnJ1c3R1bUN1bGwiLCJzb3J0IiwicmVuZGVyTGlzdCIsInRyYXZlcnNlIiwidmlzaWJsZSIsIm9wYXF1ZSIsInVpIiwiY29uY2F0IiwiY2xlYXIiLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVCIsIlNURU5DSUxfQlVGRkVSX0JJVCIsInBhcmVudCIsImNoaWxkcmVuIiwibWF0cml4IiwibWF0cml4QXV0b1VwZGF0ZSIsIndvcmxkTWF0cml4TmVlZHNVcGRhdGUiLCJxdWF0ZXJuaW9uIiwiUXVhdCIsIkV1bGVyIiwidXAiLCJmcm9tRXVsZXIiLCJmcm9tUXVhdGVybmlvbiIsIm5vdGlmeVBhcmVudCIsImFkZENoaWxkIiwiY2hpbGQiLCJub3RpZnlDaGlsZCIsInNwbGljZSIsImZvcmNlIiwidXBkYXRlTWF0cml4IiwiY29tcG9zZSIsImNhbGxiYWNrIiwiZGVjb21wb3NlIiwiZ2V0Um90YXRpb24iLCJnZXRTY2FsaW5nIiwiaW52ZXJ0Iiwid1NlZ3MiLCJoU2VncyIsIm51bSIsIm51bUluZGljZXMiLCJ1diIsIlVpbnQzMkFycmF5IiwiYnVpbGRQbGFuZSIsInUiLCJ3IiwidURpciIsInZEaXIiLCJpaSIsImlvIiwic2VnVyIsInNlZ0giLCJpeSIsIml4IiwiYyIsImQiLCJ0bXBNYXQ0Iiwib3JkZXIiLCJyZW9yZGVyIiwiZnJvbVJvdGF0aW9uTWF0cml4IiwiRXVsZXJGdW5jIiwicSIsIm8iLCJ0b0FycmF5IiwibTAwIiwibTAxIiwibTAyIiwibTEwIiwibTExIiwibTEyIiwibTIwIiwibTIxIiwibTIyIiwiTWF0M0Z1bmMiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJtYSIsIm1iIiwiaWRlbnRpdHkiLCJmcm9tTWF0cml4NCIsImZyb21CYXNpcyIsInZlYzNhIiwidmVjM2IiLCJ2ZWMzYyIsIm0wMyIsIm0xMyIsIm0yMyIsIm0zMCIsIm0zMSIsIm0zMiIsIm0zMyIsIk1hdDRGdW5jIiwiYXhpcyIsInNldFBvc2l0aW9uIiwicG9zIiwiZXllIiwiUXVhdEZ1bmMiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJjb25qdWdhdGUiLCJub3JtYWxpemUiLCJxQSIsInFCIiwiZnJvbU1hdHJpeDMiLCJtYXRyaXgzIiwiZXVsZXIiLCJmcm9tQXhpc0FuZ2xlIiwic2xlcnAiLCJ0IiwiVmVjM0Z1bmMiLCJ2YSIsInZiIiwibGVuIiwic3F1YXJlZExlbiIsIm5lZ2F0ZSIsImNyb3NzIiwiZXF1YWxzIiwiYXBwbHlNYXRyaXgzIiwibWF0MyIsIm1hdDQiLCJzY2FsZVJvdGF0ZU1hdHJpeDQiLCJhcHBseVF1YXRlcm5pb24iLCJhbmdsZSIsImNsb25lIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwib3V0IiwiYXNpbiIsImF0YW4yIiwiZnJvbU1hdDQiLCJmcm9tUXVhdCIsIngyIiwieTIiLCJ6MiIsInh4IiwieXgiLCJ5eSIsInp4IiwienkiLCJ6eiIsInd4Iiwid3kiLCJ3eiIsInRyYW5zcG9zZSIsImEwMSIsImEwMiIsImExMiIsImEwMCIsImExMCIsImExMSIsImEyMCIsImEyMSIsImEyMiIsImIwMSIsImIxMSIsImIyMSIsImRldCIsImIwMCIsImIwMiIsImIxMCIsImIxMiIsImIyMCIsImIyMiIsInJhZCIsInMiLCJub3JtYWxGcm9tTWF0NCIsImEwMyIsImExMyIsImEyMyIsImEzMCIsImEzMSIsImEzMiIsImEzMyIsImIwMyIsImIwNCIsImIwNSIsImIwNiIsImIwNyIsImIwOCIsImIwOSIsInByb2plY3Rpb24iLCJzdWJ0cmFjdCIsIm11bHRpcGx5U2NhbGFyIiwiRVBTSUxPTiIsImIwIiwiYjEiLCJiMiIsImIzIiwiaHlwb3QiLCJtYXQiLCJ0ZW1wIiwic2NhbGluZyIsImlzMSIsImlzMiIsImlzMyIsInNtMTEiLCJzbTEyIiwic20xMyIsInNtMjEiLCJzbTIyIiwic20yMyIsInNtMzEiLCJzbTMyIiwic20zMyIsInRyYWNlIiwiUyIsImZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGUiLCJ4eSIsInh6IiwieXoiLCJzeCIsInN5Iiwic3oiLCJmb3Z5IiwibmYiLCJvcnRobyIsImxyIiwiYnQiLCJ0YXJnZXRUbyIsImV5ZXgiLCJleWV5IiwiZXlleiIsInVweCIsInVweSIsInVweiIsInowIiwiejEiLCJ4MCIsIngxIiwic2V0QXhpc0FuZ2xlIiwiYXgiLCJheSIsImF6IiwiYXciLCJieCIsImJ5IiwiYnoiLCJidyIsIm9tZWdhIiwiY29zb20iLCJzaW5vbSIsInNjYWxlMCIsInNjYWxlMSIsImFjb3MiLCJhMCIsImExIiwiYTIiLCJhMyIsImludkRvdCIsImZyb21NYXQzIiwiZlJvb3QiLCJmVHJhY2UiLCJqIiwiayIsImN4IiwiY3kiLCJjeiIsInZlYzQiLCJzcXVhcmVkTGVuZ3RoIiwidHJhbnNmb3JtTWF0NCIsInNjYWxlUm90YXRlTWF0NCIsInRyYW5zZm9ybU1hdDMiLCJ0cmFuc2Zvcm1RdWF0IiwicXgiLCJxeSIsInF6IiwidXZ4IiwidXZ5IiwidXZ6IiwidXV2eCIsInV1dnkiLCJ1dXZ6IiwidzIiLCJ0ZW1wQSIsInRlbXBCIiwiY29zaW5lIiwiZXhhY3RFcXVhbHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=